
ALED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e398  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800e644  0800e644  0001e644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e714  0800e714  0001e714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e71c  0800e71c  0001e71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e720  0800e720  0001e720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  24000000  0800e724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d84  24000240  0800e964  00020240  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001fc4  0800e964  00021fc4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002396b  00000000  00000000  0002026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000447c  00000000  00000000  00043bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001850  00000000  00000000  00048058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016a8  00000000  00000000  000498a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034b9c  00000000  00000000  0004af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000234d8  00000000  00000000  0007faec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144368  00000000  00000000  000a2fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e732c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006640  00000000  00000000  001e737c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000240 	.word	0x24000240
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800e62c 	.word	0x0800e62c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000244 	.word	0x24000244
 80002e8:	0800e62c 	.word	0x0800e62c

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000606:	4b92      	ldr	r3, [pc, #584]	; (8000850 <MX_GPIO_Init+0x260>)
 8000608:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800060c:	4a90      	ldr	r2, [pc, #576]	; (8000850 <MX_GPIO_Init+0x260>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000616:	4b8e      	ldr	r3, [pc, #568]	; (8000850 <MX_GPIO_Init+0x260>)
 8000618:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800061c:	f003 0310 	and.w	r3, r3, #16
 8000620:	623b      	str	r3, [r7, #32]
 8000622:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b8a      	ldr	r3, [pc, #552]	; (8000850 <MX_GPIO_Init+0x260>)
 8000626:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800062a:	4a89      	ldr	r2, [pc, #548]	; (8000850 <MX_GPIO_Init+0x260>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000634:	4b86      	ldr	r3, [pc, #536]	; (8000850 <MX_GPIO_Init+0x260>)
 8000636:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	4b83      	ldr	r3, [pc, #524]	; (8000850 <MX_GPIO_Init+0x260>)
 8000644:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000648:	4a81      	ldr	r2, [pc, #516]	; (8000850 <MX_GPIO_Init+0x260>)
 800064a:	f043 0320 	orr.w	r3, r3, #32
 800064e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000652:	4b7f      	ldr	r3, [pc, #508]	; (8000850 <MX_GPIO_Init+0x260>)
 8000654:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000658:	f003 0320 	and.w	r3, r3, #32
 800065c:	61bb      	str	r3, [r7, #24]
 800065e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000660:	4b7b      	ldr	r3, [pc, #492]	; (8000850 <MX_GPIO_Init+0x260>)
 8000662:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000666:	4a7a      	ldr	r2, [pc, #488]	; (8000850 <MX_GPIO_Init+0x260>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000670:	4b77      	ldr	r3, [pc, #476]	; (8000850 <MX_GPIO_Init+0x260>)
 8000672:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b74      	ldr	r3, [pc, #464]	; (8000850 <MX_GPIO_Init+0x260>)
 8000680:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000684:	4a72      	ldr	r2, [pc, #456]	; (8000850 <MX_GPIO_Init+0x260>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800068e:	4b70      	ldr	r3, [pc, #448]	; (8000850 <MX_GPIO_Init+0x260>)
 8000690:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069c:	4b6c      	ldr	r3, [pc, #432]	; (8000850 <MX_GPIO_Init+0x260>)
 800069e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a2:	4a6b      	ldr	r2, [pc, #428]	; (8000850 <MX_GPIO_Init+0x260>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ac:	4b68      	ldr	r3, [pc, #416]	; (8000850 <MX_GPIO_Init+0x260>)
 80006ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b65      	ldr	r3, [pc, #404]	; (8000850 <MX_GPIO_Init+0x260>)
 80006bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c0:	4a63      	ldr	r2, [pc, #396]	; (8000850 <MX_GPIO_Init+0x260>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ca:	4b61      	ldr	r3, [pc, #388]	; (8000850 <MX_GPIO_Init+0x260>)
 80006cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d8:	4b5d      	ldr	r3, [pc, #372]	; (8000850 <MX_GPIO_Init+0x260>)
 80006da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006de:	4a5c      	ldr	r2, [pc, #368]	; (8000850 <MX_GPIO_Init+0x260>)
 80006e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e8:	4b59      	ldr	r3, [pc, #356]	; (8000850 <MX_GPIO_Init+0x260>)
 80006ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Servo3_Pin|Servo26_Pin|Servo29_Pin|Servo28_Pin
 80006f6:	2200      	movs	r2, #0
 80006f8:	217e      	movs	r1, #126	; 0x7e
 80006fa:	4856      	ldr	r0, [pc, #344]	; (8000854 <MX_GPIO_Init+0x264>)
 80006fc:	f001 fe60 	bl	80023c0 <HAL_GPIO_WritePin>
                          |Servo27_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Servo24_Pin|Servo25_Pin|Servo23_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8000706:	4854      	ldr	r0, [pc, #336]	; (8000858 <MX_GPIO_Init+0x268>)
 8000708:	f001 fe5a 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Servo11_Pin|Servo10_Pin|Servo21_Pin|Servo16_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	21e2      	movs	r1, #226	; 0xe2
 8000710:	4852      	ldr	r0, [pc, #328]	; (800085c <MX_GPIO_Init+0x26c>)
 8000712:	f001 fe55 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Servo2_Pin|Servo9_Pin|Servo13_Pin|Servo17_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f248 0115 	movw	r1, #32789	; 0x8015
 800071c:	4850      	ldr	r0, [pc, #320]	; (8000860 <MX_GPIO_Init+0x270>)
 800071e:	f001 fe4f 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Servo1_Pin|Servo7_Pin|Servo18_Pin|Servo19_Pin
 8000722:	2200      	movs	r2, #0
 8000724:	f24f 013d 	movw	r1, #61501	; 0xf03d
 8000728:	484e      	ldr	r0, [pc, #312]	; (8000864 <MX_GPIO_Init+0x274>)
 800072a:	f001 fe49 	bl	80023c0 <HAL_GPIO_WritePin>
                          |LD3_Pin|Servo20_Pin|Servo14_Pin|Servo12_Pin
                          |Servo15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Servo22_Pin|Servo4_Pin|Servo5_Pin|Servo6_Pin
 800072e:	2200      	movs	r2, #0
 8000730:	f643 41f8 	movw	r1, #15608	; 0x3cf8
 8000734:	484c      	ldr	r0, [pc, #304]	; (8000868 <MX_GPIO_Init+0x278>)
 8000736:	f001 fe43 	bl	80023c0 <HAL_GPIO_WritePin>
                          |Servo30_Pin|Servo31_Pin|Servo32_Pin|Servo33_Pin
                          |Servo34_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Servo8_Pin|Servo35_Pin|Servo36_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8000740:	484a      	ldr	r0, [pc, #296]	; (800086c <MX_GPIO_Init+0x27c>)
 8000742:	f001 fe3d 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = Servo3_Pin|Servo26_Pin|Servo29_Pin|Servo28_Pin
 8000746:	237e      	movs	r3, #126	; 0x7e
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
                          |Servo27_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	4619      	mov	r1, r3
 800075c:	483d      	ldr	r0, [pc, #244]	; (8000854 <MX_GPIO_Init+0x264>)
 800075e:	f001 fc7f 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4839      	ldr	r0, [pc, #228]	; (800085c <MX_GPIO_Init+0x26c>)
 8000778:	f001 fc72 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = Servo24_Pin|Servo25_Pin|Servo23_Pin|USB_FS_PWR_EN_Pin;
 800077c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4830      	ldr	r0, [pc, #192]	; (8000858 <MX_GPIO_Init+0x268>)
 8000796:	f001 fc63 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Servo11_Pin|Servo10_Pin|Servo21_Pin|Servo16_Pin;
 800079a:	23e2      	movs	r3, #226	; 0xe2
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	482a      	ldr	r0, [pc, #168]	; (800085c <MX_GPIO_Init+0x26c>)
 80007b2:	f001 fc55 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Servo2_Pin|Servo9_Pin|Servo13_Pin|Servo17_Pin;
 80007b6:	f248 0315 	movw	r3, #32789	; 0x8015
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4824      	ldr	r0, [pc, #144]	; (8000860 <MX_GPIO_Init+0x270>)
 80007d0:	f001 fc46 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Servo1_Pin|Servo7_Pin|Servo18_Pin|Servo19_Pin
 80007d4:	f24f 033d 	movw	r3, #61501	; 0xf03d
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD3_Pin|Servo20_Pin|Servo14_Pin|Servo12_Pin
                          |Servo15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	4619      	mov	r1, r3
 80007ec:	481d      	ldr	r0, [pc, #116]	; (8000864 <MX_GPIO_Init+0x274>)
 80007ee:	f001 fc37 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = Servo22_Pin|Servo4_Pin|Servo5_Pin|Servo6_Pin
 80007f2:	f643 43f8 	movw	r3, #15608	; 0x3cf8
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |Servo30_Pin|Servo31_Pin|Servo32_Pin|Servo33_Pin
                          |Servo34_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	4817      	ldr	r0, [pc, #92]	; (8000868 <MX_GPIO_Init+0x278>)
 800080c:	f001 fc28 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Servo8_Pin|Servo35_Pin|Servo36_Pin;
 8000810:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	4619      	mov	r1, r3
 8000828:	4810      	ldr	r0, [pc, #64]	; (800086c <MX_GPIO_Init+0x27c>)
 800082a:	f001 fc19 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	480a      	ldr	r0, [pc, #40]	; (800086c <MX_GPIO_Init+0x27c>)
 8000844:	f001 fc0c 	bl	8002060 <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3738      	adds	r7, #56	; 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58024400 	.word	0x58024400
 8000854:	58021000 	.word	0x58021000
 8000858:	58021400 	.word	0x58021400
 800085c:	58020800 	.word	0x58020800
 8000860:	58020000 	.word	0x58020000
 8000864:	58020400 	.word	0x58020400
 8000868:	58020c00 	.word	0x58020c00
 800086c:	58021800 	.word	0x58021800

08000870 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a20      	ldr	r2, [pc, #128]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d139      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x86>
	{
		pwm_counter++;
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800088a:	6013      	str	r3, [r2, #0]
		for(int i=0; i<36; i++){
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e026      	b.n	80008e0 <HAL_TIM_PeriodElapsedCallback+0x70>
			//			Servo_Handler(Servo_GPIO_Addr[i], Servo_GPIO_Pins[i], Servo_status[i]);
			if(pwm_counter == 1){
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d10b      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x42>
				HAL_GPIO_WritePin(Servo_GPIO_Addr[i], Servo_GPIO_Pins[i], GPIO_PIN_SET);
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008a2:	4a1a      	ldr	r2, [pc, #104]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4619      	mov	r1, r3
 80008ae:	f001 fd87 	bl	80023c0 <HAL_GPIO_WritePin>
			}
			if(pwm_counter == Servo_status[i]){
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d10b      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x6a>
				HAL_GPIO_WritePin(Servo_GPIO_Addr[i], Servo_GPIO_Pins[i], GPIO_PIN_RESET);
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	f001 fd73 	bl	80023c0 <HAL_GPIO_WritePin>
		for(int i=0; i<36; i++){
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3301      	adds	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b23      	cmp	r3, #35	; 0x23
 80008e4:	ddd5      	ble.n	8000892 <HAL_TIM_PeriodElapsedCallback+0x22>
			}
		}
		if(pwm_counter > 2000){
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008ee:	dd02      	ble.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x86>
			pwm_counter=0;
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
		//		if (counter == 1000)
		//		{
		//			HAL_GPIO_WritePin(Servo13_GPIO_Port, Servo13_Pin, GPIO_PIN_RESET);
		//		}
	}
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40010000 	.word	0x40010000
 8000904:	2400025c 	.word	0x2400025c
 8000908:	24000000 	.word	0x24000000
 800090c:	0800e694 	.word	0x0800e694
 8000910:	24000090 	.word	0x24000090

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800091a:	4b6b      	ldr	r3, [pc, #428]	; (8000ac8 <main+0x1b4>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d11b      	bne.n	800095e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000926:	f3bf 8f4f 	dsb	sy
}
 800092a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800092c:	f3bf 8f6f 	isb	sy
}
 8000930:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000932:	4b65      	ldr	r3, [pc, #404]	; (8000ac8 <main+0x1b4>)
 8000934:	2200      	movs	r2, #0
 8000936:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800093a:	f3bf 8f4f 	dsb	sy
}
 800093e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000940:	f3bf 8f6f 	isb	sy
}
 8000944:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000946:	4b60      	ldr	r3, [pc, #384]	; (8000ac8 <main+0x1b4>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a5f      	ldr	r2, [pc, #380]	; (8000ac8 <main+0x1b4>)
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000952:	f3bf 8f4f 	dsb	sy
}
 8000956:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000958:	f3bf 8f6f 	isb	sy
}
 800095c:	e000      	b.n	8000960 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800095e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000960:	4b59      	ldr	r3, [pc, #356]	; (8000ac8 <main+0x1b4>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d138      	bne.n	80009de <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800096c:	4b56      	ldr	r3, [pc, #344]	; (8000ac8 <main+0x1b4>)
 800096e:	2200      	movs	r2, #0
 8000970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000974:	f3bf 8f4f 	dsb	sy
}
 8000978:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800097a:	4b53      	ldr	r3, [pc, #332]	; (8000ac8 <main+0x1b4>)
 800097c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000980:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	0b5b      	lsrs	r3, r3, #13
 8000986:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800098a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000994:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	015a      	lsls	r2, r3, #5
 800099a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800099e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009a4:	4948      	ldr	r1, [pc, #288]	; (8000ac8 <main+0x1b4>)
 80009a6:	4313      	orrs	r3, r2
 80009a8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1ef      	bne.n	8000996 <main+0x82>
    } while(sets-- != 0U);
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1e5a      	subs	r2, r3, #1
 80009ba:	60ba      	str	r2, [r7, #8]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1e5      	bne.n	800098c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80009c0:	f3bf 8f4f 	dsb	sy
}
 80009c4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009c6:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <main+0x1b4>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a3f      	ldr	r2, [pc, #252]	; (8000ac8 <main+0x1b4>)
 80009cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009d2:	f3bf 8f4f 	dsb	sy
}
 80009d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d8:	f3bf 8f6f 	isb	sy
}
 80009dc:	e000      	b.n	80009e0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009de:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fc14 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f882 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff fe02 	bl	80005f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009ec:	f000 fb26 	bl	800103c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80009f0:	f00d f84e 	bl	800da90 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80009f4:	f000 f9f4 	bl	8000de0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009f8:	f000 fa46 	bl	8000e88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, "Hello\r\n", 7, 100);
 80009fc:	2364      	movs	r3, #100	; 0x64
 80009fe:	2207      	movs	r2, #7
 8000a00:	4932      	ldr	r1, [pc, #200]	; (8000acc <main+0x1b8>)
 8000a02:	4833      	ldr	r0, [pc, #204]	; (8000ad0 <main+0x1bc>)
 8000a04:	f007 f88a 	bl	8007b1c <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim1);
 8000a08:	4832      	ldr	r0, [pc, #200]	; (8000ad4 <main+0x1c0>)
 8000a0a:	f005 fe25 	bl	8006658 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, 1);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4931      	ldr	r1, [pc, #196]	; (8000ad8 <main+0x1c4>)
 8000a12:	482f      	ldr	r0, [pc, #188]	; (8000ad0 <main+0x1bc>)
 8000a14:	f007 f910 	bl	8007c38 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4830      	ldr	r0, [pc, #192]	; (8000adc <main+0x1c8>)
 8000a1c:	f005 feec 	bl	80067f8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM_MIN);
 8000a20:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <main+0x1c8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
	pwm = PWM_MIN;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <main+0x1cc>)
 8000a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a30:	601a      	str	r2, [r3, #0]
	while (uartRxBuffer[0]!='i')
 8000a32:	e043      	b.n	8000abc <main+0x1a8>
	{
		if(uartFlag){
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <main+0x1d0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d03f      	beq.n	8000abc <main+0x1a8>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <main+0x1d4>)
 8000a40:	f001 fcd7 	bl	80023f2 <HAL_GPIO_TogglePin>
			uartFlag = 0;
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <main+0x1d0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
			switch (uartRxBuffer[0]) {
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <main+0x1c4>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b74      	cmp	r3, #116	; 0x74
 8000a50:	d00f      	beq.n	8000a72 <main+0x15e>
 8000a52:	2b74      	cmp	r3, #116	; 0x74
 8000a54:	dc28      	bgt.n	8000aa8 <main+0x194>
 8000a56:	2b73      	cmp	r3, #115	; 0x73
 8000a58:	d006      	beq.n	8000a68 <main+0x154>
 8000a5a:	2b73      	cmp	r3, #115	; 0x73
 8000a5c:	dc24      	bgt.n	8000aa8 <main+0x194>
 8000a5e:	2b2b      	cmp	r3, #43	; 0x2b
 8000a60:	d00c      	beq.n	8000a7c <main+0x168>
 8000a62:	2b2d      	cmp	r3, #45	; 0x2d
 8000a64:	d015      	beq.n	8000a92 <main+0x17e>
				break;
			case '-':
				if(pwm>PWM_MIN) pwm-=5;
				break;
			default:
				break;
 8000a66:	e01f      	b.n	8000aa8 <main+0x194>
				pwm = PWM_MIN;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <main+0x1cc>)
 8000a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a6e:	601a      	str	r2, [r3, #0]
				break;
 8000a70:	e01f      	b.n	8000ab2 <main+0x19e>
				pwm = PWM_MAX;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <main+0x1cc>)
 8000a74:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a78:	601a      	str	r2, [r3, #0]
				break;
 8000a7a:	e01a      	b.n	8000ab2 <main+0x19e>
				if(pwm<PWM_MAX) pwm+=5;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <main+0x1cc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a84:	da12      	bge.n	8000aac <main+0x198>
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <main+0x1cc>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3305      	adds	r3, #5
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <main+0x1cc>)
 8000a8e:	6013      	str	r3, [r2, #0]
				break;
 8000a90:	e00c      	b.n	8000aac <main+0x198>
				if(pwm>PWM_MIN) pwm-=5;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <main+0x1cc>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a9a:	dd09      	ble.n	8000ab0 <main+0x19c>
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <main+0x1cc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3b05      	subs	r3, #5
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <main+0x1cc>)
 8000aa4:	6013      	str	r3, [r2, #0]
				break;
 8000aa6:	e003      	b.n	8000ab0 <main+0x19c>
				break;
 8000aa8:	bf00      	nop
 8000aaa:	e002      	b.n	8000ab2 <main+0x19e>
				break;
 8000aac:	bf00      	nop
 8000aae:	e000      	b.n	8000ab2 <main+0x19e>
				break;
 8000ab0:	bf00      	nop
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <main+0x1cc>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <main+0x1c8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
	while (uartRxBuffer[0]!='i')
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <main+0x1c4>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b69      	cmp	r3, #105	; 0x69
 8000ac2:	d1b7      	bne.n	8000a34 <main+0x120>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <main+0x1b0>
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	0800e644 	.word	0x0800e644
 8000ad0:	24000320 	.word	0x24000320
 8000ad4:	24000264 	.word	0x24000264
 8000ad8:	24000300 	.word	0x24000300
 8000adc:	240002b0 	.word	0x240002b0
 8000ae0:	24000260 	.word	0x24000260
 8000ae4:	240002fc 	.word	0x240002fc
 8000ae8:	58021000 	.word	0x58021000

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b09c      	sub	sp, #112	; 0x70
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	224c      	movs	r2, #76	; 0x4c
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f00d fd8e 	bl	800e61c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2220      	movs	r2, #32
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00d fd88 	bl	800e61c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <SystemClock_Config+0xe8>)
 8000b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b16:	2004      	movs	r0, #4
 8000b18:	f002 ff3e 	bl	8003998 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <SystemClock_Config+0xec>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a2c      	ldr	r2, [pc, #176]	; (8000bd8 <SystemClock_Config+0xec>)
 8000b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <SystemClock_Config+0xec>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b38:	bf00      	nop
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <SystemClock_Config+0xec>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b46:	d1f8      	bne.n	8000b3a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000b48:	2322      	movs	r3, #34	; 0x22
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000b64:	2323      	movs	r3, #35	; 0x23
 8000b66:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b74:	230c      	movs	r3, #12
 8000b76:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 ff71 	bl	8003a6c <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000b90:	f000 f846 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b94:	233f      	movs	r3, #63	; 0x3f
 8000b96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ba4:	2340      	movs	r3, #64	; 0x40
 8000ba6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bb2:	2340      	movs	r3, #64	; 0x40
 8000bb4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2107      	movs	r1, #7
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fb88 	bl	80042d0 <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000bc6:	f000 f82b 	bl	8000c20 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3770      	adds	r7, #112	; 0x70
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	58024800 	.word	0x58024800

08000bdc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	uartTxBuffer[0]=uartRxBuffer[0];
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_UART_RxCpltCallback+0x34>)
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_UART_RxCpltCallback+0x38>)
 8000bea:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, uartTxBuffer, 1, 100);
 8000bec:	2364      	movs	r3, #100	; 0x64
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4908      	ldr	r1, [pc, #32]	; (8000c14 <HAL_UART_RxCpltCallback+0x38>)
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <HAL_UART_RxCpltCallback+0x3c>)
 8000bf4:	f006 ff92 	bl	8007b1c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4905      	ldr	r1, [pc, #20]	; (8000c10 <HAL_UART_RxCpltCallback+0x34>)
 8000bfc:	4806      	ldr	r0, [pc, #24]	; (8000c18 <HAL_UART_RxCpltCallback+0x3c>)
 8000bfe:	f007 f81b 	bl	8007c38 <HAL_UART_Receive_IT>
	uartFlag = 1;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_UART_RxCpltCallback+0x40>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]

}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000300 	.word	0x24000300
 8000c14:	24000310 	.word	0x24000310
 8000c18:	24000320 	.word	0x24000320
 8000c1c:	240002fc 	.word	0x240002fc

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_MspInit+0x30>)
 8000c34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c38:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x30>)
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x30>)
 8000c44:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	58024400 	.word	0x58024400

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 fb20 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <TIM1_UP_IRQHandler+0x10>)
 8000cba:	f005 feab 	bl	8006a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	24000264 	.word	0x24000264

08000cc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <USART3_IRQHandler+0x10>)
 8000cce:	f006 ffff 	bl	8007cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000320 	.word	0x24000320

08000cdc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <OTG_HS_IRQHandler+0x10>)
 8000ce2:	f001 fcf9 	bl	80026d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24001898 	.word	0x24001898

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <SystemInit+0xd0>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a31      	ldr	r2, [pc, #196]	; (8000dc0 <SystemInit+0xd0>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d04:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <SystemInit+0xd4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 030f 	and.w	r3, r3, #15
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d807      	bhi.n	8000d20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <SystemInit+0xd4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 030f 	bic.w	r3, r3, #15
 8000d18:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <SystemInit+0xd4>)
 8000d1a:	f043 0303 	orr.w	r3, r3, #3
 8000d1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <SystemInit+0xd8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <SystemInit+0xd8>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <SystemInit+0xd8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <SystemInit+0xd8>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4924      	ldr	r1, [pc, #144]	; (8000dc8 <SystemInit+0xd8>)
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <SystemInit+0xdc>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <SystemInit+0xd4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <SystemInit+0xd4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f023 030f 	bic.w	r3, r3, #15
 8000d52:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <SystemInit+0xd4>)
 8000d54:	f043 0303 	orr.w	r3, r3, #3
 8000d58:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <SystemInit+0xd8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <SystemInit+0xd8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <SystemInit+0xd8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <SystemInit+0xd8>)
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <SystemInit+0xe0>)
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <SystemInit+0xd8>)
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <SystemInit+0xe4>)
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <SystemInit+0xd8>)
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <SystemInit+0xe8>)
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <SystemInit+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <SystemInit+0xd8>)
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <SystemInit+0xe8>)
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <SystemInit+0xd8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <SystemInit+0xd8>)
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <SystemInit+0xe8>)
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <SystemInit+0xd8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <SystemInit+0xd8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <SystemInit+0xd8>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <SystemInit+0xd8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <SystemInit+0xec>)
 8000db0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000db4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	52002000 	.word	0x52002000
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dd0:	02020200 	.word	0x02020200
 8000dd4:	01ff0000 	.word	0x01ff0000
 8000dd8:	01010280 	.word	0x01010280
 8000ddc:	52004000 	.word	0x52004000

08000de0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e00:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <MX_TIM1_Init+0xa4>)
 8000e02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2800-1;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e12:	f640 22ef 	movw	r2, #2799	; 0xaef
 8000e16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e2c:	f005 fbbc 	bl	80065a8 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e36:	f7ff fef3 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4619      	mov	r1, r3
 8000e46:	480e      	ldr	r0, [pc, #56]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e48:	f006 f818 	bl	8006e7c <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e52:	f7ff fee5 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_TIM1_Init+0xa0>)
 8000e68:	f006 fd5c 	bl	8007924 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e72:	f7ff fed5 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24000264 	.word	0x24000264
 8000e84:	40010000 	.word	0x40010000

08000e88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	615a      	str	r2, [r3, #20]
 8000eaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000eb6:	f240 1217 	movw	r2, #279	; 0x117
 8000eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000ec4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ed6:	4818      	ldr	r0, [pc, #96]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000ed8:	f005 fc36 	bl	8006748 <HAL_TIM_PWM_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000ee2:	f7ff fe9d 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000ef6:	f006 fd15 	bl	8007924 <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f7ff fe8e 	bl	8000c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f04:	2360      	movs	r3, #96	; 0x60
 8000f06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000f1c:	f005 fe9a 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000f26:	f7ff fe7b 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <MX_TIM2_Init+0xb0>)
 8000f2c:	f000 f84e 	bl	8000fcc <HAL_TIM_MspPostInit>

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	240002b0 	.word	0x240002b0

08000f3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_TIM_Base_MspInit+0x48>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d116      	bne.n	8000f7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_TIM_Base_MspInit+0x4c>)
 8000f50:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_TIM_Base_MspInit+0x4c>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_TIM_Base_MspInit+0x4c>)
 8000f60:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2019      	movs	r0, #25
 8000f72:	f000 fadc 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f76:	2019      	movs	r0, #25
 8000f78:	f000 faf3 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010000 	.word	0x40010000
 8000f88:	58024400 	.word	0x58024400

08000f8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f9c:	d10e      	bne.n	8000fbc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fa0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fb0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58024400 	.word	0x58024400

08000fcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fec:	d11e      	bne.n	800102c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8000ff0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8001000:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800100c:	2320      	movs	r3, #32
 800100e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <HAL_TIM_MspPostInit+0x6c>)
 8001028:	f001 f81a 	bl	8002060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	58024400 	.word	0x58024400
 8001038:	58020000 	.word	0x58020000

0800103c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <MX_USART3_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_USART3_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_USART3_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART3_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001086:	f006 fcf9 	bl	8007a7c <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f7ff fdc6 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001098:	f009 f951 	bl	800a33e <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f7ff fdbd 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <MX_USART3_UART_Init+0x90>)
 80010aa:	f009 f986 	bl	800a3ba <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f7ff fdb4 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_USART3_UART_Init+0x90>)
 80010ba:	f009 f907 	bl	800a2cc <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f7ff fdac 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	24000320 	.word	0x24000320
 80010d0:	40004800 	.word	0x40004800

080010d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ba      	sub	sp, #232	; 0xe8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	22c0      	movs	r2, #192	; 0xc0
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00d fa91 	bl	800e61c <memset>
  if(uartHandle->Instance==USART3)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <HAL_UART_MspInit+0xd8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d14e      	bne.n	80011a2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001104:	f04f 0202 	mov.w	r2, #2
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fc64 	bl	80049e8 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001126:	f7ff fd7b 	bl	8000c20 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_UART_MspInit+0xdc>)
 800112c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001130:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <HAL_UART_MspInit+0xdc>)
 8001132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001136:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_UART_MspInit+0xdc>)
 800113c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_UART_MspInit+0xdc>)
 800114a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800114e:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <HAL_UART_MspInit+0xdc>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_UART_MspInit+0xdc>)
 800115a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001166:	f44f 7340 	mov.w	r3, #768	; 0x300
 800116a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001180:	2307      	movs	r3, #7
 8001182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800118a:	4619      	mov	r1, r3
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <HAL_UART_MspInit+0xe0>)
 800118e:	f000 ff67 	bl	8002060 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2027      	movs	r0, #39	; 0x27
 8001198:	f000 f9c9 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800119c:	2027      	movs	r0, #39	; 0x27
 800119e:	f000 f9e0 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	37e8      	adds	r7, #232	; 0xe8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40004800 	.word	0x40004800
 80011b0:	58024400 	.word	0x58024400
 80011b4:	58020c00 	.word	0x58020c00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011bc:	f7ff fd98 	bl	8000cf0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f00d f9f5 	bl	800e5d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff fb93 	bl	8000914 <main>
  bx  lr
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80011f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011f8:	24000240 	.word	0x24000240
  ldr r2, =_sidata
 80011fc:	0800e724 	.word	0x0800e724
  ldr r2, =_sbss
 8001200:	24000240 	.word	0x24000240
  ldr r4, =_ebss
 8001204:	24001fc4 	.word	0x24001fc4

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001212:	2003      	movs	r0, #3
 8001214:	f000 f980 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001218:	f003 fa10 	bl	800463c <HAL_RCC_GetSysClockFreq>
 800121c:	4602      	mov	r2, r0
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_Init+0x68>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	4913      	ldr	r1, [pc, #76]	; (8001278 <HAL_Init+0x6c>)
 800122a:	5ccb      	ldrb	r3, [r1, r3]
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_Init+0x68>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_Init+0x6c>)
 8001240:	5cd3      	ldrb	r3, [r2, r3]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_Init+0x70>)
 800124e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_Init+0x74>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f814 	bl	8001284 <HAL_InitTick>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e002      	b.n	800126c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001266:	f7ff fce1 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58024400 	.word	0x58024400
 8001278:	0800e6dc 	.word	0x0800e6dc
 800127c:	24000124 	.word	0x24000124
 8001280:	24000120 	.word	0x24000120

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_InitTick+0x60>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e021      	b.n	80012dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_InitTick+0x64>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_InitTick+0x60>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f965 	bl	800157e <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012cc:	f000 f92f 	bl	800152e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x68>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2400012c 	.word	0x2400012c
 80012e8:	24000120 	.word	0x24000120
 80012ec:	24000128 	.word	0x24000128

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	2400012c 	.word	0x2400012c
 8001314:	240003b4 	.word	0x240003b4

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	240003b4 	.word	0x240003b4

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2400012c 	.word	0x2400012c

08001378 <__NVIC_SetPriorityGrouping>:
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <__NVIC_SetPriorityGrouping+0x40>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x40>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	05fa0000 	.word	0x05fa0000

080013c0 <__NVIC_GetPriorityGrouping>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f8:	f7ff ff8e 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff29 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff40 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff33 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa4 	bl	80014d4 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff feba 	bl	8001318 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e2dc      	b.n	8001b6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d008      	beq.n	80015ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e2cd      	b.n	8001b6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a76      	ldr	r2, [pc, #472]	; (80017ac <HAL_DMA_Abort+0x214>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d04a      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a74      	ldr	r2, [pc, #464]	; (80017b0 <HAL_DMA_Abort+0x218>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d045      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a73      	ldr	r2, [pc, #460]	; (80017b4 <HAL_DMA_Abort+0x21c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d040      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a71      	ldr	r2, [pc, #452]	; (80017b8 <HAL_DMA_Abort+0x220>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d03b      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a70      	ldr	r2, [pc, #448]	; (80017bc <HAL_DMA_Abort+0x224>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d036      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a6e      	ldr	r2, [pc, #440]	; (80017c0 <HAL_DMA_Abort+0x228>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d031      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6d      	ldr	r2, [pc, #436]	; (80017c4 <HAL_DMA_Abort+0x22c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d02c      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a6b      	ldr	r2, [pc, #428]	; (80017c8 <HAL_DMA_Abort+0x230>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d027      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6a      	ldr	r2, [pc, #424]	; (80017cc <HAL_DMA_Abort+0x234>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d022      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a68      	ldr	r2, [pc, #416]	; (80017d0 <HAL_DMA_Abort+0x238>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d01d      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a67      	ldr	r2, [pc, #412]	; (80017d4 <HAL_DMA_Abort+0x23c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d018      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a65      	ldr	r2, [pc, #404]	; (80017d8 <HAL_DMA_Abort+0x240>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a64      	ldr	r2, [pc, #400]	; (80017dc <HAL_DMA_Abort+0x244>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00e      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a62      	ldr	r2, [pc, #392]	; (80017e0 <HAL_DMA_Abort+0x248>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d009      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a61      	ldr	r2, [pc, #388]	; (80017e4 <HAL_DMA_Abort+0x24c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d004      	beq.n	800166e <HAL_DMA_Abort+0xd6>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a5f      	ldr	r2, [pc, #380]	; (80017e8 <HAL_DMA_Abort+0x250>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d101      	bne.n	8001672 <HAL_DMA_Abort+0xda>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_DMA_Abort+0xdc>
 8001672:	2300      	movs	r3, #0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 021e 	bic.w	r2, r2, #30
 8001686:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001696:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e00a      	b.n	80016b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 020e 	bic.w	r2, r2, #14
 80016ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <HAL_DMA_Abort+0x214>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d072      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a3a      	ldr	r2, [pc, #232]	; (80017b0 <HAL_DMA_Abort+0x218>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d06d      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <HAL_DMA_Abort+0x21c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d068      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a37      	ldr	r2, [pc, #220]	; (80017b8 <HAL_DMA_Abort+0x220>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d063      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a36      	ldr	r2, [pc, #216]	; (80017bc <HAL_DMA_Abort+0x224>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d05e      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a34      	ldr	r2, [pc, #208]	; (80017c0 <HAL_DMA_Abort+0x228>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d059      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <HAL_DMA_Abort+0x22c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d054      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a31      	ldr	r2, [pc, #196]	; (80017c8 <HAL_DMA_Abort+0x230>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d04f      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a30      	ldr	r2, [pc, #192]	; (80017cc <HAL_DMA_Abort+0x234>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d04a      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a2e      	ldr	r2, [pc, #184]	; (80017d0 <HAL_DMA_Abort+0x238>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d045      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <HAL_DMA_Abort+0x23c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d040      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a2b      	ldr	r2, [pc, #172]	; (80017d8 <HAL_DMA_Abort+0x240>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d03b      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <HAL_DMA_Abort+0x244>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d036      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <HAL_DMA_Abort+0x248>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d031      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <HAL_DMA_Abort+0x24c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d02c      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <HAL_DMA_Abort+0x250>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d027      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_DMA_Abort+0x254>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d022      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_DMA_Abort+0x258>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01d      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <HAL_DMA_Abort+0x25c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d018      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <HAL_DMA_Abort+0x260>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <HAL_DMA_Abort+0x264>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00e      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <HAL_DMA_Abort+0x268>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d009      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <HAL_DMA_Abort+0x26c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d004      	beq.n	80017a6 <HAL_DMA_Abort+0x20e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <HAL_DMA_Abort+0x270>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d132      	bne.n	800180c <HAL_DMA_Abort+0x274>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e031      	b.n	800180e <HAL_DMA_Abort+0x276>
 80017aa:	bf00      	nop
 80017ac:	40020010 	.word	0x40020010
 80017b0:	40020028 	.word	0x40020028
 80017b4:	40020040 	.word	0x40020040
 80017b8:	40020058 	.word	0x40020058
 80017bc:	40020070 	.word	0x40020070
 80017c0:	40020088 	.word	0x40020088
 80017c4:	400200a0 	.word	0x400200a0
 80017c8:	400200b8 	.word	0x400200b8
 80017cc:	40020410 	.word	0x40020410
 80017d0:	40020428 	.word	0x40020428
 80017d4:	40020440 	.word	0x40020440
 80017d8:	40020458 	.word	0x40020458
 80017dc:	40020470 	.word	0x40020470
 80017e0:	40020488 	.word	0x40020488
 80017e4:	400204a0 	.word	0x400204a0
 80017e8:	400204b8 	.word	0x400204b8
 80017ec:	58025408 	.word	0x58025408
 80017f0:	5802541c 	.word	0x5802541c
 80017f4:	58025430 	.word	0x58025430
 80017f8:	58025444 	.word	0x58025444
 80017fc:	58025458 	.word	0x58025458
 8001800:	5802546c 	.word	0x5802546c
 8001804:	58025480 	.word	0x58025480
 8001808:	58025494 	.word	0x58025494
 800180c:	2300      	movs	r3, #0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001820:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6d      	ldr	r2, [pc, #436]	; (80019dc <HAL_DMA_Abort+0x444>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d04a      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a6b      	ldr	r2, [pc, #428]	; (80019e0 <HAL_DMA_Abort+0x448>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d045      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6a      	ldr	r2, [pc, #424]	; (80019e4 <HAL_DMA_Abort+0x44c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d040      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a68      	ldr	r2, [pc, #416]	; (80019e8 <HAL_DMA_Abort+0x450>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d03b      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a67      	ldr	r2, [pc, #412]	; (80019ec <HAL_DMA_Abort+0x454>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d036      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a65      	ldr	r2, [pc, #404]	; (80019f0 <HAL_DMA_Abort+0x458>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d031      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a64      	ldr	r2, [pc, #400]	; (80019f4 <HAL_DMA_Abort+0x45c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d02c      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a62      	ldr	r2, [pc, #392]	; (80019f8 <HAL_DMA_Abort+0x460>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d027      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a61      	ldr	r2, [pc, #388]	; (80019fc <HAL_DMA_Abort+0x464>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d022      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a5f      	ldr	r2, [pc, #380]	; (8001a00 <HAL_DMA_Abort+0x468>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01d      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <HAL_DMA_Abort+0x46c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d018      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a5c      	ldr	r2, [pc, #368]	; (8001a08 <HAL_DMA_Abort+0x470>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a5b      	ldr	r2, [pc, #364]	; (8001a0c <HAL_DMA_Abort+0x474>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d00e      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a59      	ldr	r2, [pc, #356]	; (8001a10 <HAL_DMA_Abort+0x478>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d009      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_DMA_Abort+0x47c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d004      	beq.n	80018c2 <HAL_DMA_Abort+0x32a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a56      	ldr	r2, [pc, #344]	; (8001a18 <HAL_DMA_Abort+0x480>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d108      	bne.n	80018d4 <HAL_DMA_Abort+0x33c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e007      	b.n	80018e4 <HAL_DMA_Abort+0x34c>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018e4:	e013      	b.n	800190e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018e6:	f7ff fd17 	bl	8001318 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d90c      	bls.n	800190e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2203      	movs	r2, #3
 80018fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e12d      	b.n	8001b6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1e5      	bne.n	80018e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <HAL_DMA_Abort+0x444>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d04a      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2d      	ldr	r2, [pc, #180]	; (80019e0 <HAL_DMA_Abort+0x448>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d045      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a2c      	ldr	r2, [pc, #176]	; (80019e4 <HAL_DMA_Abort+0x44c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d040      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a2a      	ldr	r2, [pc, #168]	; (80019e8 <HAL_DMA_Abort+0x450>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d03b      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a29      	ldr	r2, [pc, #164]	; (80019ec <HAL_DMA_Abort+0x454>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d036      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <HAL_DMA_Abort+0x458>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d031      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <HAL_DMA_Abort+0x45c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d02c      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a24      	ldr	r2, [pc, #144]	; (80019f8 <HAL_DMA_Abort+0x460>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d027      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a23      	ldr	r2, [pc, #140]	; (80019fc <HAL_DMA_Abort+0x464>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d022      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <HAL_DMA_Abort+0x468>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01d      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <HAL_DMA_Abort+0x46c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d018      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <HAL_DMA_Abort+0x470>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_DMA_Abort+0x474>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00e      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_DMA_Abort+0x478>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d009      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1a      	ldr	r2, [pc, #104]	; (8001a14 <HAL_DMA_Abort+0x47c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d004      	beq.n	80019ba <HAL_DMA_Abort+0x422>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a18      	ldr	r2, [pc, #96]	; (8001a18 <HAL_DMA_Abort+0x480>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_DMA_Abort+0x426>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_DMA_Abort+0x428>
 80019be:	2300      	movs	r3, #0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d02b      	beq.n	8001a1c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	223f      	movs	r2, #63	; 0x3f
 80019d4:	409a      	lsls	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	e02a      	b.n	8001a32 <HAL_DMA_Abort+0x49a>
 80019dc:	40020010 	.word	0x40020010
 80019e0:	40020028 	.word	0x40020028
 80019e4:	40020040 	.word	0x40020040
 80019e8:	40020058 	.word	0x40020058
 80019ec:	40020070 	.word	0x40020070
 80019f0:	40020088 	.word	0x40020088
 80019f4:	400200a0 	.word	0x400200a0
 80019f8:	400200b8 	.word	0x400200b8
 80019fc:	40020410 	.word	0x40020410
 8001a00:	40020428 	.word	0x40020428
 8001a04:	40020440 	.word	0x40020440
 8001a08:	40020458 	.word	0x40020458
 8001a0c:	40020470 	.word	0x40020470
 8001a10:	40020488 	.word	0x40020488
 8001a14:	400204a0 	.word	0x400204a0
 8001a18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a4f      	ldr	r2, [pc, #316]	; (8001b74 <HAL_DMA_Abort+0x5dc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d072      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a4d      	ldr	r2, [pc, #308]	; (8001b78 <HAL_DMA_Abort+0x5e0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d06d      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a4c      	ldr	r2, [pc, #304]	; (8001b7c <HAL_DMA_Abort+0x5e4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d068      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a4a      	ldr	r2, [pc, #296]	; (8001b80 <HAL_DMA_Abort+0x5e8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d063      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_DMA_Abort+0x5ec>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d05e      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_DMA_Abort+0x5f0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d059      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <HAL_DMA_Abort+0x5f4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d054      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a44      	ldr	r2, [pc, #272]	; (8001b90 <HAL_DMA_Abort+0x5f8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d04f      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a43      	ldr	r2, [pc, #268]	; (8001b94 <HAL_DMA_Abort+0x5fc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d04a      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a41      	ldr	r2, [pc, #260]	; (8001b98 <HAL_DMA_Abort+0x600>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d045      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a40      	ldr	r2, [pc, #256]	; (8001b9c <HAL_DMA_Abort+0x604>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d040      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a3e      	ldr	r2, [pc, #248]	; (8001ba0 <HAL_DMA_Abort+0x608>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d03b      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a3d      	ldr	r2, [pc, #244]	; (8001ba4 <HAL_DMA_Abort+0x60c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d036      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a3b      	ldr	r2, [pc, #236]	; (8001ba8 <HAL_DMA_Abort+0x610>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d031      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a3a      	ldr	r2, [pc, #232]	; (8001bac <HAL_DMA_Abort+0x614>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d02c      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a38      	ldr	r2, [pc, #224]	; (8001bb0 <HAL_DMA_Abort+0x618>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d027      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a37      	ldr	r2, [pc, #220]	; (8001bb4 <HAL_DMA_Abort+0x61c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d022      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a35      	ldr	r2, [pc, #212]	; (8001bb8 <HAL_DMA_Abort+0x620>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01d      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <HAL_DMA_Abort+0x624>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d018      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a32      	ldr	r2, [pc, #200]	; (8001bc0 <HAL_DMA_Abort+0x628>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <HAL_DMA_Abort+0x62c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00e      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2f      	ldr	r2, [pc, #188]	; (8001bc8 <HAL_DMA_Abort+0x630>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d009      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2e      	ldr	r2, [pc, #184]	; (8001bcc <HAL_DMA_Abort+0x634>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d004      	beq.n	8001b22 <HAL_DMA_Abort+0x58a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2c      	ldr	r2, [pc, #176]	; (8001bd0 <HAL_DMA_Abort+0x638>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_DMA_Abort+0x58e>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_DMA_Abort+0x590>
 8001b26:	2300      	movs	r3, #0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d015      	beq.n	8001b58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00c      	beq.n	8001b58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40020010 	.word	0x40020010
 8001b78:	40020028 	.word	0x40020028
 8001b7c:	40020040 	.word	0x40020040
 8001b80:	40020058 	.word	0x40020058
 8001b84:	40020070 	.word	0x40020070
 8001b88:	40020088 	.word	0x40020088
 8001b8c:	400200a0 	.word	0x400200a0
 8001b90:	400200b8 	.word	0x400200b8
 8001b94:	40020410 	.word	0x40020410
 8001b98:	40020428 	.word	0x40020428
 8001b9c:	40020440 	.word	0x40020440
 8001ba0:	40020458 	.word	0x40020458
 8001ba4:	40020470 	.word	0x40020470
 8001ba8:	40020488 	.word	0x40020488
 8001bac:	400204a0 	.word	0x400204a0
 8001bb0:	400204b8 	.word	0x400204b8
 8001bb4:	58025408 	.word	0x58025408
 8001bb8:	5802541c 	.word	0x5802541c
 8001bbc:	58025430 	.word	0x58025430
 8001bc0:	58025444 	.word	0x58025444
 8001bc4:	58025458 	.word	0x58025458
 8001bc8:	5802546c 	.word	0x5802546c
 8001bcc:	58025480 	.word	0x58025480
 8001bd0:	58025494 	.word	0x58025494

08001bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e237      	b.n	8002056 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d004      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e22c      	b.n	8002056 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5c      	ldr	r2, [pc, #368]	; (8001d74 <HAL_DMA_Abort_IT+0x1a0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d04a      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5b      	ldr	r2, [pc, #364]	; (8001d78 <HAL_DMA_Abort_IT+0x1a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d045      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a59      	ldr	r2, [pc, #356]	; (8001d7c <HAL_DMA_Abort_IT+0x1a8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d040      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <HAL_DMA_Abort_IT+0x1ac>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d03b      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a56      	ldr	r2, [pc, #344]	; (8001d84 <HAL_DMA_Abort_IT+0x1b0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d036      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a55      	ldr	r2, [pc, #340]	; (8001d88 <HAL_DMA_Abort_IT+0x1b4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d031      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a53      	ldr	r2, [pc, #332]	; (8001d8c <HAL_DMA_Abort_IT+0x1b8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02c      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_DMA_Abort_IT+0x1bc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d027      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a50      	ldr	r2, [pc, #320]	; (8001d94 <HAL_DMA_Abort_IT+0x1c0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d022      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <HAL_DMA_Abort_IT+0x1c4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d01d      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a4d      	ldr	r2, [pc, #308]	; (8001d9c <HAL_DMA_Abort_IT+0x1c8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d018      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_DMA_Abort_IT+0x1cc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a4a      	ldr	r2, [pc, #296]	; (8001da4 <HAL_DMA_Abort_IT+0x1d0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00e      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a49      	ldr	r2, [pc, #292]	; (8001da8 <HAL_DMA_Abort_IT+0x1d4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d009      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a47      	ldr	r2, [pc, #284]	; (8001dac <HAL_DMA_Abort_IT+0x1d8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xc8>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a46      	ldr	r2, [pc, #280]	; (8001db0 <HAL_DMA_Abort_IT+0x1dc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_DMA_Abort_IT+0xcc>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_DMA_Abort_IT+0xce>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8086 	beq.w	8001db4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2204      	movs	r2, #4
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2f      	ldr	r2, [pc, #188]	; (8001d74 <HAL_DMA_Abort_IT+0x1a0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d04a      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <HAL_DMA_Abort_IT+0x1a4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d045      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <HAL_DMA_Abort_IT+0x1a8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d040      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <HAL_DMA_Abort_IT+0x1ac>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d03b      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_DMA_Abort_IT+0x1b0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d036      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <HAL_DMA_Abort_IT+0x1b4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d031      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <HAL_DMA_Abort_IT+0x1b8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02c      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <HAL_DMA_Abort_IT+0x1bc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d027      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_DMA_Abort_IT+0x1c0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d022      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <HAL_DMA_Abort_IT+0x1c4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d01d      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_DMA_Abort_IT+0x1c8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d018      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_DMA_Abort_IT+0x1cc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_DMA_Abort_IT+0x1d0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_DMA_Abort_IT+0x1d4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d009      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_DMA_Abort_IT+0x1d8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x17c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_DMA_Abort_IT+0x1dc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d108      	bne.n	8001d62 <HAL_DMA_Abort_IT+0x18e>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e178      	b.n	8002054 <HAL_DMA_Abort_IT+0x480>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e16f      	b.n	8002054 <HAL_DMA_Abort_IT+0x480>
 8001d74:	40020010 	.word	0x40020010
 8001d78:	40020028 	.word	0x40020028
 8001d7c:	40020040 	.word	0x40020040
 8001d80:	40020058 	.word	0x40020058
 8001d84:	40020070 	.word	0x40020070
 8001d88:	40020088 	.word	0x40020088
 8001d8c:	400200a0 	.word	0x400200a0
 8001d90:	400200b8 	.word	0x400200b8
 8001d94:	40020410 	.word	0x40020410
 8001d98:	40020428 	.word	0x40020428
 8001d9c:	40020440 	.word	0x40020440
 8001da0:	40020458 	.word	0x40020458
 8001da4:	40020470 	.word	0x40020470
 8001da8:	40020488 	.word	0x40020488
 8001dac:	400204a0 	.word	0x400204a0
 8001db0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 020e 	bic.w	r2, r2, #14
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6c      	ldr	r2, [pc, #432]	; (8001f7c <HAL_DMA_Abort_IT+0x3a8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d04a      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6b      	ldr	r2, [pc, #428]	; (8001f80 <HAL_DMA_Abort_IT+0x3ac>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d045      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a69      	ldr	r2, [pc, #420]	; (8001f84 <HAL_DMA_Abort_IT+0x3b0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d040      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a68      	ldr	r2, [pc, #416]	; (8001f88 <HAL_DMA_Abort_IT+0x3b4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d03b      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a66      	ldr	r2, [pc, #408]	; (8001f8c <HAL_DMA_Abort_IT+0x3b8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d036      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a65      	ldr	r2, [pc, #404]	; (8001f90 <HAL_DMA_Abort_IT+0x3bc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d031      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a63      	ldr	r2, [pc, #396]	; (8001f94 <HAL_DMA_Abort_IT+0x3c0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d02c      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a62      	ldr	r2, [pc, #392]	; (8001f98 <HAL_DMA_Abort_IT+0x3c4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d027      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a60      	ldr	r2, [pc, #384]	; (8001f9c <HAL_DMA_Abort_IT+0x3c8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d022      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5f      	ldr	r2, [pc, #380]	; (8001fa0 <HAL_DMA_Abort_IT+0x3cc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d01d      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a5d      	ldr	r2, [pc, #372]	; (8001fa4 <HAL_DMA_Abort_IT+0x3d0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d018      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a5c      	ldr	r2, [pc, #368]	; (8001fa8 <HAL_DMA_Abort_IT+0x3d4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d013      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a5a      	ldr	r2, [pc, #360]	; (8001fac <HAL_DMA_Abort_IT+0x3d8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00e      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a59      	ldr	r2, [pc, #356]	; (8001fb0 <HAL_DMA_Abort_IT+0x3dc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_DMA_Abort_IT+0x3e0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d004      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x290>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a56      	ldr	r2, [pc, #344]	; (8001fb8 <HAL_DMA_Abort_IT+0x3e4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d108      	bne.n	8001e76 <HAL_DMA_Abort_IT+0x2a2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e007      	b.n	8001e86 <HAL_DMA_Abort_IT+0x2b2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0201 	bic.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a3c      	ldr	r2, [pc, #240]	; (8001f7c <HAL_DMA_Abort_IT+0x3a8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d072      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3a      	ldr	r2, [pc, #232]	; (8001f80 <HAL_DMA_Abort_IT+0x3ac>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d06d      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a39      	ldr	r2, [pc, #228]	; (8001f84 <HAL_DMA_Abort_IT+0x3b0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d068      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <HAL_DMA_Abort_IT+0x3b4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d063      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a36      	ldr	r2, [pc, #216]	; (8001f8c <HAL_DMA_Abort_IT+0x3b8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <HAL_DMA_Abort_IT+0x3bc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d059      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a33      	ldr	r2, [pc, #204]	; (8001f94 <HAL_DMA_Abort_IT+0x3c0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d054      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <HAL_DMA_Abort_IT+0x3c4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d04f      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a30      	ldr	r2, [pc, #192]	; (8001f9c <HAL_DMA_Abort_IT+0x3c8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d04a      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2e      	ldr	r2, [pc, #184]	; (8001fa0 <HAL_DMA_Abort_IT+0x3cc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d045      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <HAL_DMA_Abort_IT+0x3d0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d040      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <HAL_DMA_Abort_IT+0x3d4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d03b      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <HAL_DMA_Abort_IT+0x3d8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d036      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <HAL_DMA_Abort_IT+0x3dc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d031      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_DMA_Abort_IT+0x3e0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d02c      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <HAL_DMA_Abort_IT+0x3e4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d027      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <HAL_DMA_Abort_IT+0x3e8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_DMA_Abort_IT+0x3ec>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01d      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <HAL_DMA_Abort_IT+0x3f0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d018      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_DMA_Abort_IT+0x3f4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_DMA_Abort_IT+0x3f8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00e      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_DMA_Abort_IT+0x3fc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_DMA_Abort_IT+0x400>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x3a2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_DMA_Abort_IT+0x404>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d132      	bne.n	8001fdc <HAL_DMA_Abort_IT+0x408>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e031      	b.n	8001fde <HAL_DMA_Abort_IT+0x40a>
 8001f7a:	bf00      	nop
 8001f7c:	40020010 	.word	0x40020010
 8001f80:	40020028 	.word	0x40020028
 8001f84:	40020040 	.word	0x40020040
 8001f88:	40020058 	.word	0x40020058
 8001f8c:	40020070 	.word	0x40020070
 8001f90:	40020088 	.word	0x40020088
 8001f94:	400200a0 	.word	0x400200a0
 8001f98:	400200b8 	.word	0x400200b8
 8001f9c:	40020410 	.word	0x40020410
 8001fa0:	40020428 	.word	0x40020428
 8001fa4:	40020440 	.word	0x40020440
 8001fa8:	40020458 	.word	0x40020458
 8001fac:	40020470 	.word	0x40020470
 8001fb0:	40020488 	.word	0x40020488
 8001fb4:	400204a0 	.word	0x400204a0
 8001fb8:	400204b8 	.word	0x400204b8
 8001fbc:	58025408 	.word	0x58025408
 8001fc0:	5802541c 	.word	0x5802541c
 8001fc4:	58025430 	.word	0x58025430
 8001fc8:	58025444 	.word	0x58025444
 8001fcc:	58025458 	.word	0x58025458
 8001fd0:	5802546c 	.word	0x5802546c
 8001fd4:	58025480 	.word	0x58025480
 8001fd8:	58025494 	.word	0x58025494
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d028      	beq.n	8002034 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2201      	movs	r2, #1
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002010:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002028:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002032:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800206e:	4b89      	ldr	r3, [pc, #548]	; (8002294 <HAL_GPIO_Init+0x234>)
 8002070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002072:	e194      	b.n	800239e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2101      	movs	r1, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8186 	beq.w	8002398 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d005      	beq.n	80020a4 <HAL_GPIO_Init+0x44>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d130      	bne.n	8002106 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020da:	2201      	movs	r2, #1
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 0201 	and.w	r2, r3, #1
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b03      	cmp	r3, #3
 8002110:	d017      	beq.n	8002142 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d123      	bne.n	8002196 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	69b9      	ldr	r1, [r7, #24]
 8002192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0203 	and.w	r2, r3, #3
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80e0 	beq.w	8002398 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_GPIO_Init+0x238>)
 80021da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80021de:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <HAL_GPIO_Init+0x238>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_GPIO_Init+0x238>)
 80021ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f6:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_GPIO_Init+0x23c>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <HAL_GPIO_Init+0x240>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d052      	beq.n	80022c8 <HAL_GPIO_Init+0x268>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_GPIO_Init+0x244>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d031      	beq.n	800228e <HAL_GPIO_Init+0x22e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_GPIO_Init+0x248>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02b      	beq.n	800228a <HAL_GPIO_Init+0x22a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <HAL_GPIO_Init+0x24c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x226>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_GPIO_Init+0x250>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x222>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_GPIO_Init+0x254>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x21e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_GPIO_Init+0x258>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x21a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_GPIO_Init+0x25c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x216>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_GPIO_Init+0x260>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x212>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_GPIO_Init+0x264>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x20e>
 800226a:	2309      	movs	r3, #9
 800226c:	e02d      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800226e:	230a      	movs	r3, #10
 8002270:	e02b      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002272:	2308      	movs	r3, #8
 8002274:	e029      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002276:	2307      	movs	r3, #7
 8002278:	e027      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800227a:	2306      	movs	r3, #6
 800227c:	e025      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800227e:	2305      	movs	r3, #5
 8002280:	e023      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002282:	2304      	movs	r3, #4
 8002284:	e021      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002286:	2303      	movs	r3, #3
 8002288:	e01f      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800228a:	2302      	movs	r3, #2
 800228c:	e01d      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800228e:	2301      	movs	r3, #1
 8002290:	e01b      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002292:	bf00      	nop
 8002294:	58000080 	.word	0x58000080
 8002298:	58024400 	.word	0x58024400
 800229c:	58000400 	.word	0x58000400
 80022a0:	58020000 	.word	0x58020000
 80022a4:	58020400 	.word	0x58020400
 80022a8:	58020800 	.word	0x58020800
 80022ac:	58020c00 	.word	0x58020c00
 80022b0:	58021000 	.word	0x58021000
 80022b4:	58021400 	.word	0x58021400
 80022b8:	58021800 	.word	0x58021800
 80022bc:	58021c00 	.word	0x58021c00
 80022c0:	58022000 	.word	0x58022000
 80022c4:	58022400 	.word	0x58022400
 80022c8:	2300      	movs	r3, #0
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	f002 0203 	and.w	r2, r2, #3
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	4093      	lsls	r3, r2
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022da:	4938      	ldr	r1, [pc, #224]	; (80023bc <HAL_GPIO_Init+0x35c>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800230e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800233c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f47f ae63 	bne.w	8002074 <HAL_GPIO_Init+0x14>
  }
}
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	3724      	adds	r7, #36	; 0x24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	58000400 	.word	0x58000400

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002404:	887a      	ldrh	r2, [r7, #2]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	041a      	lsls	r2, r3, #16
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43d9      	mvns	r1, r3
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	400b      	ands	r3, r1
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002428:	b08f      	sub	sp, #60	; 0x3c
 800242a:	af0a      	add	r7, sp, #40	; 0x28
 800242c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e116      	b.n	8002666 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f00b fd60 	bl	800df18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f008 f94d 	bl	800a716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	687e      	ldr	r6, [r7, #4]
 8002484:	466d      	mov	r5, sp
 8002486:	f106 0410 	add.w	r4, r6, #16
 800248a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002496:	e885 0003 	stmia.w	r5, {r0, r1}
 800249a:	1d33      	adds	r3, r6, #4
 800249c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249e:	6838      	ldr	r0, [r7, #0]
 80024a0:	f008 f818 	bl	800a4d4 <USB_CoreInit>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0d7      	b.n	8002666 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f008 f93b 	bl	800a738 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e04a      	b.n	800255e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	333d      	adds	r3, #61	; 0x3d
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	333c      	adds	r3, #60	; 0x3c
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	b298      	uxth	r0, r3
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3356      	adds	r3, #86	; 0x56
 8002504:	4602      	mov	r2, r0
 8002506:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3340      	adds	r3, #64	; 0x40
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3344      	adds	r3, #68	; 0x44
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3348      	adds	r3, #72	; 0x48
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	334c      	adds	r3, #76	; 0x4c
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	3301      	adds	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	d3af      	bcc.n	80024c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e044      	b.n	80025f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	3301      	adds	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3b5      	bcc.n	800256e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	687e      	ldr	r6, [r7, #4]
 800260a:	466d      	mov	r5, sp
 800260c:	f106 0410 	add.w	r4, r6, #16
 8002610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002618:	e894 0003 	ldmia.w	r4, {r0, r1}
 800261c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002620:	1d33      	adds	r3, r6, #4
 8002622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002624:	6838      	ldr	r0, [r7, #0]
 8002626:	f008 f8d3 	bl	800a7d0 <USB_DevInit>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e014      	b.n	8002666 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2b01      	cmp	r3, #1
 8002652:	d102      	bne.n	800265a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f001 f96f 	bl	8003938 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f009 f915 	bl	800b88e <USB_DevDisconnect>

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800266e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_PCD_Start+0x1c>
 8002686:	2302      	movs	r3, #2
 8002688:	e022      	b.n	80026d0 <HAL_PCD_Start+0x62>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f008 f81c 	bl	800a6f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f009 f8c3 	bl	800b84c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b08d      	sub	sp, #52	; 0x34
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f009 f981 	bl	800b9f6 <USB_GetMode>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 84b7 	bne.w	800306a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f009 f8e5 	bl	800b8d0 <USB_ReadInterrupts>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 84ad 	beq.w	8003068 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f009 f8d2 	bl	800b8d0 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b02      	cmp	r3, #2
 8002734:	d107      	bne.n	8002746 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f002 0202 	and.w	r2, r2, #2
 8002744:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f009 f8c0 	bl	800b8d0 <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d161      	bne.n	800281e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0210 	bic.w	r2, r2, #16
 8002768:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	3304      	adds	r3, #4
 8002788:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	0c5b      	lsrs	r3, r3, #17
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	2b02      	cmp	r3, #2
 8002794:	d124      	bne.n	80027e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d035      	beq.n	800280e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	6a38      	ldr	r0, [r7, #32]
 80027b6:	f008 fef7 	bl	800b5a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027c6:	441a      	add	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d8:	441a      	add	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	e016      	b.n	800280e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	0c5b      	lsrs	r3, r3, #17
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	2b06      	cmp	r3, #6
 80027ea:	d110      	bne.n	800280e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027f2:	2208      	movs	r2, #8
 80027f4:	4619      	mov	r1, r3
 80027f6:	6a38      	ldr	r0, [r7, #32]
 80027f8:	f008 fed6 	bl	800b5a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002808:	441a      	add	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0210 	orr.w	r2, r2, #16
 800281c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f009 f854 	bl	800b8d0 <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002832:	f040 80a7 	bne.w	8002984 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f009 f859 	bl	800b8f6 <USB_ReadDevAllOutEpInterrupt>
 8002844:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002846:	e099      	b.n	800297c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 808e 	beq.w	8002970 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f009 f87d 	bl	800b95e <USB_ReadDevOutEPInterrupt>
 8002864:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00c      	beq.n	800288a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287c:	461a      	mov	r2, r3
 800287e:	2301      	movs	r3, #1
 8002880:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fed1 	bl	800362c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a0:	461a      	mov	r2, r3
 80028a2:	2308      	movs	r3, #8
 80028a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 ffa7 	bl	80037fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c4:	461a      	mov	r2, r3
 80028c6:	2310      	movs	r3, #16
 80028c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d030      	beq.n	8002936 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b80      	cmp	r3, #128	; 0x80
 80028de:	d109      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	3304      	adds	r3, #4
 8002908:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	78db      	ldrb	r3, [r3, #3]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d108      	bne.n	8002924 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	b2db      	uxtb	r3, r3
 800291c:	4619      	mov	r1, r3
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f00b fc44 	bl	800e1ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002930:	461a      	mov	r2, r3
 8002932:	2302      	movs	r3, #2
 8002934:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294c:	461a      	mov	r2, r3
 800294e:	2320      	movs	r3, #32
 8002950:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d009      	beq.n	8002970 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002968:	461a      	mov	r2, r3
 800296a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800296e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	3301      	adds	r3, #1
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	f47f af62 	bne.w	8002848 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f008 ffa1 	bl	800b8d0 <USB_ReadInterrupts>
 800298e:	4603      	mov	r3, r0
 8002990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002994:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002998:	f040 80db 	bne.w	8002b52 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f008 ffc2 	bl	800b92a <USB_ReadDevAllInEpInterrupt>
 80029a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029ac:	e0cd      	b.n	8002b4a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80c2 	beq.w	8002b3e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f008 ffe8 	bl	800b99a <USB_ReadDevInEPInterrupt>
 80029ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d057      	beq.n	8002a86 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	2201      	movs	r2, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69f9      	ldr	r1, [r7, #28]
 80029f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029f6:	4013      	ands	r3, r2
 80029f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a06:	461a      	mov	r2, r3
 8002a08:	2301      	movs	r3, #1
 8002a0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d132      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3348      	adds	r3, #72	; 0x48
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4403      	add	r3, r0
 8002a34:	3344      	adds	r3, #68	; 0x44
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4419      	add	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4403      	add	r3, r0
 8002a48:	3348      	adds	r3, #72	; 0x48
 8002a4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x3a2>
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	334c      	adds	r3, #76	; 0x4c
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d108      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a72:	461a      	mov	r2, r3
 8002a74:	2101      	movs	r1, #1
 8002a76:	f008 fff1 	bl	800ba5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f00b fb0e 	bl	800e0a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2310      	movs	r3, #16
 8002abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	2340      	movs	r3, #64	; 0x40
 8002ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d023      	beq.n	8002b2c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae6:	6a38      	ldr	r0, [r7, #32]
 8002ae8:	f007 ffd0 	bl	800aa8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	3338      	adds	r3, #56	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	3304      	adds	r3, #4
 8002afe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	78db      	ldrb	r3, [r3, #3]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d108      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f00b fb5b 	bl	800e1d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b26:	461a      	mov	r2, r3
 8002b28:	2302      	movs	r3, #2
 8002b2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fcea 	bl	8003512 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	3301      	adds	r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f47f af2e 	bne.w	80029ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f008 feba 	bl	800b8d0 <USB_ReadInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b66:	d122      	bne.n	8002bae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d108      	bne.n	8002b98 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b8e:	2100      	movs	r1, #0
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fef5 	bl	8003980 <HAL_PCDEx_LPM_Callback>
 8002b96:	e002      	b.n	8002b9e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f00b faf9 	bl	800e190 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f008 fe8c 	bl	800b8d0 <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc2:	d112      	bne.n	8002bea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f00b fab5 	bl	800e144 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f008 fe6e 	bl	800b8d0 <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bfe:	d121      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002c0e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d111      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	f003 020f 	and.w	r2, r3, #15
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c34:	2101      	movs	r1, #1
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fea2 	bl	8003980 <HAL_PCDEx_LPM_Callback>
 8002c3c:	e002      	b.n	8002c44 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f00b fa80 	bl	800e144 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f008 fe41 	bl	800b8d0 <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c58:	f040 80b7 	bne.w	8002dca <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2110      	movs	r1, #16
 8002c76:	4618      	mov	r0, r3
 8002c78:	f007 ff08 	bl	800aa8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c80:	e046      	b.n	8002d10 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca6:	0151      	lsls	r1, r2, #5
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	440a      	add	r2, r1
 8002cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cda:	0151      	lsls	r1, r2, #5
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	440a      	add	r2, r1
 8002ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ce4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ce8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfa:	0151      	lsls	r1, r2, #5
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	440a      	add	r2, r1
 8002d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3b3      	bcc.n	8002c82 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d46:	f043 030b 	orr.w	r3, r3, #11
 8002d4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d5c:	f043 030b 	orr.w	r3, r3, #11
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	e015      	b.n	8002d90 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	4619      	mov	r1, r3
 8002d74:	f242 032b 	movw	r3, #8235	; 0x202b
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d8a:	f043 030b 	orr.w	r3, r3, #11
 8002d8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002da2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002db4:	461a      	mov	r2, r3
 8002db6:	f008 fe51 	bl	800ba5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f008 fd7e 	bl	800b8d0 <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dde:	d124      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f008 fe15 	bl	800ba14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f007 fec9 	bl	800ab86 <USB_GetDevSpeed>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681c      	ldr	r4, [r3, #0]
 8002e00:	f001 fd96 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 8002e04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f007 fbce 	bl	800a5b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f00b f96c 	bl	800e0f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f008 fd4e 	bl	800b8d0 <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d10a      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f00b f949 	bl	800e0d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f002 0208 	and.w	r2, r2, #8
 8002e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f008 fd39 	bl	800b8d0 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d122      	bne.n	8002eae <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e74:	2301      	movs	r3, #1
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
 8002e78:	e014      	b.n	8002ea4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d105      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fb09 	bl	80034b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d3e5      	bcc.n	8002e7a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f008 fd0c 	bl	800b8d0 <USB_ReadInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec2:	d13b      	bne.n	8002f3c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec8:	e02b      	b.n	8002f22 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3340      	adds	r3, #64	; 0x40
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d115      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ef0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da12      	bge.n	8002f1c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	333f      	adds	r3, #63	; 0x3f
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 faca 	bl	80034b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	3301      	adds	r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3ce      	bcc.n	8002eca <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f008 fcc5 	bl	800b8d0 <USB_ReadInterrupts>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f50:	d155      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f52:	2301      	movs	r3, #1
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	e045      	b.n	8002fe4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d12e      	bne.n	8002fde <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da2b      	bge.n	8002fde <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d121      	bne.n	8002fde <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fda:	6053      	str	r3, [r2, #4]
            break;
 8002fdc:	e007      	b.n	8002fee <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d3b4      	bcc.n	8002f58 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f008 fc64 	bl	800b8d0 <USB_ReadInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d10a      	bne.n	800302a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f00b f8ed 	bl	800e1f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f008 fc4e 	bl	800b8d0 <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d115      	bne.n	800306a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f00b f8dd 	bl	800e210 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	e000      	b.n	800306a <HAL_PCD_IRQHandler+0x992>
      return;
 8003068:	bf00      	nop
    }
  }
}
 800306a:	3734      	adds	r7, #52	; 0x34
 800306c:	46bd      	mov	sp, r7
 800306e:	bd90      	pop	{r4, r7, pc}

08003070 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_PCD_SetAddress+0x1a>
 8003086:	2302      	movs	r3, #2
 8003088:	e013      	b.n	80030b2 <HAL_PCD_SetAddress+0x42>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f008 fbac 	bl	800b800 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	4608      	mov	r0, r1
 80030c4:	4611      	mov	r1, r2
 80030c6:	461a      	mov	r2, r3
 80030c8:	4603      	mov	r3, r0
 80030ca:	70fb      	strb	r3, [r7, #3]
 80030cc:	460b      	mov	r3, r1
 80030ce:	803b      	strh	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	da0f      	bge.n	8003100 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 020f 	and.w	r2, r3, #15
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	3338      	adds	r3, #56	; 0x38
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	705a      	strb	r2, [r3, #1]
 80030fe:	e00f      	b.n	8003120 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 020f 	and.w	r2, r3, #15
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	b2da      	uxtb	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800312c:	883a      	ldrh	r2, [r7, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	78ba      	ldrb	r2, [r7, #2]
 8003136:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800314a:	78bb      	ldrb	r3, [r7, #2]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d102      	bne.n	8003156 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_PCD_EP_Open+0xaa>
 8003160:	2302      	movs	r3, #2
 8003162:	e00e      	b.n	8003182 <HAL_PCD_EP_Open+0xc8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68f9      	ldr	r1, [r7, #12]
 8003172:	4618      	mov	r0, r3
 8003174:	f007 fd2c 	bl	800abd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003180:	7afb      	ldrb	r3, [r7, #11]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319a:	2b00      	cmp	r3, #0
 800319c:	da0f      	bge.n	80031be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	3338      	adds	r3, #56	; 0x38
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
 80031bc:	e00f      	b.n	80031de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_PCD_EP_Close+0x6e>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e00e      	b.n	8003216 <HAL_PCD_EP_Close+0x8c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68f9      	ldr	r1, [r7, #12]
 8003206:	4618      	mov	r0, r3
 8003208:	f007 fd6a 	bl	800ace0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	460b      	mov	r3, r1
 800322c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	f003 020f 	and.w	r2, r3, #15
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	3304      	adds	r3, #4
 8003246:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2200      	movs	r2, #0
 8003258:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	b2da      	uxtb	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d102      	bne.n	800327a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	f007 fe06 	bl	800ae98 <USB_EPStartXfer>

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80032b8:	681b      	ldr	r3, [r3, #0]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	460b      	mov	r3, r1
 80032d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d6:	7afb      	ldrb	r3, [r7, #11]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3338      	adds	r3, #56	; 0x38
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2201      	movs	r2, #1
 8003304:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003306:	7afb      	ldrb	r3, [r7, #11]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	b2da      	uxtb	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	6979      	ldr	r1, [r7, #20]
 800332e:	f007 fdb3 	bl	800ae98 <USB_EPStartXfer>

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 020f 	and.w	r2, r3, #15
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	429a      	cmp	r2, r3
 8003354:	d901      	bls.n	800335a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e050      	b.n	80033fc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800335a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800335e:	2b00      	cmp	r3, #0
 8003360:	da0f      	bge.n	8003382 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	3338      	adds	r3, #56	; 0x38
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	705a      	strb	r2, [r3, #1]
 8003380:	e00d      	b.n	800339e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	3304      	adds	r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_PCD_EP_SetStall+0x82>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e01e      	b.n	80033fc <HAL_PCD_EP_SetStall+0xc0>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68f9      	ldr	r1, [r7, #12]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f008 f943 	bl	800b658 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	b2d9      	uxtb	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033ec:	461a      	mov	r2, r3
 80033ee:	f008 fb35 	bl	800ba5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 020f 	and.w	r2, r3, #15
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	429a      	cmp	r2, r3
 800341c:	d901      	bls.n	8003422 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e042      	b.n	80034a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003426:	2b00      	cmp	r3, #0
 8003428:	da0f      	bge.n	800344a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 020f 	and.w	r2, r3, #15
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	3338      	adds	r3, #56	; 0x38
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	3304      	adds	r3, #4
 8003440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	705a      	strb	r2, [r3, #1]
 8003448:	e00f      	b.n	800346a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	f003 020f 	and.w	r2, r3, #15
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	b2da      	uxtb	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_PCD_EP_ClrStall+0x86>
 8003486:	2302      	movs	r3, #2
 8003488:	e00e      	b.n	80034a8 <HAL_PCD_EP_ClrStall+0xa4>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68f9      	ldr	r1, [r7, #12]
 8003498:	4618      	mov	r0, r3
 800349a:	f008 f94b 	bl	800b734 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	da0c      	bge.n	80034de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	3338      	adds	r3, #56	; 0x38
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e00c      	b.n	80034f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 020f 	and.w	r2, r3, #15
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4413      	add	r3, r2
 80034f4:	3304      	adds	r3, #4
 80034f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68f9      	ldr	r1, [r7, #12]
 80034fe:	4618      	mov	r0, r3
 8003500:	f007 ff6a 	bl	800b3d8 <USB_EPStopXfer>
 8003504:	4603      	mov	r3, r0
 8003506:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003508:	7afb      	ldrb	r3, [r7, #11]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b08a      	sub	sp, #40	; 0x28
 8003516:	af02      	add	r7, sp, #8
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	3338      	adds	r3, #56	; 0x38
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	3304      	adds	r3, #4
 8003538:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	429a      	cmp	r2, r3
 8003544:	d901      	bls.n	800354a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06c      	b.n	8003624 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	429a      	cmp	r2, r3
 800355e:	d902      	bls.n	8003566 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3303      	adds	r3, #3
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800356e:	e02b      	b.n	80035c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	429a      	cmp	r2, r3
 8003584:	d902      	bls.n	800358c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	3303      	adds	r3, #3
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68d9      	ldr	r1, [r3, #12]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	4603      	mov	r3, r0
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f007 ffbe 	bl	800b52c <USB_WritePacket>

    ep->xfer_buff  += len;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	441a      	add	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	441a      	add	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d809      	bhi.n	80035f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d203      	bcs.n	80035f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1be      	bne.n	8003570 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d811      	bhi.n	8003622 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	2201      	movs	r2, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	43db      	mvns	r3, r3
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800361e:	4013      	ands	r3, r2
 8003620:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	333c      	adds	r3, #60	; 0x3c
 8003644:	3304      	adds	r3, #4
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d17b      	bne.n	800375a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d015      	beq.n	8003698 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4a61      	ldr	r2, [pc, #388]	; (80037f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	f240 80b9 	bls.w	80037e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80b3 	beq.w	80037e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368e:	461a      	mov	r2, r3
 8003690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003694:	6093      	str	r3, [r2, #8]
 8003696:	e0a7      	b.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ae:	461a      	mov	r2, r3
 80036b0:	2320      	movs	r3, #32
 80036b2:	6093      	str	r3, [r2, #8]
 80036b4:	e098      	b.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f040 8093 	bne.w	80037e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	4a4b      	ldr	r2, [pc, #300]	; (80037f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d90f      	bls.n	80036ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e0:	461a      	mov	r2, r3
 80036e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e6:	6093      	str	r3, [r2, #8]
 80036e8:	e07e      	b.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	0159      	lsls	r1, r3, #5
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	440b      	add	r3, r1
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003716:	1ad2      	subs	r2, r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d114      	bne.n	800374c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003734:	461a      	mov	r2, r3
 8003736:	2101      	movs	r1, #1
 8003738:	f008 f990 	bl	800ba5c <USB_EP0_OutStart>
 800373c:	e006      	b.n	800374c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	441a      	add	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	4619      	mov	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f00a fc8a 	bl	800e06c <HAL_PCD_DataOutStageCallback>
 8003758:	e046      	b.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4a26      	ldr	r2, [pc, #152]	; (80037f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d124      	bne.n	80037ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003778:	461a      	mov	r2, r3
 800377a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377e:	6093      	str	r3, [r2, #8]
 8003780:	e032      	b.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003798:	461a      	mov	r2, r3
 800379a:	2320      	movs	r3, #32
 800379c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f00a fc61 	bl	800e06c <HAL_PCD_DataOutStageCallback>
 80037aa:	e01d      	b.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d114      	bne.n	80037dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d108      	bne.n	80037dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037d4:	461a      	mov	r2, r3
 80037d6:	2100      	movs	r1, #0
 80037d8:	f008 f940 	bl	800ba5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f00a fc42 	bl	800e06c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	4f54300a 	.word	0x4f54300a
 80037f8:	4f54310a 	.word	0x4f54310a

080037fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	333c      	adds	r3, #60	; 0x3c
 8003814:	3304      	adds	r3, #4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a15      	ldr	r2, [pc, #84]	; (8003884 <PCD_EP_OutSetupPacket_int+0x88>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d90e      	bls.n	8003850 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003848:	461a      	mov	r2, r3
 800384a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00a fbf9 	bl	800e048 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <PCD_EP_OutSetupPacket_int+0x88>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d90c      	bls.n	8003878 <PCD_EP_OutSetupPacket_int+0x7c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003870:	461a      	mov	r2, r3
 8003872:	2101      	movs	r1, #1
 8003874:	f008 f8f2 	bl	800ba5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	4f54300a 	.word	0x4f54300a

08003888 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
 8003894:	4613      	mov	r3, r2
 8003896:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038a6:	883b      	ldrh	r3, [r7, #0]
 80038a8:	0419      	lsls	r1, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
 80038b4:	e028      	b.n	8003908 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	e00d      	b.n	80038e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	3340      	adds	r3, #64	; 0x40
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	3301      	adds	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3ec      	bcc.n	80038ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038f0:	883b      	ldrh	r3, [r7, #0]
 80038f2:	0418      	lsls	r0, r3, #16
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	4302      	orrs	r2, r0
 8003900:	3340      	adds	r3, #64	; 0x40
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_PCDEx_ActivateLPM+0x44>)
 8003968:	4313      	orrs	r3, r2
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	10000003 	.word	0x10000003

08003980 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039a0:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d00a      	beq.n	80039c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039ac:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e040      	b.n	8003a40 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e03e      	b.n	8003a40 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039c2:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80039ca:	491f      	ldr	r1, [pc, #124]	; (8003a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039d2:	f7fd fca1 	bl	8001318 <HAL_GetTick>
 80039d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039d8:	e009      	b.n	80039ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039da:	f7fd fc9d 	bl	8001318 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e8:	d901      	bls.n	80039ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e028      	b.n	8003a40 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fa:	d1ee      	bne.n	80039da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b1e      	cmp	r3, #30
 8003a00:	d008      	beq.n	8003a14 <HAL_PWREx_ConfigSupply+0x7c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b2e      	cmp	r3, #46	; 0x2e
 8003a06:	d005      	beq.n	8003a14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b1d      	cmp	r3, #29
 8003a0c:	d002      	beq.n	8003a14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b2d      	cmp	r3, #45	; 0x2d
 8003a12:	d114      	bne.n	8003a3e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a14:	f7fd fc80 	bl	8001318 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a1a:	e009      	b.n	8003a30 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a1c:	f7fd fc7c 	bl	8001318 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2a:	d901      	bls.n	8003a30 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e007      	b.n	8003a40 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d1ee      	bne.n	8003a1c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	58024800 	.word	0x58024800

08003a4c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	60d3      	str	r3, [r2, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	58024800 	.word	0x58024800

08003a6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08c      	sub	sp, #48	; 0x30
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f000 bc1f 	b.w	80042be <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80b3 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8e:	4b95      	ldr	r3, [pc, #596]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a98:	4b92      	ldr	r3, [pc, #584]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d007      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x48>
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	2b18      	cmp	r3, #24
 8003aa8:	d112      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x64>
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	4b8b      	ldr	r3, [pc, #556]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8098 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x186>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 8093 	bne.w	8003bf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e3f6      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d106      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x7c>
 8003ada:	4b82      	ldr	r3, [pc, #520]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a81      	ldr	r2, [pc, #516]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e058      	b.n	8003b9a <HAL_RCC_OscConfig+0x12e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d112      	bne.n	8003b16 <HAL_RCC_OscConfig+0xaa>
 8003af0:	4b7c      	ldr	r3, [pc, #496]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a7b      	ldr	r2, [pc, #492]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b79      	ldr	r3, [pc, #484]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a78      	ldr	r2, [pc, #480]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a75      	ldr	r2, [pc, #468]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	e041      	b.n	8003b9a <HAL_RCC_OscConfig+0x12e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b1e:	d112      	bne.n	8003b46 <HAL_RCC_OscConfig+0xda>
 8003b20:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a6f      	ldr	r2, [pc, #444]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b6d      	ldr	r3, [pc, #436]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6c      	ldr	r2, [pc, #432]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a69      	ldr	r2, [pc, #420]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e029      	b.n	8003b9a <HAL_RCC_OscConfig+0x12e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003b4e:	d112      	bne.n	8003b76 <HAL_RCC_OscConfig+0x10a>
 8003b50:	4b64      	ldr	r3, [pc, #400]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a63      	ldr	r2, [pc, #396]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a60      	ldr	r2, [pc, #384]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5d      	ldr	r2, [pc, #372]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e011      	b.n	8003b9a <HAL_RCC_OscConfig+0x12e>
 8003b76:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a5a      	ldr	r2, [pc, #360]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b58      	ldr	r3, [pc, #352]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a57      	ldr	r2, [pc, #348]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b55      	ldr	r3, [pc, #340]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a54      	ldr	r2, [pc, #336]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003b94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d013      	beq.n	8003bca <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fd fbb9 	bl	8001318 <HAL_GetTick>
 8003ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003baa:	f7fd fbb5 	bl	8001318 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b64      	cmp	r3, #100	; 0x64
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e380      	b.n	80042be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bbc:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x13e>
 8003bc8:	e014      	b.n	8003bf4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fd fba5 	bl	8001318 <HAL_GetTick>
 8003bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd2:	f7fd fba1 	bl	8001318 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b64      	cmp	r3, #100	; 0x64
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e36c      	b.n	80042be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003be4:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x166>
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 808c 	beq.w	8003d1a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c02:	4b38      	ldr	r3, [pc, #224]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c0a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c0c:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <HAL_RCC_OscConfig+0x1bc>
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2b18      	cmp	r3, #24
 8003c1c:	d137      	bne.n	8003c8e <HAL_RCC_OscConfig+0x222>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d132      	bne.n	8003c8e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_OscConfig+0x1d4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e33e      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 0219 	bic.w	r2, r3, #25
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4925      	ldr	r1, [pc, #148]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fd fb61 	bl	8001318 <HAL_GetTick>
 8003c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5a:	f7fd fb5d 	bl	8001318 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e328      	b.n	80042be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	061b      	lsls	r3, r3, #24
 8003c86:	4917      	ldr	r1, [pc, #92]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c8c:	e045      	b.n	8003d1a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d028      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0219 	bic.w	r2, r3, #25
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4910      	ldr	r1, [pc, #64]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fb36 	bl	8001318 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb0:	f7fd fb32 	bl	8001318 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e2fd      	b.n	80042be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	061b      	lsls	r3, r3, #24
 8003cdc:	4901      	ldr	r1, [pc, #4]	; (8003ce4 <HAL_RCC_OscConfig+0x278>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
 8003ce2:	e01a      	b.n	8003d1a <HAL_RCC_OscConfig+0x2ae>
 8003ce4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce8:	4b97      	ldr	r3, [pc, #604]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a96      	ldr	r2, [pc, #600]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd fb10 	bl	8001318 <HAL_GetTick>
 8003cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7fd fb0c 	bl	8001318 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e2d7      	b.n	80042be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d0e:	4b8e      	ldr	r3, [pc, #568]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d06a      	beq.n	8003dfc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d26:	4b88      	ldr	r3, [pc, #544]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d30:	4b85      	ldr	r3, [pc, #532]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d007      	beq.n	8003d4c <HAL_RCC_OscConfig+0x2e0>
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b18      	cmp	r3, #24
 8003d40:	d11b      	bne.n	8003d7a <HAL_RCC_OscConfig+0x30e>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d116      	bne.n	8003d7a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d4c:	4b7e      	ldr	r3, [pc, #504]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_OscConfig+0x2f8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2b80      	cmp	r3, #128	; 0x80
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e2ac      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d64:	4b78      	ldr	r3, [pc, #480]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	4975      	ldr	r1, [pc, #468]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d78:	e040      	b.n	8003dfc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d023      	beq.n	8003dca <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d82:	4b71      	ldr	r3, [pc, #452]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a70      	ldr	r2, [pc, #448]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fd fac3 	bl	8001318 <HAL_GetTick>
 8003d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d96:	f7fd fabf 	bl	8001318 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e28a      	b.n	80042be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003da8:	4b67      	ldr	r3, [pc, #412]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003db4:	4b64      	ldr	r3, [pc, #400]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	4961      	ldr	r1, [pc, #388]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60cb      	str	r3, [r1, #12]
 8003dc8:	e018      	b.n	8003dfc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003dca:	4b5f      	ldr	r3, [pc, #380]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a5e      	ldr	r2, [pc, #376]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fa9f 	bl	8001318 <HAL_GetTick>
 8003dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dde:	f7fd fa9b 	bl	8001318 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e266      	b.n	80042be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003df0:	4b55      	ldr	r3, [pc, #340]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d036      	beq.n	8003e76 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d019      	beq.n	8003e44 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e10:	4b4d      	ldr	r3, [pc, #308]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e14:	4a4c      	ldr	r2, [pc, #304]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7fd fa7c 	bl	8001318 <HAL_GetTick>
 8003e20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e24:	f7fd fa78 	bl	8001318 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e243      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e36:	4b44      	ldr	r3, [pc, #272]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x3b8>
 8003e42:	e018      	b.n	8003e76 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e44:	4b40      	ldr	r3, [pc, #256]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e48:	4a3f      	ldr	r2, [pc, #252]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd fa62 	bl	8001318 <HAL_GetTick>
 8003e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fd fa5e 	bl	8001318 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e229      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e6a:	4b37      	ldr	r3, [pc, #220]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d036      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d019      	beq.n	8003ebe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2e      	ldr	r2, [pc, #184]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e96:	f7fd fa3f 	bl	8001318 <HAL_GetTick>
 8003e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e9e:	f7fd fa3b 	bl	8001318 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e206      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003eb0:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x432>
 8003ebc:	e018      	b.n	8003ef0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ebe:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003eca:	f7fd fa25 	bl	8001318 <HAL_GetTick>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed2:	f7fd fa21 	bl	8001318 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1ec      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ee4:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80af 	beq.w	800405c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <HAL_RCC_OscConfig+0x4e0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <HAL_RCC_OscConfig+0x4e0>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f0a:	f7fd fa05 	bl	8001318 <HAL_GetTick>
 8003f0e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f12:	f7fd fa01 	bl	8001318 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e1cc      	b.n	80042be <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_RCC_OscConfig+0x4e0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4e4>
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a02      	ldr	r2, [pc, #8]	; (8003f48 <HAL_RCC_OscConfig+0x4dc>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	e05b      	b.n	8003ffe <HAL_RCC_OscConfig+0x592>
 8003f46:	bf00      	nop
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	58024800 	.word	0x58024800
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d112      	bne.n	8003f7e <HAL_RCC_OscConfig+0x512>
 8003f58:	4b9d      	ldr	r3, [pc, #628]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a9c      	ldr	r2, [pc, #624]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	4b9a      	ldr	r3, [pc, #616]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4a99      	ldr	r2, [pc, #612]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f70:	4b97      	ldr	r3, [pc, #604]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	4a96      	ldr	r2, [pc, #600]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f76:	f023 0304 	bic.w	r3, r3, #4
 8003f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7c:	e03f      	b.n	8003ffe <HAL_RCC_OscConfig+0x592>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b05      	cmp	r3, #5
 8003f84:	d112      	bne.n	8003fac <HAL_RCC_OscConfig+0x540>
 8003f86:	4b92      	ldr	r3, [pc, #584]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a91      	ldr	r2, [pc, #580]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	4b8f      	ldr	r3, [pc, #572]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a8e      	ldr	r2, [pc, #568]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9e:	4b8c      	ldr	r3, [pc, #560]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	4a8b      	ldr	r2, [pc, #556]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003faa:	e028      	b.n	8003ffe <HAL_RCC_OscConfig+0x592>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b85      	cmp	r3, #133	; 0x85
 8003fb2:	d112      	bne.n	8003fda <HAL_RCC_OscConfig+0x56e>
 8003fb4:	4b86      	ldr	r3, [pc, #536]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	4a85      	ldr	r2, [pc, #532]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fba:	f043 0304 	orr.w	r3, r3, #4
 8003fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc0:	4b83      	ldr	r3, [pc, #524]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4a82      	ldr	r2, [pc, #520]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
 8003fcc:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a7f      	ldr	r2, [pc, #508]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	e011      	b.n	8003ffe <HAL_RCC_OscConfig+0x592>
 8003fda:	4b7d      	ldr	r3, [pc, #500]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a7c      	ldr	r2, [pc, #496]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	4b7a      	ldr	r3, [pc, #488]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a79      	ldr	r2, [pc, #484]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff2:	4b77      	ldr	r3, [pc, #476]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	4a76      	ldr	r2, [pc, #472]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8003ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d015      	beq.n	8004032 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004006:	f7fd f987 	bl	8001318 <HAL_GetTick>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fd f983 	bl	8001318 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e14c      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004024:	4b6a      	ldr	r3, [pc, #424]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ee      	beq.n	800400e <HAL_RCC_OscConfig+0x5a2>
 8004030:	e014      	b.n	800405c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004032:	f7fd f971 	bl	8001318 <HAL_GetTick>
 8004036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004038:	e00a      	b.n	8004050 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fd f96d 	bl	8001318 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e136      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004050:	4b5f      	ldr	r3, [pc, #380]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ee      	bne.n	800403a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 812b 	beq.w	80042bc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004066:	4b5a      	ldr	r3, [pc, #360]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800406e:	2b18      	cmp	r3, #24
 8004070:	f000 80bb 	beq.w	80041ea <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	2b02      	cmp	r3, #2
 800407a:	f040 8095 	bne.w	80041a8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407e:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a53      	ldr	r2, [pc, #332]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd f945 	bl	8001318 <HAL_GetTick>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004092:	f7fd f941 	bl	8001318 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e10c      	b.n	80042be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040a4:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b0:	4b47      	ldr	r3, [pc, #284]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 80040b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b4:	4b47      	ldr	r3, [pc, #284]	; (80041d4 <HAL_RCC_OscConfig+0x768>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	430a      	orrs	r2, r1
 80040c4:	4942      	ldr	r1, [pc, #264]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	628b      	str	r3, [r1, #40]	; 0x28
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	3b01      	subs	r3, #1
 80040da:	025b      	lsls	r3, r3, #9
 80040dc:	b29b      	uxth	r3, r3
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	3b01      	subs	r3, #1
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	3b01      	subs	r3, #1
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040fa:	4935      	ldr	r1, [pc, #212]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004100:	4b33      	ldr	r3, [pc, #204]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a32      	ldr	r2, [pc, #200]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800410c:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 800410e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004110:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004112:	4013      	ands	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004118:	00d2      	lsls	r2, r2, #3
 800411a:	492d      	ldr	r1, [pc, #180]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 800411c:	4313      	orrs	r3, r2
 800411e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004120:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	f023 020c 	bic.w	r2, r3, #12
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	4928      	ldr	r1, [pc, #160]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 800412e:	4313      	orrs	r3, r2
 8004130:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004132:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	f023 0202 	bic.w	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	4924      	ldr	r1, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004140:	4313      	orrs	r3, r2
 8004142:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004144:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004150:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800415c:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd f8ca 	bl	8001318 <HAL_GetTick>
 8004184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd f8c6 	bl	8001318 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e091      	b.n	80042be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x71c>
 80041a6:	e089      	b.n	80042bc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a08      	ldr	r2, [pc, #32]	; (80041d0 <HAL_RCC_OscConfig+0x764>)
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd f8b0 	bl	8001318 <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ba:	e00f      	b.n	80041dc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd f8ac 	bl	8001318 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d908      	bls.n	80041dc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e077      	b.n	80042be <HAL_RCC_OscConfig+0x852>
 80041ce:	bf00      	nop
 80041d0:	58024400 	.word	0x58024400
 80041d4:	fffffc0c 	.word	0xfffffc0c
 80041d8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041dc:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e9      	bne.n	80041bc <HAL_RCC_OscConfig+0x750>
 80041e8:	e068      	b.n	80042bc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041f0:	4b35      	ldr	r3, [pc, #212]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d031      	beq.n	8004262 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f003 0203 	and.w	r2, r3, #3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d12a      	bne.n	8004262 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d122      	bne.n	8004262 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d11a      	bne.n	8004262 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	0a5b      	lsrs	r3, r3, #9
 8004230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004238:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d111      	bne.n	8004262 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d108      	bne.n	8004262 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	0e1b      	lsrs	r3, r3, #24
 8004254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e02b      	b.n	80042be <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004266:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	08db      	lsrs	r3, r3, #3
 800426c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004270:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	429a      	cmp	r2, r3
 800427a:	d01f      	beq.n	80042bc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004288:	f7fd f846 	bl	8001318 <HAL_GetTick>
 800428c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800428e:	bf00      	nop
 8004290:	f7fd f842 	bl	8001318 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	4293      	cmp	r3, r2
 800429a:	d0f9      	beq.n	8004290 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 800429e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_RCC_OscConfig+0x860>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042a8:	00d2      	lsls	r2, r2, #3
 80042aa:	4907      	ldr	r1, [pc, #28]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <HAL_RCC_OscConfig+0x85c>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3730      	adds	r7, #48	; 0x30
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	58024400 	.word	0x58024400
 80042cc:	ffff0007 	.word	0xffff0007

080042d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e19c      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4b8a      	ldr	r3, [pc, #552]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d910      	bls.n	8004314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b87      	ldr	r3, [pc, #540]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 020f 	bic.w	r2, r3, #15
 80042fa:	4985      	ldr	r1, [pc, #532]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b83      	ldr	r3, [pc, #524]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e184      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	4b7b      	ldr	r3, [pc, #492]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800432c:	429a      	cmp	r2, r3
 800432e:	d908      	bls.n	8004342 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004330:	4b78      	ldr	r3, [pc, #480]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	4975      	ldr	r1, [pc, #468]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800433e:	4313      	orrs	r3, r2
 8004340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d010      	beq.n	8004370 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	4b70      	ldr	r3, [pc, #448]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800435a:	429a      	cmp	r2, r3
 800435c:	d908      	bls.n	8004370 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800435e:	4b6d      	ldr	r3, [pc, #436]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	496a      	ldr	r1, [pc, #424]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800436c:	4313      	orrs	r3, r2
 800436e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	4b64      	ldr	r3, [pc, #400]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004388:	429a      	cmp	r2, r3
 800438a:	d908      	bls.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800438c:	4b61      	ldr	r3, [pc, #388]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	495e      	ldr	r1, [pc, #376]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800439a:	4313      	orrs	r3, r2
 800439c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d010      	beq.n	80043cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	4b59      	ldr	r3, [pc, #356]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d908      	bls.n	80043cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043ba:	4b56      	ldr	r3, [pc, #344]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	4953      	ldr	r1, [pc, #332]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d010      	beq.n	80043fa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	4b4d      	ldr	r3, [pc, #308]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d908      	bls.n	80043fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e8:	4b4a      	ldr	r3, [pc, #296]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f023 020f 	bic.w	r2, r3, #15
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4947      	ldr	r1, [pc, #284]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d055      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004406:	4b43      	ldr	r3, [pc, #268]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4940      	ldr	r1, [pc, #256]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004414:	4313      	orrs	r3, r2
 8004416:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d107      	bne.n	8004430 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004420:	4b3c      	ldr	r3, [pc, #240]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d121      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0f6      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d107      	bne.n	8004448 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004438:	4b36      	ldr	r3, [pc, #216]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d115      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0ea      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004450:	4b30      	ldr	r3, [pc, #192]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0de      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004460:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0d6      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004470:	4b28      	ldr	r3, [pc, #160]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f023 0207 	bic.w	r2, r3, #7
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4925      	ldr	r1, [pc, #148]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800447e:	4313      	orrs	r3, r2
 8004480:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004482:	f7fc ff49 	bl	8001318 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448a:	f7fc ff45 	bl	8001318 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0be      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a0:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d1eb      	bne.n	800448a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d010      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d208      	bcs.n	80044e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f023 020f 	bic.w	r2, r3, #15
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	490e      	ldr	r1, [pc, #56]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d214      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 020f 	bic.w	r2, r3, #15
 80044f6:	4906      	ldr	r1, [pc, #24]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e086      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
 8004510:	52002000 	.word	0x52002000
 8004514:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	4b3f      	ldr	r3, [pc, #252]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004530:	429a      	cmp	r2, r3
 8004532:	d208      	bcs.n	8004546 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004534:	4b3c      	ldr	r3, [pc, #240]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	4939      	ldr	r1, [pc, #228]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004542:	4313      	orrs	r3, r2
 8004544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d010      	beq.n	8004574 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800455e:	429a      	cmp	r2, r3
 8004560:	d208      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004562:	4b31      	ldr	r3, [pc, #196]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	492e      	ldr	r1, [pc, #184]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004570:	4313      	orrs	r3, r2
 8004572:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699a      	ldr	r2, [r3, #24]
 8004584:	4b28      	ldr	r3, [pc, #160]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800458c:	429a      	cmp	r2, r3
 800458e:	d208      	bcs.n	80045a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4922      	ldr	r1, [pc, #136]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d010      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d208      	bcs.n	80045d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045be:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	4917      	ldr	r1, [pc, #92]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80045d0:	f000 f834 	bl	800463c <HAL_RCC_GetSysClockFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	4912      	ldr	r1, [pc, #72]	; (800462c <HAL_RCC_ClockConfig+0x35c>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ec:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	4a0d      	ldr	r2, [pc, #52]	; (800462c <HAL_RCC_ClockConfig+0x35c>)
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <HAL_RCC_ClockConfig+0x360>)
 8004606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004608:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <HAL_RCC_ClockConfig+0x364>)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <HAL_RCC_ClockConfig+0x368>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc fe36 	bl	8001284 <HAL_InitTick>
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400
 800462c:	0800e6dc 	.word	0x0800e6dc
 8004630:	24000124 	.word	0x24000124
 8004634:	24000120 	.word	0x24000120
 8004638:	24000128 	.word	0x24000128

0800463c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004642:	4bb3      	ldr	r3, [pc, #716]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800464a:	2b18      	cmp	r3, #24
 800464c:	f200 8155 	bhi.w	80048fa <HAL_RCC_GetSysClockFreq+0x2be>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	080046bd 	.word	0x080046bd
 800465c:	080048fb 	.word	0x080048fb
 8004660:	080048fb 	.word	0x080048fb
 8004664:	080048fb 	.word	0x080048fb
 8004668:	080048fb 	.word	0x080048fb
 800466c:	080048fb 	.word	0x080048fb
 8004670:	080048fb 	.word	0x080048fb
 8004674:	080048fb 	.word	0x080048fb
 8004678:	080046e3 	.word	0x080046e3
 800467c:	080048fb 	.word	0x080048fb
 8004680:	080048fb 	.word	0x080048fb
 8004684:	080048fb 	.word	0x080048fb
 8004688:	080048fb 	.word	0x080048fb
 800468c:	080048fb 	.word	0x080048fb
 8004690:	080048fb 	.word	0x080048fb
 8004694:	080048fb 	.word	0x080048fb
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080048fb 	.word	0x080048fb
 80046a0:	080048fb 	.word	0x080048fb
 80046a4:	080048fb 	.word	0x080048fb
 80046a8:	080048fb 	.word	0x080048fb
 80046ac:	080048fb 	.word	0x080048fb
 80046b0:	080048fb 	.word	0x080048fb
 80046b4:	080048fb 	.word	0x080048fb
 80046b8:	080046ef 	.word	0x080046ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046bc:	4b94      	ldr	r3, [pc, #592]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046c8:	4b91      	ldr	r3, [pc, #580]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	08db      	lsrs	r3, r3, #3
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	4a90      	ldr	r2, [pc, #576]	; (8004914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
 80046d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80046da:	e111      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046dc:	4b8d      	ldr	r3, [pc, #564]	; (8004914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046de:	61bb      	str	r3, [r7, #24]
      break;
 80046e0:	e10e      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80046e2:	4b8d      	ldr	r3, [pc, #564]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046e4:	61bb      	str	r3, [r7, #24]
      break;
 80046e6:	e10b      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80046e8:	4b8c      	ldr	r3, [pc, #560]	; (800491c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046ea:	61bb      	str	r3, [r7, #24]
      break;
 80046ec:	e108      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046ee:	4b88      	ldr	r3, [pc, #544]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80046f8:	4b85      	ldr	r3, [pc, #532]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004702:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004704:	4b82      	ldr	r3, [pc, #520]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800470e:	4b80      	ldr	r3, [pc, #512]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004712:	08db      	lsrs	r3, r3, #3
 8004714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004726:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80e1 	beq.w	80048f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b02      	cmp	r3, #2
 8004736:	f000 8083 	beq.w	8004840 <HAL_RCC_GetSysClockFreq+0x204>
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b02      	cmp	r3, #2
 800473e:	f200 80a1 	bhi.w	8004884 <HAL_RCC_GetSysClockFreq+0x248>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0x114>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d056      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800474e:	e099      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004750:	4b6f      	ldr	r3, [pc, #444]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02d      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800475c:	4b6c      	ldr	r3, [pc, #432]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	08db      	lsrs	r3, r3, #3
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	4a6b      	ldr	r2, [pc, #428]	; (8004914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
 800476c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	ee07 3a90 	vmov	s15, r3
 8004774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004786:	4b62      	ldr	r3, [pc, #392]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004796:	ed97 6a02 	vldr	s12, [r7, #8]
 800479a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800479e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80047b6:	e087      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004924 <HAL_RCC_GetSysClockFreq+0x2e8>
 80047c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ca:	4b51      	ldr	r3, [pc, #324]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047da:	ed97 6a02 	vldr	s12, [r7, #8]
 80047de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047fa:	e065      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004928 <HAL_RCC_GetSysClockFreq+0x2ec>
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	4b40      	ldr	r3, [pc, #256]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004822:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004920 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800483e:	e043      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800492c <HAL_RCC_GetSysClockFreq+0x2f0>
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b2f      	ldr	r3, [pc, #188]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a02 	vldr	s12, [r7, #8]
 8004866:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004882:	e021      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004928 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	0a5b      	lsrs	r3, r3, #9
 80048ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d2:	3301      	adds	r3, #1
 80048d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80048e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ec:	ee17 3a90 	vmov	r3, s15
 80048f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80048f2:	e005      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
      break;
 80048f8:	e002      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048fc:	61bb      	str	r3, [r7, #24]
      break;
 80048fe:	bf00      	nop
  }

  return sysclockfreq;
 8004900:	69bb      	ldr	r3, [r7, #24]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3724      	adds	r7, #36	; 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	58024400 	.word	0x58024400
 8004914:	03d09000 	.word	0x03d09000
 8004918:	003d0900 	.word	0x003d0900
 800491c:	007a1200 	.word	0x007a1200
 8004920:	46000000 	.word	0x46000000
 8004924:	4c742400 	.word	0x4c742400
 8004928:	4a742400 	.word	0x4a742400
 800492c:	4af42400 	.word	0x4af42400

08004930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004936:	f7ff fe81 	bl	800463c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b10      	ldr	r3, [pc, #64]	; (8004980 <HAL_RCC_GetHCLKFreq+0x50>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490f      	ldr	r1, [pc, #60]	; (8004984 <HAL_RCC_GetHCLKFreq+0x54>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_RCC_GetHCLKFreq+0x50>)
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	4a09      	ldr	r2, [pc, #36]	; (8004984 <HAL_RCC_GetHCLKFreq+0x54>)
 800495e:	5cd3      	ldrb	r3, [r2, r3]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	fa22 f303 	lsr.w	r3, r2, r3
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <HAL_RCC_GetHCLKFreq+0x58>)
 800496c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800496e:	4a07      	ldr	r2, [pc, #28]	; (800498c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <HAL_RCC_GetHCLKFreq+0x58>)
 8004976:	681b      	ldr	r3, [r3, #0]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	58024400 	.word	0x58024400
 8004984:	0800e6dc 	.word	0x0800e6dc
 8004988:	24000124 	.word	0x24000124
 800498c:	24000120 	.word	0x24000120

08004990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004994:	f7ff ffcc 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 8004998:	4602      	mov	r2, r0
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	4904      	ldr	r1, [pc, #16]	; (80049b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	58024400 	.word	0x58024400
 80049b8:	0800e6dc 	.word	0x0800e6dc

080049bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80049c0:	f7ff ffb6 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	4904      	ldr	r1, [pc, #16]	; (80049e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	58024400 	.word	0x58024400
 80049e4:	0800e6dc 	.word	0x0800e6dc

080049e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049ec:	b0c8      	sub	sp, #288	; 0x120
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004a0c:	2500      	movs	r5, #0
 8004a0e:	ea54 0305 	orrs.w	r3, r4, r5
 8004a12:	d049      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a1e:	d02f      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a24:	d828      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a2a:	d01a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a30:	d822      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3a:	d007      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a3c:	e01c      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a3e:	4ba7      	ldr	r3, [pc, #668]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	4aa6      	ldr	r2, [pc, #664]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a4a:	e01a      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a50:	3308      	adds	r3, #8
 8004a52:	2102      	movs	r1, #2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 fc43 	bl	80062e0 <RCCEx_PLL2_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a60:	e00f      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	3328      	adds	r3, #40	; 0x28
 8004a68:	2102      	movs	r1, #2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 fcea 	bl	8006444 <RCCEx_PLL3_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a76:	e004      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a7e:	e000      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a8a:	4b94      	ldr	r3, [pc, #592]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a98:	4a90      	ldr	r2, [pc, #576]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	6513      	str	r3, [r2, #80]	; 0x50
 8004a9e:	e003      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aa4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004ab4:	f04f 0900 	mov.w	r9, #0
 8004ab8:	ea58 0309 	orrs.w	r3, r8, r9
 8004abc:	d047      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d82a      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae5 	.word	0x08004ae5
 8004ad4:	08004af3 	.word	0x08004af3
 8004ad8:	08004b09 	.word	0x08004b09
 8004adc:	08004b27 	.word	0x08004b27
 8004ae0:	08004b27 	.word	0x08004b27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae4:	4b7d      	ldr	r3, [pc, #500]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a7c      	ldr	r2, [pc, #496]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004af0:	e01a      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af6:	3308      	adds	r3, #8
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 fbf0 	bl	80062e0 <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b06:	e00f      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0c:	3328      	adds	r3, #40	; 0x28
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 fc97 	bl	8006444 <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b1c:	e004      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b24:	e000      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b30:	4b6a      	ldr	r3, [pc, #424]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b34:	f023 0107 	bic.w	r1, r3, #7
 8004b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	4a67      	ldr	r2, [pc, #412]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6513      	str	r3, [r2, #80]	; 0x50
 8004b44:	e003      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004b5a:	f04f 0b00 	mov.w	fp, #0
 8004b5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b62:	d054      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b6e:	d036      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004b70:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b74:	d82f      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7a:	d032      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b80:	d829      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b82:	2bc0      	cmp	r3, #192	; 0xc0
 8004b84:	d02f      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004b86:	2bc0      	cmp	r3, #192	; 0xc0
 8004b88:	d825      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d018      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d821      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d007      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004b9a:	e01c      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9c:	4b4f      	ldr	r3, [pc, #316]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	4a4e      	ldr	r2, [pc, #312]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004ba8:	e01e      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bae:	3308      	adds	r3, #8
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 fb94 	bl	80062e0 <RCCEx_PLL2_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004bbe:	e013      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc4:	3328      	adds	r3, #40	; 0x28
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fc3b 	bl	8006444 <RCCEx_PLL3_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004bd4:	e008      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bdc:	e004      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004bde:	bf00      	nop
 8004be0:	e002      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004be2:	bf00      	nop
 8004be4:	e000      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004bf0:	4b3a      	ldr	r3, [pc, #232]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfe:	4a37      	ldr	r2, [pc, #220]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6513      	str	r3, [r2, #80]	; 0x50
 8004c04:	e003      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004c1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	d05c      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c38:	d03b      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c3a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c3e:	d834      	bhi.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c44:	d037      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4a:	d82e      	bhi.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c50:	d033      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c52:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c56:	d828      	bhi.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5c:	d01a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c62:	d822      	bhi.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6c:	d007      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004c6e:	e01c      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004c7c:	e01e      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c82:	3308      	adds	r3, #8
 8004c84:	2100      	movs	r1, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 fb2a 	bl	80062e0 <RCCEx_PLL2_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004c92:	e013      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c98:	3328      	adds	r3, #40	; 0x28
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 fbd1 	bl	8006444 <RCCEx_PLL3_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004ca8:	e008      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004cb0:	e004      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004cb2:	bf00      	nop
 8004cb4:	e002      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004cb6:	bf00      	nop
 8004cb8:	e000      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10d      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd2:	4a02      	ldr	r2, [pc, #8]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8004cd8:	e006      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ce4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004d02:	460b      	mov	r3, r1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	d03a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	2b30      	cmp	r3, #48	; 0x30
 8004d10:	d01f      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004d12:	2b30      	cmp	r3, #48	; 0x30
 8004d14:	d819      	bhi.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d00c      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d815      	bhi.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d019      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d111      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d26:	4bae      	ldr	r3, [pc, #696]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	4aad      	ldr	r2, [pc, #692]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d32:	e011      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d38:	3308      	adds	r3, #8
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 facf 	bl	80062e0 <RCCEx_PLL2_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d48:	e006      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d50:	e002      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d60:	4b9f      	ldr	r3, [pc, #636]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d64:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	4a9c      	ldr	r2, [pc, #624]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d70:	430b      	orrs	r3, r1
 8004d72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d74:	e003      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d051      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da8:	d035      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dae:	d82e      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004db0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004db4:	d031      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004db6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dba:	d828      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc0:	d01a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc6:	d822      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd0:	d007      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004dd2:	e01c      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd4:	4b82      	ldr	r3, [pc, #520]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	4a81      	ldr	r2, [pc, #516]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004de0:	e01c      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de6:	3308      	adds	r3, #8
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fa78 	bl	80062e0 <RCCEx_PLL2_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004df6:	e011      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfc:	3328      	adds	r3, #40	; 0x28
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fb1f 	bl	8006444 <RCCEx_PLL3_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e0c:	e006      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e24:	4b6e      	ldr	r3, [pc, #440]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e32:	4a6b      	ldr	r2, [pc, #428]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6513      	str	r3, [r2, #80]	; 0x50
 8004e38:	e003      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e52:	2300      	movs	r3, #0
 8004e54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004e58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	d053      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e6c:	d033      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e72:	d82c      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e78:	d02f      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004e7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e7e:	d826      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e84:	d02b      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004e86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e8a:	d820      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e90:	d012      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e96:	d81a      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d022      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea0:	d115      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 fa18 	bl	80062e0 <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e015      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ebc:	3328      	adds	r3, #40	; 0x28
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fabf 	bl	8006444 <RCCEx_PLL3_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ed4:	e006      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e004      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004eda:	bf00      	nop
 8004edc:	e002      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004eec:	4b3c      	ldr	r3, [pc, #240]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efa:	4a39      	ldr	r2, [pc, #228]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6513      	str	r3, [r2, #80]	; 0x50
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f20:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4313      	orrs	r3, r2
 8004f28:	d060      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f32:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004f36:	d039      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004f38:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004f3c:	d832      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f42:	d035      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f48:	d82c      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d031      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f54:	d826      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f5a:	d02d      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f60:	d820      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f66:	d012      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f6c:	d81a      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d024      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f76:	d115      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	2101      	movs	r1, #1
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 f9ad 	bl	80062e0 <RCCEx_PLL2_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f8c:	e017      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f92:	3328      	adds	r3, #40	; 0x28
 8004f94:	2101      	movs	r1, #1
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 fa54 	bl	8006444 <RCCEx_PLL3_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fa2:	e00c      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004faa:	e008      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fac:	bf00      	nop
 8004fae:	e006      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fb0:	bf00      	nop
 8004fb2:	e004      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fb4:	bf00      	nop
 8004fb6:	e002      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fb8:	bf00      	nop
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fc6:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fd6:	4a02      	ldr	r2, [pc, #8]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6593      	str	r3, [r2, #88]	; 0x58
 8004fdc:	e006      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004fde:	bf00      	nop
 8004fe0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fe8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005006:	460b      	mov	r3, r1
 8005008:	4313      	orrs	r3, r2
 800500a:	d037      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800500c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005016:	d00e      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800501c:	d816      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d018      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005026:	d111      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005028:	4bc4      	ldr	r3, [pc, #784]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	4ac3      	ldr	r2, [pc, #780]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800502e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005034:	e00f      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800503a:	3308      	adds	r3, #8
 800503c:	2101      	movs	r1, #1
 800503e:	4618      	mov	r0, r3
 8005040:	f001 f94e 	bl	80062e0 <RCCEx_PLL2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800504a:	e004      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005056:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800505e:	4bb7      	ldr	r3, [pc, #732]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800506a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800506c:	4ab3      	ldr	r2, [pc, #716]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800506e:	430b      	orrs	r3, r1
 8005070:	6513      	str	r3, [r2, #80]	; 0x50
 8005072:	e003      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005078:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800507c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800508c:	2300      	movs	r3, #0
 800508e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005092:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005096:	460b      	mov	r3, r1
 8005098:	4313      	orrs	r3, r2
 800509a:	d039      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800509c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d81c      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050e9 	.word	0x080050e9
 80050b0:	080050bd 	.word	0x080050bd
 80050b4:	080050cb 	.word	0x080050cb
 80050b8:	080050e9 	.word	0x080050e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050bc:	4b9f      	ldr	r3, [pc, #636]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	4a9e      	ldr	r2, [pc, #632]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050c8:	e00f      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ce:	3308      	adds	r3, #8
 80050d0:	2102      	movs	r1, #2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 f904 	bl	80062e0 <RCCEx_PLL2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050de:	e004      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80050e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050f2:	4b92      	ldr	r3, [pc, #584]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	f023 0103 	bic.w	r1, r3, #3
 80050fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005100:	4a8e      	ldr	r2, [pc, #568]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005102:	430b      	orrs	r3, r1
 8005104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800510c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800511c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005126:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	f000 8099 	beq.w	8005264 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005132:	4b83      	ldr	r3, [pc, #524]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a82      	ldr	r2, [pc, #520]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800513e:	f7fc f8eb 	bl	8001318 <HAL_GetTick>
 8005142:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005146:	e00b      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005148:	f7fc f8e6 	bl	8001318 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b64      	cmp	r3, #100	; 0x64
 8005156:	d903      	bls.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800515e:	e005      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005160:	4b77      	ldr	r3, [pc, #476]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ed      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800516c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005170:	2b00      	cmp	r3, #0
 8005172:	d173      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005174:	4b71      	ldr	r3, [pc, #452]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005180:	4053      	eors	r3, r2
 8005182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005186:	2b00      	cmp	r3, #0
 8005188:	d015      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800518a:	4b6c      	ldr	r3, [pc, #432]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005192:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005196:	4b69      	ldr	r3, [pc, #420]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4a68      	ldr	r2, [pc, #416]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800519c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051a2:	4b66      	ldr	r3, [pc, #408]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	4a65      	ldr	r2, [pc, #404]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051ae:	4a63      	ldr	r2, [pc, #396]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c2:	d118      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fc f8a8 	bl	8001318 <HAL_GetTick>
 80051c8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051cc:	e00d      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fc f8a3 	bl	8001318 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80051d8:	1ad2      	subs	r2, r2, r3
 80051da:	f241 3388 	movw	r3, #5000	; 0x1388
 80051de:	429a      	cmp	r2, r3
 80051e0:	d903      	bls.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80051e8:	e005      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ea:	4b54      	ldr	r3, [pc, #336]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0eb      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80051f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d129      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800520e:	d10e      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005210:	4b4a      	ldr	r3, [pc, #296]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800521c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005220:	091a      	lsrs	r2, r3, #4
 8005222:	4b48      	ldr	r3, [pc, #288]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005224:	4013      	ands	r3, r2
 8005226:	4a45      	ldr	r2, [pc, #276]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005228:	430b      	orrs	r3, r1
 800522a:	6113      	str	r3, [r2, #16]
 800522c:	e005      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800522e:	4b43      	ldr	r3, [pc, #268]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	4a42      	ldr	r2, [pc, #264]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005234:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005238:	6113      	str	r3, [r2, #16]
 800523a:	4b40      	ldr	r3, [pc, #256]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800523c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800523e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524a:	4a3c      	ldr	r2, [pc, #240]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800524c:	430b      	orrs	r3, r1
 800524e:	6713      	str	r3, [r2, #112]	; 0x70
 8005250:	e008      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005256:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800525a:	e003      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005260:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f002 0301 	and.w	r3, r2, #1
 8005270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005274:	2300      	movs	r3, #0
 8005276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800527a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800527e:	460b      	mov	r3, r1
 8005280:	4313      	orrs	r3, r2
 8005282:	f000 8090 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528e:	2b28      	cmp	r3, #40	; 0x28
 8005290:	d870      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005292:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	0800537d 	.word	0x0800537d
 800529c:	08005375 	.word	0x08005375
 80052a0:	08005375 	.word	0x08005375
 80052a4:	08005375 	.word	0x08005375
 80052a8:	08005375 	.word	0x08005375
 80052ac:	08005375 	.word	0x08005375
 80052b0:	08005375 	.word	0x08005375
 80052b4:	08005375 	.word	0x08005375
 80052b8:	08005349 	.word	0x08005349
 80052bc:	08005375 	.word	0x08005375
 80052c0:	08005375 	.word	0x08005375
 80052c4:	08005375 	.word	0x08005375
 80052c8:	08005375 	.word	0x08005375
 80052cc:	08005375 	.word	0x08005375
 80052d0:	08005375 	.word	0x08005375
 80052d4:	08005375 	.word	0x08005375
 80052d8:	0800535f 	.word	0x0800535f
 80052dc:	08005375 	.word	0x08005375
 80052e0:	08005375 	.word	0x08005375
 80052e4:	08005375 	.word	0x08005375
 80052e8:	08005375 	.word	0x08005375
 80052ec:	08005375 	.word	0x08005375
 80052f0:	08005375 	.word	0x08005375
 80052f4:	08005375 	.word	0x08005375
 80052f8:	0800537d 	.word	0x0800537d
 80052fc:	08005375 	.word	0x08005375
 8005300:	08005375 	.word	0x08005375
 8005304:	08005375 	.word	0x08005375
 8005308:	08005375 	.word	0x08005375
 800530c:	08005375 	.word	0x08005375
 8005310:	08005375 	.word	0x08005375
 8005314:	08005375 	.word	0x08005375
 8005318:	0800537d 	.word	0x0800537d
 800531c:	08005375 	.word	0x08005375
 8005320:	08005375 	.word	0x08005375
 8005324:	08005375 	.word	0x08005375
 8005328:	08005375 	.word	0x08005375
 800532c:	08005375 	.word	0x08005375
 8005330:	08005375 	.word	0x08005375
 8005334:	08005375 	.word	0x08005375
 8005338:	0800537d 	.word	0x0800537d
 800533c:	58024400 	.word	0x58024400
 8005340:	58024800 	.word	0x58024800
 8005344:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534c:	3308      	adds	r3, #8
 800534e:	2101      	movs	r1, #1
 8005350:	4618      	mov	r0, r3
 8005352:	f000 ffc5 	bl	80062e0 <RCCEx_PLL2_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800535c:	e00f      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800535e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005362:	3328      	adds	r3, #40	; 0x28
 8005364:	2101      	movs	r1, #1
 8005366:	4618      	mov	r0, r3
 8005368:	f001 f86c 	bl	8006444 <RCCEx_PLL3_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005372:	e004      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800537a:	e000      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800537c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800537e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005386:	4bc0      	ldr	r3, [pc, #768]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800538e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005396:	4abc      	ldr	r2, [pc, #752]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005398:	430b      	orrs	r3, r1
 800539a:	6553      	str	r3, [r2, #84]	; 0x54
 800539c:	e003      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f002 0302 	and.w	r3, r2, #2
 80053b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053b6:	2300      	movs	r3, #0
 80053b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80053bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80053c0:	460b      	mov	r3, r1
 80053c2:	4313      	orrs	r3, r2
 80053c4:	d043      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80053c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d824      	bhi.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	08005425 	.word	0x08005425
 80053dc:	080053f1 	.word	0x080053f1
 80053e0:	08005407 	.word	0x08005407
 80053e4:	08005425 	.word	0x08005425
 80053e8:	08005425 	.word	0x08005425
 80053ec:	08005425 	.word	0x08005425
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f4:	3308      	adds	r3, #8
 80053f6:	2101      	movs	r1, #1
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 ff71 	bl	80062e0 <RCCEx_PLL2_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005404:	e00f      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540a:	3328      	adds	r3, #40	; 0x28
 800540c:	2101      	movs	r1, #1
 800540e:	4618      	mov	r0, r3
 8005410:	f001 f818 	bl	8006444 <RCCEx_PLL3_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800541a:	e004      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005422:	e000      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005426:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800542e:	4b96      	ldr	r3, [pc, #600]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	f023 0107 	bic.w	r1, r3, #7
 8005436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543e:	4a92      	ldr	r2, [pc, #584]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005440:	430b      	orrs	r3, r1
 8005442:	6553      	str	r3, [r2, #84]	; 0x54
 8005444:	e003      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800544a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800544e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f002 0304 	and.w	r3, r2, #4
 800545a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800545e:	2300      	movs	r3, #0
 8005460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005464:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005468:	460b      	mov	r3, r1
 800546a:	4313      	orrs	r3, r2
 800546c:	d043      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800546e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005476:	2b05      	cmp	r3, #5
 8005478:	d824      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800547a:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	080054cd 	.word	0x080054cd
 8005484:	08005499 	.word	0x08005499
 8005488:	080054af 	.word	0x080054af
 800548c:	080054cd 	.word	0x080054cd
 8005490:	080054cd 	.word	0x080054cd
 8005494:	080054cd 	.word	0x080054cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549c:	3308      	adds	r3, #8
 800549e:	2101      	movs	r1, #1
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 ff1d 	bl	80062e0 <RCCEx_PLL2_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054ac:	e00f      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b2:	3328      	adds	r3, #40	; 0x28
 80054b4:	2101      	movs	r1, #1
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 ffc4 	bl	8006444 <RCCEx_PLL3_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054c2:	e004      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80054ca:	e000      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80054cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10b      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054d6:	4b6c      	ldr	r3, [pc, #432]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054da:	f023 0107 	bic.w	r1, r3, #7
 80054de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e6:	4a68      	ldr	r2, [pc, #416]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054e8:	430b      	orrs	r3, r1
 80054ea:	6593      	str	r3, [r2, #88]	; 0x58
 80054ec:	e003      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f002 0320 	and.w	r3, r2, #32
 8005502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005506:	2300      	movs	r3, #0
 8005508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800550c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d055      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800551e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005522:	d033      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005528:	d82c      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d02f      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005534:	d826      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800553a:	d02b      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800553c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005540:	d820      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005546:	d012      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554c:	d81a      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d022      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005556:	d115      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800555c:	3308      	adds	r3, #8
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f000 febd 	bl	80062e0 <RCCEx_PLL2_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800556c:	e015      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800556e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005572:	3328      	adds	r3, #40	; 0x28
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f000 ff64 	bl	8006444 <RCCEx_PLL3_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005582:	e00a      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800558a:	e006      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800558c:	bf00      	nop
 800558e:	e004      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005590:	bf00      	nop
 8005592:	e002      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005594:	bf00      	nop
 8005596:	e000      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055a2:	4b39      	ldr	r3, [pc, #228]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80055aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055b2:	4a35      	ldr	r2, [pc, #212]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6553      	str	r3, [r2, #84]	; 0x54
 80055b8:	e003      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80055ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055d2:	2300      	movs	r3, #0
 80055d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80055d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d058      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055ee:	d033      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80055f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055f4:	d82c      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fa:	d02f      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80055fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005600:	d826      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005606:	d02b      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800560c:	d820      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800560e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005612:	d012      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005618:	d81a      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d022      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005622:	d115      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005628:	3308      	adds	r3, #8
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fe57 	bl	80062e0 <RCCEx_PLL2_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005638:	e015      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800563a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563e:	3328      	adds	r3, #40	; 0x28
 8005640:	2102      	movs	r1, #2
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fefe 	bl	8006444 <RCCEx_PLL3_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800564e:	e00a      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005656:	e006      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005658:	bf00      	nop
 800565a:	e004      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800565c:	bf00      	nop
 800565e:	e002      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005660:	bf00      	nop
 8005662:	e000      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005666:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10e      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005672:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800567e:	4a02      	ldr	r2, [pc, #8]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005680:	430b      	orrs	r3, r1
 8005682:	6593      	str	r3, [r2, #88]	; 0x58
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005686:	bf00      	nop
 8005688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005690:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80056a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056a4:	2300      	movs	r3, #0
 80056a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80056ae:	460b      	mov	r3, r1
 80056b0:	4313      	orrs	r3, r2
 80056b2:	d055      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80056b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056c0:	d033      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80056c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056c6:	d82c      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056cc:	d02f      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80056ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d2:	d826      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056d8:	d02b      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80056da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056de:	d820      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e4:	d012      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80056e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ea:	d81a      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d022      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80056f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f4:	d115      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056fa:	3308      	adds	r3, #8
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fdee 	bl	80062e0 <RCCEx_PLL2_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800570a:	e015      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800570c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005710:	3328      	adds	r3, #40	; 0x28
 8005712:	2102      	movs	r1, #2
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fe95 	bl	8006444 <RCCEx_PLL3_Config>
 800571a:	4603      	mov	r3, r0
 800571c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005720:	e00a      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005728:	e006      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800572a:	bf00      	nop
 800572c:	e004      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005740:	4ba1      	ldr	r3, [pc, #644]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005744:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005750:	4a9d      	ldr	r2, [pc, #628]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005752:	430b      	orrs	r3, r1
 8005754:	6593      	str	r3, [r2, #88]	; 0x58
 8005756:	e003      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800575c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f002 0308 	and.w	r3, r2, #8
 800576c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005776:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800577a:	460b      	mov	r3, r1
 800577c:	4313      	orrs	r3, r2
 800577e:	d01e      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578c:	d10c      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800578e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005792:	3328      	adds	r3, #40	; 0x28
 8005794:	2102      	movs	r1, #2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fe54 	bl	8006444 <RCCEx_PLL3_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057a8:	4b87      	ldr	r3, [pc, #540]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b8:	4a83      	ldr	r2, [pc, #524]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f002 0310 	and.w	r3, r2, #16
 80057ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057ce:	2300      	movs	r3, #0
 80057d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80057d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80057d8:	460b      	mov	r3, r1
 80057da:	4313      	orrs	r3, r2
 80057dc:	d01e      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ea:	d10c      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f0:	3328      	adds	r3, #40	; 0x28
 80057f2:	2102      	movs	r1, #2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fe25 	bl	8006444 <RCCEx_PLL3_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005806:	4b70      	ldr	r3, [pc, #448]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800580e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005812:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005816:	4a6c      	ldr	r2, [pc, #432]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005818:	430b      	orrs	r3, r1
 800581a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800581c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800582c:	2300      	movs	r3, #0
 800582e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005832:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005836:	460b      	mov	r3, r1
 8005838:	4313      	orrs	r3, r2
 800583a:	d03e      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800583c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005840:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005848:	d022      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800584a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800584e:	d81b      	bhi.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005858:	d00b      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800585a:	e015      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800585c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005860:	3308      	adds	r3, #8
 8005862:	2100      	movs	r1, #0
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fd3b 	bl	80062e0 <RCCEx_PLL2_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005870:	e00f      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005876:	3328      	adds	r3, #40	; 0x28
 8005878:	2102      	movs	r1, #2
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fde2 	bl	8006444 <RCCEx_PLL3_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005886:	e004      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800588e:	e000      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005892:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10b      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800589a:	4b4b      	ldr	r3, [pc, #300]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800589c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80058a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058aa:	4a47      	ldr	r2, [pc, #284]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058ac:	430b      	orrs	r3, r1
 80058ae:	6593      	str	r3, [r2, #88]	; 0x58
 80058b0:	e003      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80058c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80058c8:	2300      	movs	r3, #0
 80058ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80058d0:	460b      	mov	r3, r1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	d03b      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80058d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058e2:	d01f      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80058e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058e8:	d818      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80058ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ee:	d003      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80058f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f4:	d007      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80058f6:	e011      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f8:	4b33      	ldr	r3, [pc, #204]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	4a32      	ldr	r2, [pc, #200]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005904:	e00f      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590a:	3328      	adds	r3, #40	; 0x28
 800590c:	2101      	movs	r1, #1
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fd98 	bl	8006444 <RCCEx_PLL3_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800591a:	e004      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005922:	e000      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005926:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800592e:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	4a22      	ldr	r2, [pc, #136]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005940:	430b      	orrs	r3, r1
 8005942:	6553      	str	r3, [r2, #84]	; 0x54
 8005944:	e003      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005946:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800594a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800594e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800595a:	673b      	str	r3, [r7, #112]	; 0x70
 800595c:	2300      	movs	r3, #0
 800595e:	677b      	str	r3, [r7, #116]	; 0x74
 8005960:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005964:	460b      	mov	r3, r1
 8005966:	4313      	orrs	r3, r2
 8005968:	d034      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800596a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800596e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d007      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800597a:	e011      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a11      	ldr	r2, [pc, #68]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005988:	e00e      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800598a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800598e:	3308      	adds	r3, #8
 8005990:	2102      	movs	r1, #2
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fca4 	bl	80062e0 <RCCEx_PLL2_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800599e:	e003      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80059a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10d      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059be:	4a02      	ldr	r2, [pc, #8]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059c0:	430b      	orrs	r3, r1
 80059c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059c4:	e006      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80059c6:	bf00      	nop
 80059c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80059e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80059e2:	2300      	movs	r3, #0
 80059e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80059ea:	460b      	mov	r3, r1
 80059ec:	4313      	orrs	r3, r2
 80059ee:	d00c      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f4:	3328      	adds	r3, #40	; 0x28
 80059f6:	2102      	movs	r1, #2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fd23 	bl	8006444 <RCCEx_PLL3_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005a16:	663b      	str	r3, [r7, #96]	; 0x60
 8005a18:	2300      	movs	r3, #0
 8005a1a:	667b      	str	r3, [r7, #100]	; 0x64
 8005a1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005a20:	460b      	mov	r3, r1
 8005a22:	4313      	orrs	r3, r2
 8005a24:	d038      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a32:	d018      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a38:	d811      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3e:	d014      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a44:	d80b      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d011      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4e:	d106      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a50:	4bc3      	ldr	r3, [pc, #780]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	4ac2      	ldr	r2, [pc, #776]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a5c:	e008      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a64:	e004      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a66:	bf00      	nop
 8005a68:	e002      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10b      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a78:	4bb9      	ldr	r3, [pc, #740]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a88:	4ab5      	ldr	r2, [pc, #724]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	6553      	str	r3, [r2, #84]	; 0x54
 8005a8e:	e003      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aaa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ab4:	4baa      	ldr	r3, [pc, #680]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac2:	4aa7      	ldr	r2, [pc, #668]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8005ada:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	d009      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ae4:	4b9e      	ldr	r3, [pc, #632]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	4a9b      	ldr	r2, [pc, #620]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b06:	2300      	movs	r3, #0
 8005b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b0a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4313      	orrs	r3, r2
 8005b12:	d009      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005b14:	4b92      	ldr	r3, [pc, #584]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b22:	4a8f      	ldr	r2, [pc, #572]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005b34:	643b      	str	r3, [r7, #64]	; 0x40
 8005b36:	2300      	movs	r3, #0
 8005b38:	647b      	str	r3, [r7, #68]	; 0x44
 8005b3a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4313      	orrs	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b44:	4b86      	ldr	r3, [pc, #536]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	4a85      	ldr	r2, [pc, #532]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b4e:	6113      	str	r3, [r2, #16]
 8005b50:	4b83      	ldr	r3, [pc, #524]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b52:	6919      	ldr	r1, [r3, #16]
 8005b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b5c:	4a80      	ldr	r2, [pc, #512]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b70:	2300      	movs	r3, #0
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b74:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	d009      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b7e:	4b78      	ldr	r3, [pc, #480]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8c:	4a74      	ldr	r2, [pc, #464]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4313      	orrs	r3, r2
 8005bac:	d00a      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bae:	4b6c      	ldr	r3, [pc, #432]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bbe:	4a68      	ldr	r2, [pc, #416]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	2100      	movs	r1, #0
 8005bce:	62b9      	str	r1, [r7, #40]	; 0x28
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	d011      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be4:	3308      	adds	r3, #8
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fb79 	bl	80062e0 <RCCEx_PLL2_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6239      	str	r1, [r7, #32]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
 8005c16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	d011      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c24:	3308      	adds	r3, #8
 8005c26:	2101      	movs	r1, #1
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fb59 	bl	80062e0 <RCCEx_PLL2_Config>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005c34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	61b9      	str	r1, [r7, #24]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	61fb      	str	r3, [r7, #28]
 8005c56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	d011      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c64:	3308      	adds	r3, #8
 8005c66:	2102      	movs	r1, #2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fb39 	bl	80062e0 <RCCEx_PLL2_Config>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005c74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6139      	str	r1, [r7, #16]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	d011      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca4:	3328      	adds	r3, #40	; 0x28
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fbcb 	bl	8006444 <RCCEx_PLL3_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	2100      	movs	r1, #0
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	d011      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce4:	3328      	adds	r3, #40	; 0x28
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fbab 	bl	8006444 <RCCEx_PLL3_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	6039      	str	r1, [r7, #0]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	607b      	str	r3, [r7, #4]
 8005d16:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	d011      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d24:	3328      	adds	r3, #40	; 0x28
 8005d26:	2102      	movs	r1, #2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fb8b 	bl	8006444 <RCCEx_PLL3_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005d34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005d44:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	e000      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d5e:	bf00      	nop
 8005d60:	58024400 	.word	0x58024400

08005d64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005d68:	f7fe fde2 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	091b      	lsrs	r3, r3, #4
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	4904      	ldr	r1, [pc, #16]	; (8005d8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d7a:	5ccb      	ldrb	r3, [r1, r3]
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	0800e6dc 	.word	0x0800e6dc

08005d90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b089      	sub	sp, #36	; 0x24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d98:	4ba1      	ldr	r3, [pc, #644]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005da2:	4b9f      	ldr	r3, [pc, #636]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	0b1b      	lsrs	r3, r3, #12
 8005da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dae:	4b9c      	ldr	r3, [pc, #624]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	091b      	lsrs	r3, r3, #4
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005dba:	4b99      	ldr	r3, [pc, #612]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	08db      	lsrs	r3, r3, #3
 8005dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	fb02 f303 	mul.w	r3, r2, r3
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8111 	beq.w	8006000 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	f000 8083 	beq.w	8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	f200 80a1 	bhi.w	8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d056      	beq.n	8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005dfa:	e099      	b.n	8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dfc:	4b88      	ldr	r3, [pc, #544]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d02d      	beq.n	8005e64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e08:	4b85      	ldr	r3, [pc, #532]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	08db      	lsrs	r3, r3, #3
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	4a84      	ldr	r2, [pc, #528]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e32:	4b7b      	ldr	r3, [pc, #492]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e62:	e087      	b.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800602c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e76:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea6:	e065      	b.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eba:	4b59      	ldr	r3, [pc, #356]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ece:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eea:	e043      	b.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efe:	4b48      	ldr	r3, [pc, #288]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2e:	e021      	b.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f42:	4b37      	ldr	r3, [pc, #220]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	0a5b      	lsrs	r3, r3, #9
 8005f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9a:	ee17 2a90 	vmov	r2, s15
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005fa2:	4b1f      	ldr	r3, [pc, #124]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	0c1b      	lsrs	r3, r3, #16
 8005fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fc8:	ee17 2a90 	vmov	r2, s15
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005fd0:	4b13      	ldr	r3, [pc, #76]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	0e1b      	lsrs	r3, r3, #24
 8005fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff6:	ee17 2a90 	vmov	r2, s15
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ffe:	e008      	b.n	8006012 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	609a      	str	r2, [r3, #8]
}
 8006012:	bf00      	nop
 8006014:	3724      	adds	r7, #36	; 0x24
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	58024400 	.word	0x58024400
 8006024:	03d09000 	.word	0x03d09000
 8006028:	46000000 	.word	0x46000000
 800602c:	4c742400 	.word	0x4c742400
 8006030:	4a742400 	.word	0x4a742400
 8006034:	4af42400 	.word	0x4af42400

08006038 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006038:	b480      	push	{r7}
 800603a:	b089      	sub	sp, #36	; 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006040:	4ba1      	ldr	r3, [pc, #644]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800604a:	4b9f      	ldr	r3, [pc, #636]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	0d1b      	lsrs	r3, r3, #20
 8006050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006054:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006056:	4b9c      	ldr	r3, [pc, #624]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006062:	4b99      	ldr	r3, [pc, #612]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006066:	08db      	lsrs	r3, r3, #3
 8006068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8111 	beq.w	80062a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b02      	cmp	r3, #2
 800608a:	f000 8083 	beq.w	8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b02      	cmp	r3, #2
 8006092:	f200 80a1 	bhi.w	80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d056      	beq.n	8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060a2:	e099      	b.n	80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060a4:	4b88      	ldr	r3, [pc, #544]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d02d      	beq.n	800610c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060b0:	4b85      	ldr	r3, [pc, #532]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	08db      	lsrs	r3, r3, #3
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	4a84      	ldr	r2, [pc, #528]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060bc:	fa22 f303 	lsr.w	r3, r2, r3
 80060c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060da:	4b7b      	ldr	r3, [pc, #492]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800610a:	e087      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006116:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800611a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611e:	4b6a      	ldr	r3, [pc, #424]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006132:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800614e:	e065      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800615e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006162:	4b59      	ldr	r3, [pc, #356]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006172:	ed97 6a03 	vldr	s12, [r7, #12]
 8006176:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800617a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006192:	e043      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a6:	4b48      	ldr	r3, [pc, #288]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061d6:	e021      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ea:	4b37      	ldr	r3, [pc, #220]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800620e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800621a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800621c:	4b2a      	ldr	r3, [pc, #168]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	0a5b      	lsrs	r3, r3, #9
 8006222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006236:	edd7 6a07 	vldr	s13, [r7, #28]
 800623a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006242:	ee17 2a90 	vmov	r2, s15
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800624a:	4b1f      	ldr	r3, [pc, #124]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	0c1b      	lsrs	r3, r3, #16
 8006250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006264:	edd7 6a07 	vldr	s13, [r7, #28]
 8006268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800626c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006270:	ee17 2a90 	vmov	r2, s15
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006278:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	0e1b      	lsrs	r3, r3, #24
 800627e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800628e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006292:	edd7 6a07 	vldr	s13, [r7, #28]
 8006296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629e:	ee17 2a90 	vmov	r2, s15
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062a6:	e008      	b.n	80062ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]
}
 80062ba:	bf00      	nop
 80062bc:	3724      	adds	r7, #36	; 0x24
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	58024400 	.word	0x58024400
 80062cc:	03d09000 	.word	0x03d09000
 80062d0:	46000000 	.word	0x46000000
 80062d4:	4c742400 	.word	0x4c742400
 80062d8:	4a742400 	.word	0x4a742400
 80062dc:	4af42400 	.word	0x4af42400

080062e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062ee:	4b53      	ldr	r3, [pc, #332]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d101      	bne.n	80062fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e099      	b.n	8006432 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80062fe:	4b4f      	ldr	r3, [pc, #316]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a4e      	ldr	r2, [pc, #312]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006304:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630a:	f7fb f805 	bl	8001318 <HAL_GetTick>
 800630e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006310:	e008      	b.n	8006324 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006312:	f7fb f801 	bl	8001318 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e086      	b.n	8006432 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006324:	4b45      	ldr	r3, [pc, #276]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1f0      	bne.n	8006312 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006330:	4b42      	ldr	r3, [pc, #264]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	031b      	lsls	r3, r3, #12
 800633e:	493f      	ldr	r1, [pc, #252]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006340:	4313      	orrs	r3, r2
 8006342:	628b      	str	r3, [r1, #40]	; 0x28
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	3b01      	subs	r3, #1
 800634a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	3b01      	subs	r3, #1
 8006354:	025b      	lsls	r3, r3, #9
 8006356:	b29b      	uxth	r3, r3
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	3b01      	subs	r3, #1
 8006360:	041b      	lsls	r3, r3, #16
 8006362:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	3b01      	subs	r3, #1
 800636e:	061b      	lsls	r3, r3, #24
 8006370:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006374:	4931      	ldr	r1, [pc, #196]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006376:	4313      	orrs	r3, r2
 8006378:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800637a:	4b30      	ldr	r3, [pc, #192]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	492d      	ldr	r1, [pc, #180]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006388:	4313      	orrs	r3, r2
 800638a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800638c:	4b2b      	ldr	r3, [pc, #172]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	f023 0220 	bic.w	r2, r3, #32
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	4928      	ldr	r1, [pc, #160]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 800639a:	4313      	orrs	r3, r2
 800639c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800639e:	4b27      	ldr	r3, [pc, #156]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	4a26      	ldr	r2, [pc, #152]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063a4:	f023 0310 	bic.w	r3, r3, #16
 80063a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063aa:	4b24      	ldr	r3, [pc, #144]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ae:	4b24      	ldr	r3, [pc, #144]	; (8006440 <RCCEx_PLL2_Config+0x160>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	69d2      	ldr	r2, [r2, #28]
 80063b6:	00d2      	lsls	r2, r2, #3
 80063b8:	4920      	ldr	r1, [pc, #128]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063be:	4b1f      	ldr	r3, [pc, #124]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	4a1e      	ldr	r2, [pc, #120]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063c4:	f043 0310 	orr.w	r3, r3, #16
 80063c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d106      	bne.n	80063de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063d0:	4b1a      	ldr	r3, [pc, #104]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4a19      	ldr	r2, [pc, #100]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063dc:	e00f      	b.n	80063fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d106      	bne.n	80063f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063e4:	4b15      	ldr	r3, [pc, #84]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	4a14      	ldr	r2, [pc, #80]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063f0:	e005      	b.n	80063fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	4a11      	ldr	r2, [pc, #68]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 80063f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80063fe:	4b0f      	ldr	r3, [pc, #60]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a0e      	ldr	r2, [pc, #56]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006404:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800640a:	f7fa ff85 	bl	8001318 <HAL_GetTick>
 800640e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006410:	e008      	b.n	8006424 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006412:	f7fa ff81 	bl	8001318 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e006      	b.n	8006432 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <RCCEx_PLL2_Config+0x15c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0f0      	beq.n	8006412 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	58024400 	.word	0x58024400
 8006440:	ffff0007 	.word	0xffff0007

08006444 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006452:	4b53      	ldr	r3, [pc, #332]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	2b03      	cmp	r3, #3
 800645c:	d101      	bne.n	8006462 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e099      	b.n	8006596 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006462:	4b4f      	ldr	r3, [pc, #316]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a4e      	ldr	r2, [pc, #312]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646e:	f7fa ff53 	bl	8001318 <HAL_GetTick>
 8006472:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006474:	e008      	b.n	8006488 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006476:	f7fa ff4f 	bl	8001318 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d901      	bls.n	8006488 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e086      	b.n	8006596 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006488:	4b45      	ldr	r3, [pc, #276]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1f0      	bne.n	8006476 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006494:	4b42      	ldr	r3, [pc, #264]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	051b      	lsls	r3, r3, #20
 80064a2:	493f      	ldr	r1, [pc, #252]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	628b      	str	r3, [r1, #40]	; 0x28
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	025b      	lsls	r3, r3, #9
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	041b      	lsls	r3, r3, #16
 80064c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	061b      	lsls	r3, r3, #24
 80064d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064d8:	4931      	ldr	r1, [pc, #196]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80064de:	4b30      	ldr	r3, [pc, #192]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	492d      	ldr	r1, [pc, #180]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80064f0:	4b2b      	ldr	r3, [pc, #172]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	4928      	ldr	r1, [pc, #160]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006502:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	4a26      	ldr	r2, [pc, #152]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800650c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800650e:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006512:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <RCCEx_PLL3_Config+0x160>)
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	69d2      	ldr	r2, [r2, #28]
 800651a:	00d2      	lsls	r2, r2, #3
 800651c:	4920      	ldr	r1, [pc, #128]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 800651e:	4313      	orrs	r3, r2
 8006520:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006522:	4b1f      	ldr	r3, [pc, #124]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006534:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4a19      	ldr	r2, [pc, #100]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 800653a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800653e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006540:	e00f      	b.n	8006562 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d106      	bne.n	8006556 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006548:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	4a14      	ldr	r2, [pc, #80]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 800654e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006552:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006554:	e005      	b.n	8006562 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 800655c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006560:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006562:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a0e      	ldr	r2, [pc, #56]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 8006568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656e:	f7fa fed3 	bl	8001318 <HAL_GetTick>
 8006572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006574:	e008      	b.n	8006588 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006576:	f7fa fecf 	bl	8001318 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e006      	b.n	8006596 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006588:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <RCCEx_PLL3_Config+0x15c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f0      	beq.n	8006576 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	58024400 	.word	0x58024400
 80065a4:	ffff0007 	.word	0xffff0007

080065a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e049      	b.n	800664e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fa fcb4 	bl	8000f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f000 fd68 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d001      	beq.n	8006670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e054      	b.n	800671a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a26      	ldr	r2, [pc, #152]	; (8006728 <HAL_TIM_Base_Start_IT+0xd0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d022      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x80>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669a:	d01d      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x80>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a22      	ldr	r2, [pc, #136]	; (800672c <HAL_TIM_Base_Start_IT+0xd4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d018      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x80>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a21      	ldr	r2, [pc, #132]	; (8006730 <HAL_TIM_Base_Start_IT+0xd8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d013      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x80>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1f      	ldr	r2, [pc, #124]	; (8006734 <HAL_TIM_Base_Start_IT+0xdc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00e      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x80>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <HAL_TIM_Base_Start_IT+0xe0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d009      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x80>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1c      	ldr	r2, [pc, #112]	; (800673c <HAL_TIM_Base_Start_IT+0xe4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d004      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x80>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <HAL_TIM_Base_Start_IT+0xe8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d115      	bne.n	8006704 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	4b19      	ldr	r3, [pc, #100]	; (8006744 <HAL_TIM_Base_Start_IT+0xec>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b06      	cmp	r3, #6
 80066e8:	d015      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0xbe>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f0:	d011      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0201 	orr.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006702:	e008      	b.n	8006716 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e000      	b.n	8006718 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006716:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40010000 	.word	0x40010000
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40000c00 	.word	0x40000c00
 8006738:	40010400 	.word	0x40010400
 800673c:	40001800 	.word	0x40001800
 8006740:	40014000 	.word	0x40014000
 8006744:	00010007 	.word	0x00010007

08006748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e049      	b.n	80067ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fa fc0c 	bl	8000f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f000 fc98 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <HAL_TIM_PWM_Start+0x24>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	e03c      	b.n	8006896 <HAL_TIM_PWM_Start+0x9e>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b04      	cmp	r3, #4
 8006820:	d109      	bne.n	8006836 <HAL_TIM_PWM_Start+0x3e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b01      	cmp	r3, #1
 800682c:	bf14      	ite	ne
 800682e:	2301      	movne	r3, #1
 8006830:	2300      	moveq	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	e02f      	b.n	8006896 <HAL_TIM_PWM_Start+0x9e>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b08      	cmp	r3, #8
 800683a:	d109      	bne.n	8006850 <HAL_TIM_PWM_Start+0x58>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	bf14      	ite	ne
 8006848:	2301      	movne	r3, #1
 800684a:	2300      	moveq	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	e022      	b.n	8006896 <HAL_TIM_PWM_Start+0x9e>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2b0c      	cmp	r3, #12
 8006854:	d109      	bne.n	800686a <HAL_TIM_PWM_Start+0x72>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b01      	cmp	r3, #1
 8006860:	bf14      	ite	ne
 8006862:	2301      	movne	r3, #1
 8006864:	2300      	moveq	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	e015      	b.n	8006896 <HAL_TIM_PWM_Start+0x9e>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b10      	cmp	r3, #16
 800686e:	d109      	bne.n	8006884 <HAL_TIM_PWM_Start+0x8c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b01      	cmp	r3, #1
 800687a:	bf14      	ite	ne
 800687c:	2301      	movne	r3, #1
 800687e:	2300      	moveq	r3, #0
 8006880:	b2db      	uxtb	r3, r3
 8006882:	e008      	b.n	8006896 <HAL_TIM_PWM_Start+0x9e>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e0a1      	b.n	80069e2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <HAL_TIM_PWM_Start+0xb6>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ac:	e023      	b.n	80068f6 <HAL_TIM_PWM_Start+0xfe>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d104      	bne.n	80068be <HAL_TIM_PWM_Start+0xc6>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068bc:	e01b      	b.n	80068f6 <HAL_TIM_PWM_Start+0xfe>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d104      	bne.n	80068ce <HAL_TIM_PWM_Start+0xd6>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068cc:	e013      	b.n	80068f6 <HAL_TIM_PWM_Start+0xfe>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b0c      	cmp	r3, #12
 80068d2:	d104      	bne.n	80068de <HAL_TIM_PWM_Start+0xe6>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068dc:	e00b      	b.n	80068f6 <HAL_TIM_PWM_Start+0xfe>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d104      	bne.n	80068ee <HAL_TIM_PWM_Start+0xf6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ec:	e003      	b.n	80068f6 <HAL_TIM_PWM_Start+0xfe>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2201      	movs	r2, #1
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 ffea 	bl	80078d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a38      	ldr	r2, [pc, #224]	; (80069ec <HAL_TIM_PWM_Start+0x1f4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <HAL_TIM_PWM_Start+0x13e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a37      	ldr	r2, [pc, #220]	; (80069f0 <HAL_TIM_PWM_Start+0x1f8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d00e      	beq.n	8006936 <HAL_TIM_PWM_Start+0x13e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a35      	ldr	r2, [pc, #212]	; (80069f4 <HAL_TIM_PWM_Start+0x1fc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d009      	beq.n	8006936 <HAL_TIM_PWM_Start+0x13e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a34      	ldr	r2, [pc, #208]	; (80069f8 <HAL_TIM_PWM_Start+0x200>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d004      	beq.n	8006936 <HAL_TIM_PWM_Start+0x13e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a32      	ldr	r2, [pc, #200]	; (80069fc <HAL_TIM_PWM_Start+0x204>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d101      	bne.n	800693a <HAL_TIM_PWM_Start+0x142>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <HAL_TIM_PWM_Start+0x144>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d007      	beq.n	8006950 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800694e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a25      	ldr	r2, [pc, #148]	; (80069ec <HAL_TIM_PWM_Start+0x1f4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d022      	beq.n	80069a0 <HAL_TIM_PWM_Start+0x1a8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d01d      	beq.n	80069a0 <HAL_TIM_PWM_Start+0x1a8>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <HAL_TIM_PWM_Start+0x208>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d018      	beq.n	80069a0 <HAL_TIM_PWM_Start+0x1a8>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <HAL_TIM_PWM_Start+0x20c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d013      	beq.n	80069a0 <HAL_TIM_PWM_Start+0x1a8>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <HAL_TIM_PWM_Start+0x210>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00e      	beq.n	80069a0 <HAL_TIM_PWM_Start+0x1a8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1a      	ldr	r2, [pc, #104]	; (80069f0 <HAL_TIM_PWM_Start+0x1f8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d009      	beq.n	80069a0 <HAL_TIM_PWM_Start+0x1a8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1e      	ldr	r2, [pc, #120]	; (8006a0c <HAL_TIM_PWM_Start+0x214>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d004      	beq.n	80069a0 <HAL_TIM_PWM_Start+0x1a8>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a16      	ldr	r2, [pc, #88]	; (80069f4 <HAL_TIM_PWM_Start+0x1fc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d115      	bne.n	80069cc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <HAL_TIM_PWM_Start+0x218>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b06      	cmp	r3, #6
 80069b0:	d015      	beq.n	80069de <HAL_TIM_PWM_Start+0x1e6>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b8:	d011      	beq.n	80069de <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ca:	e008      	b.n	80069de <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	e000      	b.n	80069e0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40001800 	.word	0x40001800
 8006a10:	00010007 	.word	0x00010007

08006a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d122      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d11b      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0202 	mvn.w	r2, #2
 8006a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fb12 	bl	8007080 <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fb04 	bl	800706c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fb15 	bl	8007094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d122      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d11b      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0204 	mvn.w	r2, #4
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fae8 	bl	8007080 <HAL_TIM_IC_CaptureCallback>
 8006ab0:	e005      	b.n	8006abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fada 	bl	800706c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 faeb 	bl	8007094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d122      	bne.n	8006b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d11b      	bne.n	8006b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0208 	mvn.w	r2, #8
 8006ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2204      	movs	r2, #4
 8006aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fabe 	bl	8007080 <HAL_TIM_IC_CaptureCallback>
 8006b04:	e005      	b.n	8006b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fab0 	bl	800706c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fac1 	bl	8007094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d122      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f003 0310 	and.w	r3, r3, #16
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d11b      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f06f 0210 	mvn.w	r2, #16
 8006b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2208      	movs	r2, #8
 8006b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa94 	bl	8007080 <HAL_TIM_IC_CaptureCallback>
 8006b58:	e005      	b.n	8006b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa86 	bl	800706c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fa97 	bl	8007094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d10e      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d107      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f06f 0201 	mvn.w	r2, #1
 8006b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7f9 fe6c 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d10e      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d107      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 ff48 	bl	8007a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd2:	d10e      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b80      	cmp	r3, #128	; 0x80
 8006be0:	d107      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 ff3b 	bl	8007a68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d10e      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d107      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa45 	bl	80070a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d10e      	bne.n	8006c4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	d107      	bne.n	8006c4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0220 	mvn.w	r2, #32
 8006c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fefb 	bl	8007a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e0ff      	b.n	8006e72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b14      	cmp	r3, #20
 8006c7e:	f200 80f0 	bhi.w	8006e62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006cdd 	.word	0x08006cdd
 8006c8c:	08006e63 	.word	0x08006e63
 8006c90:	08006e63 	.word	0x08006e63
 8006c94:	08006e63 	.word	0x08006e63
 8006c98:	08006d1d 	.word	0x08006d1d
 8006c9c:	08006e63 	.word	0x08006e63
 8006ca0:	08006e63 	.word	0x08006e63
 8006ca4:	08006e63 	.word	0x08006e63
 8006ca8:	08006d5f 	.word	0x08006d5f
 8006cac:	08006e63 	.word	0x08006e63
 8006cb0:	08006e63 	.word	0x08006e63
 8006cb4:	08006e63 	.word	0x08006e63
 8006cb8:	08006d9f 	.word	0x08006d9f
 8006cbc:	08006e63 	.word	0x08006e63
 8006cc0:	08006e63 	.word	0x08006e63
 8006cc4:	08006e63 	.word	0x08006e63
 8006cc8:	08006de1 	.word	0x08006de1
 8006ccc:	08006e63 	.word	0x08006e63
 8006cd0:	08006e63 	.word	0x08006e63
 8006cd4:	08006e63 	.word	0x08006e63
 8006cd8:	08006e21 	.word	0x08006e21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fa84 	bl	80071f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699a      	ldr	r2, [r3, #24]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0208 	orr.w	r2, r2, #8
 8006cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0204 	bic.w	r2, r2, #4
 8006d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6999      	ldr	r1, [r3, #24]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	619a      	str	r2, [r3, #24]
      break;
 8006d1a:	e0a5      	b.n	8006e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 faf4 	bl	8007310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6999      	ldr	r1, [r3, #24]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	021a      	lsls	r2, r3, #8
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	619a      	str	r2, [r3, #24]
      break;
 8006d5c:	e084      	b.n	8006e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fb5d 	bl	8007424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69da      	ldr	r2, [r3, #28]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0208 	orr.w	r2, r2, #8
 8006d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0204 	bic.w	r2, r2, #4
 8006d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69d9      	ldr	r1, [r3, #28]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	61da      	str	r2, [r3, #28]
      break;
 8006d9c:	e064      	b.n	8006e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fbc5 	bl	8007534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69da      	ldr	r2, [r3, #28]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69da      	ldr	r2, [r3, #28]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69d9      	ldr	r1, [r3, #28]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	021a      	lsls	r2, r3, #8
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	61da      	str	r2, [r3, #28]
      break;
 8006dde:	e043      	b.n	8006e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68b9      	ldr	r1, [r7, #8]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fc0e 	bl	8007608 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0208 	orr.w	r2, r2, #8
 8006dfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0204 	bic.w	r2, r2, #4
 8006e0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	691a      	ldr	r2, [r3, #16]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e1e:	e023      	b.n	8006e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fc52 	bl	80076d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	021a      	lsls	r2, r3, #8
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e60:	e002      	b.n	8006e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
      break;
 8006e66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop

08006e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_TIM_ConfigClockSource+0x1c>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e0dc      	b.n	8007052 <HAL_TIM_ConfigClockSource+0x1d6>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	4b6a      	ldr	r3, [pc, #424]	; (800705c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a64      	ldr	r2, [pc, #400]	; (8007060 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f000 80a9 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ed4:	4a62      	ldr	r2, [pc, #392]	; (8007060 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f200 80ae 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006edc:	4a61      	ldr	r2, [pc, #388]	; (8007064 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f000 80a1 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ee4:	4a5f      	ldr	r2, [pc, #380]	; (8007064 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	f200 80a6 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006eec:	4a5e      	ldr	r2, [pc, #376]	; (8007068 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	f000 8099 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ef4:	4a5c      	ldr	r2, [pc, #368]	; (8007068 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	f200 809e 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006efc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006f00:	f000 8091 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006f08:	f200 8096 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f10:	f000 8089 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f18:	f200 808e 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f20:	d03e      	beq.n	8006fa0 <HAL_TIM_ConfigClockSource+0x124>
 8006f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f26:	f200 8087 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	f000 8086 	beq.w	800703e <HAL_TIM_ConfigClockSource+0x1c2>
 8006f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f36:	d87f      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f38:	2b70      	cmp	r3, #112	; 0x70
 8006f3a:	d01a      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0xf6>
 8006f3c:	2b70      	cmp	r3, #112	; 0x70
 8006f3e:	d87b      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f40:	2b60      	cmp	r3, #96	; 0x60
 8006f42:	d050      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x16a>
 8006f44:	2b60      	cmp	r3, #96	; 0x60
 8006f46:	d877      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f48:	2b50      	cmp	r3, #80	; 0x50
 8006f4a:	d03c      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x14a>
 8006f4c:	2b50      	cmp	r3, #80	; 0x50
 8006f4e:	d873      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	d058      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x18a>
 8006f54:	2b40      	cmp	r3, #64	; 0x40
 8006f56:	d86f      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f58:	2b30      	cmp	r3, #48	; 0x30
 8006f5a:	d064      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f5c:	2b30      	cmp	r3, #48	; 0x30
 8006f5e:	d86b      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	d060      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d867      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d05c      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f6c:	2b10      	cmp	r3, #16
 8006f6e:	d05a      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f70:	e062      	b.n	8007038 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6899      	ldr	r1, [r3, #8]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f000 fc89 	bl	8007898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	609a      	str	r2, [r3, #8]
      break;
 8006f9e:	e04f      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6899      	ldr	r1, [r3, #8]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f000 fc72 	bl	8007898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fc2:	609a      	str	r2, [r3, #8]
      break;
 8006fc4:	e03c      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 fbe2 	bl	800779c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2150      	movs	r1, #80	; 0x50
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fc3c 	bl	800785c <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e02c      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6859      	ldr	r1, [r3, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f000 fc01 	bl	80077fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2160      	movs	r1, #96	; 0x60
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fc2c 	bl	800785c <TIM_ITRx_SetConfig>
      break;
 8007004:	e01c      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6859      	ldr	r1, [r3, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	461a      	mov	r2, r3
 8007014:	f000 fbc2 	bl	800779c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2140      	movs	r1, #64	; 0x40
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fc1c 	bl	800785c <TIM_ITRx_SetConfig>
      break;
 8007024:	e00c      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f000 fc13 	bl	800785c <TIM_ITRx_SetConfig>
      break;
 8007036:	e003      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	73fb      	strb	r3, [r7, #15]
      break;
 800703c:	e000      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800703e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	ffceff88 	.word	0xffceff88
 8007060:	00100040 	.word	0x00100040
 8007064:	00100030 	.word	0x00100030
 8007068:	00100020 	.word	0x00100020

0800706c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a40      	ldr	r2, [pc, #256]	; (80071d0 <TIM_Base_SetConfig+0x114>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070da:	d00f      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a3d      	ldr	r2, [pc, #244]	; (80071d4 <TIM_Base_SetConfig+0x118>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00b      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3c      	ldr	r2, [pc, #240]	; (80071d8 <TIM_Base_SetConfig+0x11c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d007      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a3b      	ldr	r2, [pc, #236]	; (80071dc <TIM_Base_SetConfig+0x120>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a3a      	ldr	r2, [pc, #232]	; (80071e0 <TIM_Base_SetConfig+0x124>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d108      	bne.n	800710e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a2f      	ldr	r2, [pc, #188]	; (80071d0 <TIM_Base_SetConfig+0x114>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01f      	beq.n	8007156 <TIM_Base_SetConfig+0x9a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711c:	d01b      	beq.n	8007156 <TIM_Base_SetConfig+0x9a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2c      	ldr	r2, [pc, #176]	; (80071d4 <TIM_Base_SetConfig+0x118>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d017      	beq.n	8007156 <TIM_Base_SetConfig+0x9a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2b      	ldr	r2, [pc, #172]	; (80071d8 <TIM_Base_SetConfig+0x11c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d013      	beq.n	8007156 <TIM_Base_SetConfig+0x9a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <TIM_Base_SetConfig+0x120>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00f      	beq.n	8007156 <TIM_Base_SetConfig+0x9a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a29      	ldr	r2, [pc, #164]	; (80071e0 <TIM_Base_SetConfig+0x124>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00b      	beq.n	8007156 <TIM_Base_SetConfig+0x9a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a28      	ldr	r2, [pc, #160]	; (80071e4 <TIM_Base_SetConfig+0x128>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <TIM_Base_SetConfig+0x9a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a27      	ldr	r2, [pc, #156]	; (80071e8 <TIM_Base_SetConfig+0x12c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_Base_SetConfig+0x9a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a26      	ldr	r2, [pc, #152]	; (80071ec <TIM_Base_SetConfig+0x130>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d108      	bne.n	8007168 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800715c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a10      	ldr	r2, [pc, #64]	; (80071d0 <TIM_Base_SetConfig+0x114>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00f      	beq.n	80071b4 <TIM_Base_SetConfig+0xf8>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <TIM_Base_SetConfig+0x124>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00b      	beq.n	80071b4 <TIM_Base_SetConfig+0xf8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a11      	ldr	r2, [pc, #68]	; (80071e4 <TIM_Base_SetConfig+0x128>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <TIM_Base_SetConfig+0xf8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a10      	ldr	r2, [pc, #64]	; (80071e8 <TIM_Base_SetConfig+0x12c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_Base_SetConfig+0xf8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a0f      	ldr	r2, [pc, #60]	; (80071ec <TIM_Base_SetConfig+0x130>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d103      	bne.n	80071bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	615a      	str	r2, [r3, #20]
}
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40000400 	.word	0x40000400
 80071d8:	40000800 	.word	0x40000800
 80071dc:	40000c00 	.word	0x40000c00
 80071e0:	40010400 	.word	0x40010400
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800

080071f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f023 0201 	bic.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4b37      	ldr	r3, [pc, #220]	; (80072f8 <TIM_OC1_SetConfig+0x108>)
 800721c:	4013      	ands	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 0302 	bic.w	r3, r3, #2
 8007238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a2d      	ldr	r2, [pc, #180]	; (80072fc <TIM_OC1_SetConfig+0x10c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00f      	beq.n	800726c <TIM_OC1_SetConfig+0x7c>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a2c      	ldr	r2, [pc, #176]	; (8007300 <TIM_OC1_SetConfig+0x110>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00b      	beq.n	800726c <TIM_OC1_SetConfig+0x7c>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a2b      	ldr	r2, [pc, #172]	; (8007304 <TIM_OC1_SetConfig+0x114>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d007      	beq.n	800726c <TIM_OC1_SetConfig+0x7c>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <TIM_OC1_SetConfig+0x118>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_OC1_SetConfig+0x7c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a29      	ldr	r2, [pc, #164]	; (800730c <TIM_OC1_SetConfig+0x11c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d10c      	bne.n	8007286 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f023 0308 	bic.w	r3, r3, #8
 8007272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 0304 	bic.w	r3, r3, #4
 8007284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a1c      	ldr	r2, [pc, #112]	; (80072fc <TIM_OC1_SetConfig+0x10c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00f      	beq.n	80072ae <TIM_OC1_SetConfig+0xbe>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <TIM_OC1_SetConfig+0x110>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00b      	beq.n	80072ae <TIM_OC1_SetConfig+0xbe>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a1a      	ldr	r2, [pc, #104]	; (8007304 <TIM_OC1_SetConfig+0x114>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d007      	beq.n	80072ae <TIM_OC1_SetConfig+0xbe>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a19      	ldr	r2, [pc, #100]	; (8007308 <TIM_OC1_SetConfig+0x118>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d003      	beq.n	80072ae <TIM_OC1_SetConfig+0xbe>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a18      	ldr	r2, [pc, #96]	; (800730c <TIM_OC1_SetConfig+0x11c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d111      	bne.n	80072d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	621a      	str	r2, [r3, #32]
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	fffeff8f 	.word	0xfffeff8f
 80072fc:	40010000 	.word	0x40010000
 8007300:	40010400 	.word	0x40010400
 8007304:	40014000 	.word	0x40014000
 8007308:	40014400 	.word	0x40014400
 800730c:	40014800 	.word	0x40014800

08007310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f023 0210 	bic.w	r2, r3, #16
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4b34      	ldr	r3, [pc, #208]	; (800740c <TIM_OC2_SetConfig+0xfc>)
 800733c:	4013      	ands	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 0320 	bic.w	r3, r3, #32
 800735a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a29      	ldr	r2, [pc, #164]	; (8007410 <TIM_OC2_SetConfig+0x100>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_OC2_SetConfig+0x68>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a28      	ldr	r2, [pc, #160]	; (8007414 <TIM_OC2_SetConfig+0x104>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d10d      	bne.n	8007394 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800737e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a1e      	ldr	r2, [pc, #120]	; (8007410 <TIM_OC2_SetConfig+0x100>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00f      	beq.n	80073bc <TIM_OC2_SetConfig+0xac>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <TIM_OC2_SetConfig+0x104>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00b      	beq.n	80073bc <TIM_OC2_SetConfig+0xac>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <TIM_OC2_SetConfig+0x108>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d007      	beq.n	80073bc <TIM_OC2_SetConfig+0xac>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a1b      	ldr	r2, [pc, #108]	; (800741c <TIM_OC2_SetConfig+0x10c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_OC2_SetConfig+0xac>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a1a      	ldr	r2, [pc, #104]	; (8007420 <TIM_OC2_SetConfig+0x110>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d113      	bne.n	80073e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	feff8fff 	.word	0xfeff8fff
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400
 8007418:	40014000 	.word	0x40014000
 800741c:	40014400 	.word	0x40014400
 8007420:	40014800 	.word	0x40014800

08007424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4b33      	ldr	r3, [pc, #204]	; (800751c <TIM_OC3_SetConfig+0xf8>)
 8007450:	4013      	ands	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800746c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a28      	ldr	r2, [pc, #160]	; (8007520 <TIM_OC3_SetConfig+0xfc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d003      	beq.n	800748a <TIM_OC3_SetConfig+0x66>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a27      	ldr	r2, [pc, #156]	; (8007524 <TIM_OC3_SetConfig+0x100>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d10d      	bne.n	80074a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a1d      	ldr	r2, [pc, #116]	; (8007520 <TIM_OC3_SetConfig+0xfc>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00f      	beq.n	80074ce <TIM_OC3_SetConfig+0xaa>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <TIM_OC3_SetConfig+0x100>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00b      	beq.n	80074ce <TIM_OC3_SetConfig+0xaa>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <TIM_OC3_SetConfig+0x104>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d007      	beq.n	80074ce <TIM_OC3_SetConfig+0xaa>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1a      	ldr	r2, [pc, #104]	; (800752c <TIM_OC3_SetConfig+0x108>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d003      	beq.n	80074ce <TIM_OC3_SetConfig+0xaa>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a19      	ldr	r2, [pc, #100]	; (8007530 <TIM_OC3_SetConfig+0x10c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d113      	bne.n	80074f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	621a      	str	r2, [r3, #32]
}
 8007510:	bf00      	nop
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	fffeff8f 	.word	0xfffeff8f
 8007520:	40010000 	.word	0x40010000
 8007524:	40010400 	.word	0x40010400
 8007528:	40014000 	.word	0x40014000
 800752c:	40014400 	.word	0x40014400
 8007530:	40014800 	.word	0x40014800

08007534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4b24      	ldr	r3, [pc, #144]	; (80075f0 <TIM_OC4_SetConfig+0xbc>)
 8007560:	4013      	ands	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4313      	orrs	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800757e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	031b      	lsls	r3, r3, #12
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a19      	ldr	r2, [pc, #100]	; (80075f4 <TIM_OC4_SetConfig+0xc0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00f      	beq.n	80075b4 <TIM_OC4_SetConfig+0x80>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a18      	ldr	r2, [pc, #96]	; (80075f8 <TIM_OC4_SetConfig+0xc4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00b      	beq.n	80075b4 <TIM_OC4_SetConfig+0x80>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a17      	ldr	r2, [pc, #92]	; (80075fc <TIM_OC4_SetConfig+0xc8>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d007      	beq.n	80075b4 <TIM_OC4_SetConfig+0x80>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a16      	ldr	r2, [pc, #88]	; (8007600 <TIM_OC4_SetConfig+0xcc>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_OC4_SetConfig+0x80>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a15      	ldr	r2, [pc, #84]	; (8007604 <TIM_OC4_SetConfig+0xd0>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d109      	bne.n	80075c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	019b      	lsls	r3, r3, #6
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	621a      	str	r2, [r3, #32]
}
 80075e2:	bf00      	nop
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	feff8fff 	.word	0xfeff8fff
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40010400 	.word	0x40010400
 80075fc:	40014000 	.word	0x40014000
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800

08007608 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4b21      	ldr	r3, [pc, #132]	; (80076b8 <TIM_OC5_SetConfig+0xb0>)
 8007634:	4013      	ands	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007648:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a18      	ldr	r2, [pc, #96]	; (80076bc <TIM_OC5_SetConfig+0xb4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00f      	beq.n	800767e <TIM_OC5_SetConfig+0x76>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a17      	ldr	r2, [pc, #92]	; (80076c0 <TIM_OC5_SetConfig+0xb8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00b      	beq.n	800767e <TIM_OC5_SetConfig+0x76>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <TIM_OC5_SetConfig+0xbc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d007      	beq.n	800767e <TIM_OC5_SetConfig+0x76>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a15      	ldr	r2, [pc, #84]	; (80076c8 <TIM_OC5_SetConfig+0xc0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d003      	beq.n	800767e <TIM_OC5_SetConfig+0x76>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a14      	ldr	r2, [pc, #80]	; (80076cc <TIM_OC5_SetConfig+0xc4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d109      	bne.n	8007692 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007684:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	621a      	str	r2, [r3, #32]
}
 80076ac:	bf00      	nop
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	fffeff8f 	.word	0xfffeff8f
 80076bc:	40010000 	.word	0x40010000
 80076c0:	40010400 	.word	0x40010400
 80076c4:	40014000 	.word	0x40014000
 80076c8:	40014400 	.word	0x40014400
 80076cc:	40014800 	.word	0x40014800

080076d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4b22      	ldr	r3, [pc, #136]	; (8007784 <TIM_OC6_SetConfig+0xb4>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	051b      	lsls	r3, r3, #20
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a19      	ldr	r2, [pc, #100]	; (8007788 <TIM_OC6_SetConfig+0xb8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00f      	beq.n	8007748 <TIM_OC6_SetConfig+0x78>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a18      	ldr	r2, [pc, #96]	; (800778c <TIM_OC6_SetConfig+0xbc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00b      	beq.n	8007748 <TIM_OC6_SetConfig+0x78>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <TIM_OC6_SetConfig+0xc0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d007      	beq.n	8007748 <TIM_OC6_SetConfig+0x78>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a16      	ldr	r2, [pc, #88]	; (8007794 <TIM_OC6_SetConfig+0xc4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_OC6_SetConfig+0x78>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <TIM_OC6_SetConfig+0xc8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d109      	bne.n	800775c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800774e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	029b      	lsls	r3, r3, #10
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	621a      	str	r2, [r3, #32]
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	feff8fff 	.word	0xfeff8fff
 8007788:	40010000 	.word	0x40010000
 800778c:	40010400 	.word	0x40010400
 8007790:	40014000 	.word	0x40014000
 8007794:	40014400 	.word	0x40014400
 8007798:	40014800 	.word	0x40014800

0800779c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f023 0201 	bic.w	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f023 030a 	bic.w	r3, r3, #10
 80077d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	621a      	str	r2, [r3, #32]
}
 80077ee:	bf00      	nop
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b087      	sub	sp, #28
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	f023 0210 	bic.w	r2, r3, #16
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	031b      	lsls	r3, r3, #12
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	4313      	orrs	r3, r2
 800782e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007836:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	4313      	orrs	r3, r2
 8007840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	621a      	str	r2, [r3, #32]
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	4b09      	ldr	r3, [pc, #36]	; (8007894 <TIM_ITRx_SetConfig+0x38>)
 8007870:	4013      	ands	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	f043 0307 	orr.w	r3, r3, #7
 800787e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	609a      	str	r2, [r3, #8]
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	ffcfff8f 	.word	0xffcfff8f

08007898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	021a      	lsls	r2, r3, #8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4313      	orrs	r3, r2
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	609a      	str	r2, [r3, #8]
}
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2201      	movs	r2, #1
 80078ec:	fa02 f303 	lsl.w	r3, r2, r3
 80078f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a1a      	ldr	r2, [r3, #32]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	43db      	mvns	r3, r3
 80078fa:	401a      	ands	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a1a      	ldr	r2, [r3, #32]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	fa01 f303 	lsl.w	r3, r1, r3
 8007910:	431a      	orrs	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	621a      	str	r2, [r3, #32]
}
 8007916:	bf00      	nop
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
	...

08007924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007934:	2b01      	cmp	r3, #1
 8007936:	d101      	bne.n	800793c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007938:	2302      	movs	r3, #2
 800793a:	e06d      	b.n	8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a30      	ldr	r2, [pc, #192]	; (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d004      	beq.n	8007970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a2f      	ldr	r2, [pc, #188]	; (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d108      	bne.n	8007982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a20      	ldr	r2, [pc, #128]	; (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d022      	beq.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ae:	d01d      	beq.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a1d      	ldr	r2, [pc, #116]	; (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d018      	beq.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a1c      	ldr	r2, [pc, #112]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d013      	beq.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a1a      	ldr	r2, [pc, #104]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00e      	beq.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a15      	ldr	r2, [pc, #84]	; (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d009      	beq.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a16      	ldr	r2, [pc, #88]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d004      	beq.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a15      	ldr	r2, [pc, #84]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d10c      	bne.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	40010000 	.word	0x40010000
 8007a28:	40010400 	.word	0x40010400
 8007a2c:	40000400 	.word	0x40000400
 8007a30:	40000800 	.word	0x40000800
 8007a34:	40000c00 	.word	0x40000c00
 8007a38:	40001800 	.word	0x40001800
 8007a3c:	40014000 	.word	0x40014000

08007a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e042      	b.n	8007b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7f9 fb17 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2224      	movs	r2, #36	; 0x24
 8007aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fce0 	bl	8008484 <UART_SetConfig>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e022      	b.n	8007b14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fb40 	bl	800915c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 fbc7 	bl	80092a0 <UART_CheckIdleState>
 8007b12:	4603      	mov	r3, r0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	; 0x28
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d17b      	bne.n	8007c2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <HAL_UART_Transmit+0x26>
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e074      	b.n	8007c30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2221      	movs	r2, #33	; 0x21
 8007b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b56:	f7f9 fbdf 	bl	8001318 <HAL_GetTick>
 8007b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	88fa      	ldrh	r2, [r7, #6]
 8007b60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	88fa      	ldrh	r2, [r7, #6]
 8007b68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b74:	d108      	bne.n	8007b88 <HAL_UART_Transmit+0x6c>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d104      	bne.n	8007b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	61bb      	str	r3, [r7, #24]
 8007b86:	e003      	b.n	8007b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b90:	e030      	b.n	8007bf4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2180      	movs	r1, #128	; 0x80
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f001 fc29 	bl	80093f4 <UART_WaitOnFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e03d      	b.n	8007c30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	3302      	adds	r3, #2
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	e007      	b.n	8007be2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1c8      	bne.n	8007b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	2200      	movs	r2, #0
 8007c08:	2140      	movs	r1, #64	; 0x40
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f001 fbf2 	bl	80093f4 <UART_WaitOnFlagUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d005      	beq.n	8007c22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e006      	b.n	8007c30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e000      	b.n	8007c30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007c2e:	2302      	movs	r3, #2
  }
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3720      	adds	r7, #32
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d137      	bne.n	8007cc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <HAL_UART_Receive_IT+0x24>
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e030      	b.n	8007cc2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a18      	ldr	r2, [pc, #96]	; (8007ccc <HAL_UART_Receive_IT+0x94>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d01f      	beq.n	8007cb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d018      	beq.n	8007cb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	623b      	str	r3, [r7, #32]
 8007c9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	6a3a      	ldr	r2, [r7, #32]
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e6      	bne.n	8007c7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f001 fc04 	bl	80094c4 <UART_Start_Receive_IT>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	e000      	b.n	8007cc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cc0:	2302      	movs	r3, #2
  }
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3728      	adds	r7, #40	; 0x28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	58000c00 	.word	0x58000c00

08007cd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b0ba      	sub	sp, #232	; 0xe8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007cf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007cfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8007cfe:	4013      	ands	r3, r2
 8007d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d11b      	bne.n	8007d44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d015      	beq.n	8007d44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d009      	beq.n	8007d44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8377 	beq.w	8008428 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
      }
      return;
 8007d42:	e371      	b.n	8008428 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 8123 	beq.w	8007f94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d52:	4b8d      	ldr	r3, [pc, #564]	; (8007f88 <HAL_UART_IRQHandler+0x2b8>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007d5e:	4b8b      	ldr	r3, [pc, #556]	; (8007f8c <HAL_UART_IRQHandler+0x2bc>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 8116 	beq.w	8007f94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d011      	beq.n	8007d98 <HAL_UART_IRQHandler+0xc8>
 8007d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2201      	movs	r2, #1
 8007d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8e:	f043 0201 	orr.w	r2, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d011      	beq.n	8007dc8 <HAL_UART_IRQHandler+0xf8>
 8007da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2202      	movs	r2, #2
 8007db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dbe:	f043 0204 	orr.w	r2, r3, #4
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d011      	beq.n	8007df8 <HAL_UART_IRQHandler+0x128>
 8007dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2204      	movs	r2, #4
 8007de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dee:	f043 0202 	orr.w	r2, r3, #2
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d017      	beq.n	8007e34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d105      	bne.n	8007e1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e14:	4b5c      	ldr	r3, [pc, #368]	; (8007f88 <HAL_UART_IRQHandler+0x2b8>)
 8007e16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2208      	movs	r2, #8
 8007e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2a:	f043 0208 	orr.w	r2, r3, #8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d012      	beq.n	8007e66 <HAL_UART_IRQHandler+0x196>
 8007e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00c      	beq.n	8007e66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5c:	f043 0220 	orr.w	r2, r3, #32
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 82dd 	beq.w	800842c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d013      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e82:	f003 0320 	and.w	r3, r3, #32
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d105      	bne.n	8007e96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eba:	2b40      	cmp	r3, #64	; 0x40
 8007ebc:	d005      	beq.n	8007eca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d054      	beq.n	8007f74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 fc1c 	bl	8009708 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d146      	bne.n	8007f6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3308      	adds	r3, #8
 8007f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1d9      	bne.n	8007ede <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d017      	beq.n	8007f64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f3a:	4a15      	ldr	r2, [pc, #84]	; (8007f90 <HAL_UART_IRQHandler+0x2c0>)
 8007f3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7f9 fe45 	bl	8001bd4 <HAL_DMA_Abort_IT>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d019      	beq.n	8007f84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007f5e:	4610      	mov	r0, r2
 8007f60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f62:	e00f      	b.n	8007f84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa77 	bl	8008458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6a:	e00b      	b.n	8007f84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa73 	bl	8008458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f72:	e007      	b.n	8007f84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fa6f 	bl	8008458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007f82:	e253      	b.n	800842c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f84:	bf00      	nop
    return;
 8007f86:	e251      	b.n	800842c <HAL_UART_IRQHandler+0x75c>
 8007f88:	10000001 	.word	0x10000001
 8007f8c:	04000120 	.word	0x04000120
 8007f90:	080097d5 	.word	0x080097d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	f040 81e7 	bne.w	800836c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa2:	f003 0310 	and.w	r3, r3, #16
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 81e0 	beq.w	800836c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 81d9 	beq.w	800836c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	f040 8151 	bne.w	8008274 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a96      	ldr	r2, [pc, #600]	; (8008234 <HAL_UART_IRQHandler+0x564>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d068      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a93      	ldr	r2, [pc, #588]	; (8008238 <HAL_UART_IRQHandler+0x568>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d061      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a91      	ldr	r2, [pc, #580]	; (800823c <HAL_UART_IRQHandler+0x56c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d05a      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a8e      	ldr	r2, [pc, #568]	; (8008240 <HAL_UART_IRQHandler+0x570>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d053      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a8c      	ldr	r2, [pc, #560]	; (8008244 <HAL_UART_IRQHandler+0x574>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d04c      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a89      	ldr	r2, [pc, #548]	; (8008248 <HAL_UART_IRQHandler+0x578>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d045      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a87      	ldr	r2, [pc, #540]	; (800824c <HAL_UART_IRQHandler+0x57c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d03e      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a84      	ldr	r2, [pc, #528]	; (8008250 <HAL_UART_IRQHandler+0x580>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d037      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a82      	ldr	r2, [pc, #520]	; (8008254 <HAL_UART_IRQHandler+0x584>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d030      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a7f      	ldr	r2, [pc, #508]	; (8008258 <HAL_UART_IRQHandler+0x588>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d029      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a7d      	ldr	r2, [pc, #500]	; (800825c <HAL_UART_IRQHandler+0x58c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d022      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a7a      	ldr	r2, [pc, #488]	; (8008260 <HAL_UART_IRQHandler+0x590>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d01b      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a78      	ldr	r2, [pc, #480]	; (8008264 <HAL_UART_IRQHandler+0x594>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d014      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a75      	ldr	r2, [pc, #468]	; (8008268 <HAL_UART_IRQHandler+0x598>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00d      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a73      	ldr	r2, [pc, #460]	; (800826c <HAL_UART_IRQHandler+0x59c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d006      	beq.n	80080b2 <HAL_UART_IRQHandler+0x3e2>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a70      	ldr	r2, [pc, #448]	; (8008270 <HAL_UART_IRQHandler+0x5a0>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d106      	bne.n	80080c0 <HAL_UART_IRQHandler+0x3f0>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	e005      	b.n	80080cc <HAL_UART_IRQHandler+0x3fc>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 81ab 	beq.w	8008430 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080e4:	429a      	cmp	r2, r3
 80080e6:	f080 81a3 	bcs.w	8008430 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008100:	f000 8087 	beq.w	8008212 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800811c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	461a      	mov	r2, r3
 800812a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800812e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008132:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800813a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1da      	bne.n	8008104 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3308      	adds	r3, #8
 8008154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800815e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008160:	f023 0301 	bic.w	r3, r3, #1
 8008164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3308      	adds	r3, #8
 800816e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800817a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e1      	bne.n	800814e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3308      	adds	r3, #8
 8008190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800819a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800819c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e3      	bne.n	800818a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e0:	f023 0310 	bic.w	r3, r3, #16
 80081e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80081f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e4      	bne.n	80081d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800820c:	4618      	mov	r0, r3
 800820e:	f7f9 f9c3 	bl	8001598 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2202      	movs	r2, #2
 8008216:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008224:	b29b      	uxth	r3, r3
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	b29b      	uxth	r3, r3
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f91d 	bl	800846c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008232:	e0fd      	b.n	8008430 <HAL_UART_IRQHandler+0x760>
 8008234:	40020010 	.word	0x40020010
 8008238:	40020028 	.word	0x40020028
 800823c:	40020040 	.word	0x40020040
 8008240:	40020058 	.word	0x40020058
 8008244:	40020070 	.word	0x40020070
 8008248:	40020088 	.word	0x40020088
 800824c:	400200a0 	.word	0x400200a0
 8008250:	400200b8 	.word	0x400200b8
 8008254:	40020410 	.word	0x40020410
 8008258:	40020428 	.word	0x40020428
 800825c:	40020440 	.word	0x40020440
 8008260:	40020458 	.word	0x40020458
 8008264:	40020470 	.word	0x40020470
 8008268:	40020488 	.word	0x40020488
 800826c:	400204a0 	.word	0x400204a0
 8008270:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008280:	b29b      	uxth	r3, r3
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 80cf 	beq.w	8008434 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80ca 	beq.w	8008434 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082c2:	647b      	str	r3, [r7, #68]	; 0x44
 80082c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e4      	bne.n	80082a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	623b      	str	r3, [r7, #32]
   return(result);
 80082e6:	6a3a      	ldr	r2, [r7, #32]
 80082e8:	4b55      	ldr	r3, [pc, #340]	; (8008440 <HAL_UART_IRQHandler+0x770>)
 80082ea:	4013      	ands	r3, r2
 80082ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082fa:	633a      	str	r2, [r7, #48]	; 0x30
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e3      	bne.n	80082d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0310 	bic.w	r3, r3, #16
 8008336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008344:	61fb      	str	r3, [r7, #28]
 8008346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	69b9      	ldr	r1, [r7, #24]
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	617b      	str	r3, [r7, #20]
   return(result);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e4      	bne.n	8008322 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2202      	movs	r2, #2
 800835c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800835e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f881 	bl	800846c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800836a:	e063      	b.n	8008434 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800836c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00e      	beq.n	8008396 <HAL_UART_IRQHandler+0x6c6>
 8008378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800837c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800838c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 ff7e 	bl	800a290 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008394:	e051      	b.n	800843a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d014      	beq.n	80083cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80083a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d105      	bne.n	80083ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80083ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d008      	beq.n	80083cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d03a      	beq.n	8008438 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
    }
    return;
 80083ca:	e035      	b.n	8008438 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80083cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <HAL_UART_IRQHandler+0x71c>
 80083d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 fa0b 	bl	8009800 <UART_EndTransmit_IT>
    return;
 80083ea:	e026      	b.n	800843a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80083ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <HAL_UART_IRQHandler+0x73c>
 80083f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 ff57 	bl	800a2b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800840a:	e016      	b.n	800843a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800840c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d010      	beq.n	800843a <HAL_UART_IRQHandler+0x76a>
 8008418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800841c:	2b00      	cmp	r3, #0
 800841e:	da0c      	bge.n	800843a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 ff3f 	bl	800a2a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008426:	e008      	b.n	800843a <HAL_UART_IRQHandler+0x76a>
      return;
 8008428:	bf00      	nop
 800842a:	e006      	b.n	800843a <HAL_UART_IRQHandler+0x76a>
    return;
 800842c:	bf00      	nop
 800842e:	e004      	b.n	800843a <HAL_UART_IRQHandler+0x76a>
      return;
 8008430:	bf00      	nop
 8008432:	e002      	b.n	800843a <HAL_UART_IRQHandler+0x76a>
      return;
 8008434:	bf00      	nop
 8008436:	e000      	b.n	800843a <HAL_UART_IRQHandler+0x76a>
    return;
 8008438:	bf00      	nop
  }
}
 800843a:	37e8      	adds	r7, #232	; 0xe8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	effffffe 	.word	0xeffffffe

08008444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008488:	b092      	sub	sp, #72	; 0x48
 800848a:	af00      	add	r7, sp, #0
 800848c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	431a      	orrs	r2, r3
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	4bbe      	ldr	r3, [pc, #760]	; (80087ac <UART_SetConfig+0x328>)
 80084b4:	4013      	ands	r3, r2
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	6812      	ldr	r2, [r2, #0]
 80084ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084bc:	430b      	orrs	r3, r1
 80084be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4ab3      	ldr	r2, [pc, #716]	; (80087b0 <UART_SetConfig+0x32c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d004      	beq.n	80084f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084ec:	4313      	orrs	r3, r2
 80084ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	4baf      	ldr	r3, [pc, #700]	; (80087b4 <UART_SetConfig+0x330>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	6812      	ldr	r2, [r2, #0]
 80084fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008500:	430b      	orrs	r3, r1
 8008502:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850a:	f023 010f 	bic.w	r1, r3, #15
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4aa6      	ldr	r2, [pc, #664]	; (80087b8 <UART_SetConfig+0x334>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d177      	bne.n	8008614 <UART_SetConfig+0x190>
 8008524:	4ba5      	ldr	r3, [pc, #660]	; (80087bc <UART_SetConfig+0x338>)
 8008526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800852c:	2b28      	cmp	r3, #40	; 0x28
 800852e:	d86d      	bhi.n	800860c <UART_SetConfig+0x188>
 8008530:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <UART_SetConfig+0xb4>)
 8008532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008536:	bf00      	nop
 8008538:	080085dd 	.word	0x080085dd
 800853c:	0800860d 	.word	0x0800860d
 8008540:	0800860d 	.word	0x0800860d
 8008544:	0800860d 	.word	0x0800860d
 8008548:	0800860d 	.word	0x0800860d
 800854c:	0800860d 	.word	0x0800860d
 8008550:	0800860d 	.word	0x0800860d
 8008554:	0800860d 	.word	0x0800860d
 8008558:	080085e5 	.word	0x080085e5
 800855c:	0800860d 	.word	0x0800860d
 8008560:	0800860d 	.word	0x0800860d
 8008564:	0800860d 	.word	0x0800860d
 8008568:	0800860d 	.word	0x0800860d
 800856c:	0800860d 	.word	0x0800860d
 8008570:	0800860d 	.word	0x0800860d
 8008574:	0800860d 	.word	0x0800860d
 8008578:	080085ed 	.word	0x080085ed
 800857c:	0800860d 	.word	0x0800860d
 8008580:	0800860d 	.word	0x0800860d
 8008584:	0800860d 	.word	0x0800860d
 8008588:	0800860d 	.word	0x0800860d
 800858c:	0800860d 	.word	0x0800860d
 8008590:	0800860d 	.word	0x0800860d
 8008594:	0800860d 	.word	0x0800860d
 8008598:	080085f5 	.word	0x080085f5
 800859c:	0800860d 	.word	0x0800860d
 80085a0:	0800860d 	.word	0x0800860d
 80085a4:	0800860d 	.word	0x0800860d
 80085a8:	0800860d 	.word	0x0800860d
 80085ac:	0800860d 	.word	0x0800860d
 80085b0:	0800860d 	.word	0x0800860d
 80085b4:	0800860d 	.word	0x0800860d
 80085b8:	080085fd 	.word	0x080085fd
 80085bc:	0800860d 	.word	0x0800860d
 80085c0:	0800860d 	.word	0x0800860d
 80085c4:	0800860d 	.word	0x0800860d
 80085c8:	0800860d 	.word	0x0800860d
 80085cc:	0800860d 	.word	0x0800860d
 80085d0:	0800860d 	.word	0x0800860d
 80085d4:	0800860d 	.word	0x0800860d
 80085d8:	08008605 	.word	0x08008605
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e2:	e326      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80085e4:	2304      	movs	r3, #4
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ea:	e322      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80085ec:	2308      	movs	r3, #8
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f2:	e31e      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80085f4:	2310      	movs	r3, #16
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fa:	e31a      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80085fc:	2320      	movs	r3, #32
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008602:	e316      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008604:	2340      	movs	r3, #64	; 0x40
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860a:	e312      	b.n	8008c32 <UART_SetConfig+0x7ae>
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e30e      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a69      	ldr	r2, [pc, #420]	; (80087c0 <UART_SetConfig+0x33c>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d130      	bne.n	8008680 <UART_SetConfig+0x1fc>
 800861e:	4b67      	ldr	r3, [pc, #412]	; (80087bc <UART_SetConfig+0x338>)
 8008620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	2b05      	cmp	r3, #5
 8008628:	d826      	bhi.n	8008678 <UART_SetConfig+0x1f4>
 800862a:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <UART_SetConfig+0x1ac>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008649 	.word	0x08008649
 8008634:	08008651 	.word	0x08008651
 8008638:	08008659 	.word	0x08008659
 800863c:	08008661 	.word	0x08008661
 8008640:	08008669 	.word	0x08008669
 8008644:	08008671 	.word	0x08008671
 8008648:	2300      	movs	r3, #0
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e2f0      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008650:	2304      	movs	r3, #4
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008656:	e2ec      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008658:	2308      	movs	r3, #8
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865e:	e2e8      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008660:	2310      	movs	r3, #16
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008666:	e2e4      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008668:	2320      	movs	r3, #32
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866e:	e2e0      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008670:	2340      	movs	r3, #64	; 0x40
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008676:	e2dc      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008678:	2380      	movs	r3, #128	; 0x80
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e2d8      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a4f      	ldr	r2, [pc, #316]	; (80087c4 <UART_SetConfig+0x340>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d130      	bne.n	80086ec <UART_SetConfig+0x268>
 800868a:	4b4c      	ldr	r3, [pc, #304]	; (80087bc <UART_SetConfig+0x338>)
 800868c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	2b05      	cmp	r3, #5
 8008694:	d826      	bhi.n	80086e4 <UART_SetConfig+0x260>
 8008696:	a201      	add	r2, pc, #4	; (adr r2, 800869c <UART_SetConfig+0x218>)
 8008698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869c:	080086b5 	.word	0x080086b5
 80086a0:	080086bd 	.word	0x080086bd
 80086a4:	080086c5 	.word	0x080086c5
 80086a8:	080086cd 	.word	0x080086cd
 80086ac:	080086d5 	.word	0x080086d5
 80086b0:	080086dd 	.word	0x080086dd
 80086b4:	2300      	movs	r3, #0
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e2ba      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80086bc:	2304      	movs	r3, #4
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c2:	e2b6      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80086c4:	2308      	movs	r3, #8
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ca:	e2b2      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80086cc:	2310      	movs	r3, #16
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d2:	e2ae      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80086d4:	2320      	movs	r3, #32
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086da:	e2aa      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e2a6      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80086e4:	2380      	movs	r3, #128	; 0x80
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e2a2      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a35      	ldr	r2, [pc, #212]	; (80087c8 <UART_SetConfig+0x344>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d130      	bne.n	8008758 <UART_SetConfig+0x2d4>
 80086f6:	4b31      	ldr	r3, [pc, #196]	; (80087bc <UART_SetConfig+0x338>)
 80086f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fa:	f003 0307 	and.w	r3, r3, #7
 80086fe:	2b05      	cmp	r3, #5
 8008700:	d826      	bhi.n	8008750 <UART_SetConfig+0x2cc>
 8008702:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <UART_SetConfig+0x284>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	08008721 	.word	0x08008721
 800870c:	08008729 	.word	0x08008729
 8008710:	08008731 	.word	0x08008731
 8008714:	08008739 	.word	0x08008739
 8008718:	08008741 	.word	0x08008741
 800871c:	08008749 	.word	0x08008749
 8008720:	2300      	movs	r3, #0
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e284      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008728:	2304      	movs	r3, #4
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e280      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008730:	2308      	movs	r3, #8
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008736:	e27c      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008738:	2310      	movs	r3, #16
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e278      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008740:	2320      	movs	r3, #32
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e274      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008748:	2340      	movs	r3, #64	; 0x40
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e270      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e26c      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1b      	ldr	r2, [pc, #108]	; (80087cc <UART_SetConfig+0x348>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d142      	bne.n	80087e8 <UART_SetConfig+0x364>
 8008762:	4b16      	ldr	r3, [pc, #88]	; (80087bc <UART_SetConfig+0x338>)
 8008764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	2b05      	cmp	r3, #5
 800876c:	d838      	bhi.n	80087e0 <UART_SetConfig+0x35c>
 800876e:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <UART_SetConfig+0x2f0>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	0800878d 	.word	0x0800878d
 8008778:	08008795 	.word	0x08008795
 800877c:	0800879d 	.word	0x0800879d
 8008780:	080087a5 	.word	0x080087a5
 8008784:	080087d1 	.word	0x080087d1
 8008788:	080087d9 	.word	0x080087d9
 800878c:	2300      	movs	r3, #0
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008792:	e24e      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008794:	2304      	movs	r3, #4
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879a:	e24a      	b.n	8008c32 <UART_SetConfig+0x7ae>
 800879c:	2308      	movs	r3, #8
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a2:	e246      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80087a4:	2310      	movs	r3, #16
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087aa:	e242      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80087ac:	cfff69f3 	.word	0xcfff69f3
 80087b0:	58000c00 	.word	0x58000c00
 80087b4:	11fff4ff 	.word	0x11fff4ff
 80087b8:	40011000 	.word	0x40011000
 80087bc:	58024400 	.word	0x58024400
 80087c0:	40004400 	.word	0x40004400
 80087c4:	40004800 	.word	0x40004800
 80087c8:	40004c00 	.word	0x40004c00
 80087cc:	40005000 	.word	0x40005000
 80087d0:	2320      	movs	r3, #32
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d6:	e22c      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80087d8:	2340      	movs	r3, #64	; 0x40
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087de:	e228      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80087e0:	2380      	movs	r3, #128	; 0x80
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e224      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4ab1      	ldr	r2, [pc, #708]	; (8008ab4 <UART_SetConfig+0x630>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d176      	bne.n	80088e0 <UART_SetConfig+0x45c>
 80087f2:	4bb1      	ldr	r3, [pc, #708]	; (8008ab8 <UART_SetConfig+0x634>)
 80087f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087fa:	2b28      	cmp	r3, #40	; 0x28
 80087fc:	d86c      	bhi.n	80088d8 <UART_SetConfig+0x454>
 80087fe:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <UART_SetConfig+0x380>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	080088a9 	.word	0x080088a9
 8008808:	080088d9 	.word	0x080088d9
 800880c:	080088d9 	.word	0x080088d9
 8008810:	080088d9 	.word	0x080088d9
 8008814:	080088d9 	.word	0x080088d9
 8008818:	080088d9 	.word	0x080088d9
 800881c:	080088d9 	.word	0x080088d9
 8008820:	080088d9 	.word	0x080088d9
 8008824:	080088b1 	.word	0x080088b1
 8008828:	080088d9 	.word	0x080088d9
 800882c:	080088d9 	.word	0x080088d9
 8008830:	080088d9 	.word	0x080088d9
 8008834:	080088d9 	.word	0x080088d9
 8008838:	080088d9 	.word	0x080088d9
 800883c:	080088d9 	.word	0x080088d9
 8008840:	080088d9 	.word	0x080088d9
 8008844:	080088b9 	.word	0x080088b9
 8008848:	080088d9 	.word	0x080088d9
 800884c:	080088d9 	.word	0x080088d9
 8008850:	080088d9 	.word	0x080088d9
 8008854:	080088d9 	.word	0x080088d9
 8008858:	080088d9 	.word	0x080088d9
 800885c:	080088d9 	.word	0x080088d9
 8008860:	080088d9 	.word	0x080088d9
 8008864:	080088c1 	.word	0x080088c1
 8008868:	080088d9 	.word	0x080088d9
 800886c:	080088d9 	.word	0x080088d9
 8008870:	080088d9 	.word	0x080088d9
 8008874:	080088d9 	.word	0x080088d9
 8008878:	080088d9 	.word	0x080088d9
 800887c:	080088d9 	.word	0x080088d9
 8008880:	080088d9 	.word	0x080088d9
 8008884:	080088c9 	.word	0x080088c9
 8008888:	080088d9 	.word	0x080088d9
 800888c:	080088d9 	.word	0x080088d9
 8008890:	080088d9 	.word	0x080088d9
 8008894:	080088d9 	.word	0x080088d9
 8008898:	080088d9 	.word	0x080088d9
 800889c:	080088d9 	.word	0x080088d9
 80088a0:	080088d9 	.word	0x080088d9
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	2301      	movs	r3, #1
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ae:	e1c0      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80088b0:	2304      	movs	r3, #4
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b6:	e1bc      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80088b8:	2308      	movs	r3, #8
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088be:	e1b8      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80088c0:	2310      	movs	r3, #16
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c6:	e1b4      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80088c8:	2320      	movs	r3, #32
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e1b0      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80088d0:	2340      	movs	r3, #64	; 0x40
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e1ac      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088de:	e1a8      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a75      	ldr	r2, [pc, #468]	; (8008abc <UART_SetConfig+0x638>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d130      	bne.n	800894c <UART_SetConfig+0x4c8>
 80088ea:	4b73      	ldr	r3, [pc, #460]	; (8008ab8 <UART_SetConfig+0x634>)
 80088ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d826      	bhi.n	8008944 <UART_SetConfig+0x4c0>
 80088f6:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <UART_SetConfig+0x478>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008915 	.word	0x08008915
 8008900:	0800891d 	.word	0x0800891d
 8008904:	08008925 	.word	0x08008925
 8008908:	0800892d 	.word	0x0800892d
 800890c:	08008935 	.word	0x08008935
 8008910:	0800893d 	.word	0x0800893d
 8008914:	2300      	movs	r3, #0
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e18a      	b.n	8008c32 <UART_SetConfig+0x7ae>
 800891c:	2304      	movs	r3, #4
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e186      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008924:	2308      	movs	r3, #8
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892a:	e182      	b.n	8008c32 <UART_SetConfig+0x7ae>
 800892c:	2310      	movs	r3, #16
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008932:	e17e      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008934:	2320      	movs	r3, #32
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893a:	e17a      	b.n	8008c32 <UART_SetConfig+0x7ae>
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008942:	e176      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008944:	2380      	movs	r3, #128	; 0x80
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894a:	e172      	b.n	8008c32 <UART_SetConfig+0x7ae>
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a5b      	ldr	r2, [pc, #364]	; (8008ac0 <UART_SetConfig+0x63c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d130      	bne.n	80089b8 <UART_SetConfig+0x534>
 8008956:	4b58      	ldr	r3, [pc, #352]	; (8008ab8 <UART_SetConfig+0x634>)
 8008958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	2b05      	cmp	r3, #5
 8008960:	d826      	bhi.n	80089b0 <UART_SetConfig+0x52c>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <UART_SetConfig+0x4e4>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008981 	.word	0x08008981
 800896c:	08008989 	.word	0x08008989
 8008970:	08008991 	.word	0x08008991
 8008974:	08008999 	.word	0x08008999
 8008978:	080089a1 	.word	0x080089a1
 800897c:	080089a9 	.word	0x080089a9
 8008980:	2300      	movs	r3, #0
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e154      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008988:	2304      	movs	r3, #4
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e150      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008990:	2308      	movs	r3, #8
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e14c      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008998:	2310      	movs	r3, #16
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899e:	e148      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80089a0:	2320      	movs	r3, #32
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a6:	e144      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80089a8:	2340      	movs	r3, #64	; 0x40
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ae:	e140      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80089b0:	2380      	movs	r3, #128	; 0x80
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089b6:	e13c      	b.n	8008c32 <UART_SetConfig+0x7ae>
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a41      	ldr	r2, [pc, #260]	; (8008ac4 <UART_SetConfig+0x640>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	f040 8082 	bne.w	8008ac8 <UART_SetConfig+0x644>
 80089c4:	4b3c      	ldr	r3, [pc, #240]	; (8008ab8 <UART_SetConfig+0x634>)
 80089c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089cc:	2b28      	cmp	r3, #40	; 0x28
 80089ce:	d86d      	bhi.n	8008aac <UART_SetConfig+0x628>
 80089d0:	a201      	add	r2, pc, #4	; (adr r2, 80089d8 <UART_SetConfig+0x554>)
 80089d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d6:	bf00      	nop
 80089d8:	08008a7d 	.word	0x08008a7d
 80089dc:	08008aad 	.word	0x08008aad
 80089e0:	08008aad 	.word	0x08008aad
 80089e4:	08008aad 	.word	0x08008aad
 80089e8:	08008aad 	.word	0x08008aad
 80089ec:	08008aad 	.word	0x08008aad
 80089f0:	08008aad 	.word	0x08008aad
 80089f4:	08008aad 	.word	0x08008aad
 80089f8:	08008a85 	.word	0x08008a85
 80089fc:	08008aad 	.word	0x08008aad
 8008a00:	08008aad 	.word	0x08008aad
 8008a04:	08008aad 	.word	0x08008aad
 8008a08:	08008aad 	.word	0x08008aad
 8008a0c:	08008aad 	.word	0x08008aad
 8008a10:	08008aad 	.word	0x08008aad
 8008a14:	08008aad 	.word	0x08008aad
 8008a18:	08008a8d 	.word	0x08008a8d
 8008a1c:	08008aad 	.word	0x08008aad
 8008a20:	08008aad 	.word	0x08008aad
 8008a24:	08008aad 	.word	0x08008aad
 8008a28:	08008aad 	.word	0x08008aad
 8008a2c:	08008aad 	.word	0x08008aad
 8008a30:	08008aad 	.word	0x08008aad
 8008a34:	08008aad 	.word	0x08008aad
 8008a38:	08008a95 	.word	0x08008a95
 8008a3c:	08008aad 	.word	0x08008aad
 8008a40:	08008aad 	.word	0x08008aad
 8008a44:	08008aad 	.word	0x08008aad
 8008a48:	08008aad 	.word	0x08008aad
 8008a4c:	08008aad 	.word	0x08008aad
 8008a50:	08008aad 	.word	0x08008aad
 8008a54:	08008aad 	.word	0x08008aad
 8008a58:	08008a9d 	.word	0x08008a9d
 8008a5c:	08008aad 	.word	0x08008aad
 8008a60:	08008aad 	.word	0x08008aad
 8008a64:	08008aad 	.word	0x08008aad
 8008a68:	08008aad 	.word	0x08008aad
 8008a6c:	08008aad 	.word	0x08008aad
 8008a70:	08008aad 	.word	0x08008aad
 8008a74:	08008aad 	.word	0x08008aad
 8008a78:	08008aa5 	.word	0x08008aa5
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a82:	e0d6      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008a84:	2304      	movs	r3, #4
 8008a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8a:	e0d2      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a92:	e0ce      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008a94:	2310      	movs	r3, #16
 8008a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9a:	e0ca      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008a9c:	2320      	movs	r3, #32
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa2:	e0c6      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008aa4:	2340      	movs	r3, #64	; 0x40
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aaa:	e0c2      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008aac:	2380      	movs	r3, #128	; 0x80
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab2:	e0be      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008ab4:	40011400 	.word	0x40011400
 8008ab8:	58024400 	.word	0x58024400
 8008abc:	40007800 	.word	0x40007800
 8008ac0:	40007c00 	.word	0x40007c00
 8008ac4:	40011800 	.word	0x40011800
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4aad      	ldr	r2, [pc, #692]	; (8008d84 <UART_SetConfig+0x900>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d176      	bne.n	8008bc0 <UART_SetConfig+0x73c>
 8008ad2:	4bad      	ldr	r3, [pc, #692]	; (8008d88 <UART_SetConfig+0x904>)
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ada:	2b28      	cmp	r3, #40	; 0x28
 8008adc:	d86c      	bhi.n	8008bb8 <UART_SetConfig+0x734>
 8008ade:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <UART_SetConfig+0x660>)
 8008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae4:	08008b89 	.word	0x08008b89
 8008ae8:	08008bb9 	.word	0x08008bb9
 8008aec:	08008bb9 	.word	0x08008bb9
 8008af0:	08008bb9 	.word	0x08008bb9
 8008af4:	08008bb9 	.word	0x08008bb9
 8008af8:	08008bb9 	.word	0x08008bb9
 8008afc:	08008bb9 	.word	0x08008bb9
 8008b00:	08008bb9 	.word	0x08008bb9
 8008b04:	08008b91 	.word	0x08008b91
 8008b08:	08008bb9 	.word	0x08008bb9
 8008b0c:	08008bb9 	.word	0x08008bb9
 8008b10:	08008bb9 	.word	0x08008bb9
 8008b14:	08008bb9 	.word	0x08008bb9
 8008b18:	08008bb9 	.word	0x08008bb9
 8008b1c:	08008bb9 	.word	0x08008bb9
 8008b20:	08008bb9 	.word	0x08008bb9
 8008b24:	08008b99 	.word	0x08008b99
 8008b28:	08008bb9 	.word	0x08008bb9
 8008b2c:	08008bb9 	.word	0x08008bb9
 8008b30:	08008bb9 	.word	0x08008bb9
 8008b34:	08008bb9 	.word	0x08008bb9
 8008b38:	08008bb9 	.word	0x08008bb9
 8008b3c:	08008bb9 	.word	0x08008bb9
 8008b40:	08008bb9 	.word	0x08008bb9
 8008b44:	08008ba1 	.word	0x08008ba1
 8008b48:	08008bb9 	.word	0x08008bb9
 8008b4c:	08008bb9 	.word	0x08008bb9
 8008b50:	08008bb9 	.word	0x08008bb9
 8008b54:	08008bb9 	.word	0x08008bb9
 8008b58:	08008bb9 	.word	0x08008bb9
 8008b5c:	08008bb9 	.word	0x08008bb9
 8008b60:	08008bb9 	.word	0x08008bb9
 8008b64:	08008ba9 	.word	0x08008ba9
 8008b68:	08008bb9 	.word	0x08008bb9
 8008b6c:	08008bb9 	.word	0x08008bb9
 8008b70:	08008bb9 	.word	0x08008bb9
 8008b74:	08008bb9 	.word	0x08008bb9
 8008b78:	08008bb9 	.word	0x08008bb9
 8008b7c:	08008bb9 	.word	0x08008bb9
 8008b80:	08008bb9 	.word	0x08008bb9
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e050      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008b90:	2304      	movs	r3, #4
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e04c      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008b98:	2308      	movs	r3, #8
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e048      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e044      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008ba8:	2320      	movs	r3, #32
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e040      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008bb0:	2340      	movs	r3, #64	; 0x40
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e03c      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008bb8:	2380      	movs	r3, #128	; 0x80
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bbe:	e038      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a71      	ldr	r2, [pc, #452]	; (8008d8c <UART_SetConfig+0x908>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d130      	bne.n	8008c2c <UART_SetConfig+0x7a8>
 8008bca:	4b6f      	ldr	r3, [pc, #444]	; (8008d88 <UART_SetConfig+0x904>)
 8008bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d826      	bhi.n	8008c24 <UART_SetConfig+0x7a0>
 8008bd6:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <UART_SetConfig+0x758>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008bf5 	.word	0x08008bf5
 8008be0:	08008bfd 	.word	0x08008bfd
 8008be4:	08008c05 	.word	0x08008c05
 8008be8:	08008c0d 	.word	0x08008c0d
 8008bec:	08008c15 	.word	0x08008c15
 8008bf0:	08008c1d 	.word	0x08008c1d
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e01a      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e016      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0a:	e012      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c12:	e00e      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008c14:	2320      	movs	r3, #32
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1a:	e00a      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008c1c:	2340      	movs	r3, #64	; 0x40
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c22:	e006      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008c24:	2380      	movs	r3, #128	; 0x80
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2a:	e002      	b.n	8008c32 <UART_SetConfig+0x7ae>
 8008c2c:	2380      	movs	r3, #128	; 0x80
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a55      	ldr	r2, [pc, #340]	; (8008d8c <UART_SetConfig+0x908>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	f040 80f8 	bne.w	8008e2e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	dc46      	bgt.n	8008cd4 <UART_SetConfig+0x850>
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	db75      	blt.n	8008d36 <UART_SetConfig+0x8b2>
 8008c4a:	3b02      	subs	r3, #2
 8008c4c:	2b1e      	cmp	r3, #30
 8008c4e:	d872      	bhi.n	8008d36 <UART_SetConfig+0x8b2>
 8008c50:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <UART_SetConfig+0x7d4>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008cdb 	.word	0x08008cdb
 8008c5c:	08008d37 	.word	0x08008d37
 8008c60:	08008ce3 	.word	0x08008ce3
 8008c64:	08008d37 	.word	0x08008d37
 8008c68:	08008d37 	.word	0x08008d37
 8008c6c:	08008d37 	.word	0x08008d37
 8008c70:	08008cf3 	.word	0x08008cf3
 8008c74:	08008d37 	.word	0x08008d37
 8008c78:	08008d37 	.word	0x08008d37
 8008c7c:	08008d37 	.word	0x08008d37
 8008c80:	08008d37 	.word	0x08008d37
 8008c84:	08008d37 	.word	0x08008d37
 8008c88:	08008d37 	.word	0x08008d37
 8008c8c:	08008d37 	.word	0x08008d37
 8008c90:	08008d03 	.word	0x08008d03
 8008c94:	08008d37 	.word	0x08008d37
 8008c98:	08008d37 	.word	0x08008d37
 8008c9c:	08008d37 	.word	0x08008d37
 8008ca0:	08008d37 	.word	0x08008d37
 8008ca4:	08008d37 	.word	0x08008d37
 8008ca8:	08008d37 	.word	0x08008d37
 8008cac:	08008d37 	.word	0x08008d37
 8008cb0:	08008d37 	.word	0x08008d37
 8008cb4:	08008d37 	.word	0x08008d37
 8008cb8:	08008d37 	.word	0x08008d37
 8008cbc:	08008d37 	.word	0x08008d37
 8008cc0:	08008d37 	.word	0x08008d37
 8008cc4:	08008d37 	.word	0x08008d37
 8008cc8:	08008d37 	.word	0x08008d37
 8008ccc:	08008d37 	.word	0x08008d37
 8008cd0:	08008d29 	.word	0x08008d29
 8008cd4:	2b40      	cmp	r3, #64	; 0x40
 8008cd6:	d02a      	beq.n	8008d2e <UART_SetConfig+0x8aa>
 8008cd8:	e02d      	b.n	8008d36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008cda:	f7fd f843 	bl	8005d64 <HAL_RCCEx_GetD3PCLK1Freq>
 8008cde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ce0:	e02f      	b.n	8008d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fd f852 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf0:	e027      	b.n	8008d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cf2:	f107 0318 	add.w	r3, r7, #24
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fd f99e 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d00:	e01f      	b.n	8008d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d02:	4b21      	ldr	r3, [pc, #132]	; (8008d88 <UART_SetConfig+0x904>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d009      	beq.n	8008d22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d0e:	4b1e      	ldr	r3, [pc, #120]	; (8008d88 <UART_SetConfig+0x904>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	08db      	lsrs	r3, r3, #3
 8008d14:	f003 0303 	and.w	r3, r3, #3
 8008d18:	4a1d      	ldr	r2, [pc, #116]	; (8008d90 <UART_SetConfig+0x90c>)
 8008d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d20:	e00f      	b.n	8008d42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008d22:	4b1b      	ldr	r3, [pc, #108]	; (8008d90 <UART_SetConfig+0x90c>)
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d26:	e00c      	b.n	8008d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d28:	4b1a      	ldr	r3, [pc, #104]	; (8008d94 <UART_SetConfig+0x910>)
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d2c:	e009      	b.n	8008d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d34:	e005      	b.n	8008d42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 81ee 	beq.w	8009126 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	4a12      	ldr	r2, [pc, #72]	; (8008d98 <UART_SetConfig+0x914>)
 8008d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d54:	461a      	mov	r2, r3
 8008d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d5c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	4613      	mov	r3, r2
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	4413      	add	r3, r2
 8008d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d305      	bcc.n	8008d7a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d910      	bls.n	8008d9c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d80:	e1d1      	b.n	8009126 <UART_SetConfig+0xca2>
 8008d82:	bf00      	nop
 8008d84:	40011c00 	.word	0x40011c00
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	58000c00 	.word	0x58000c00
 8008d90:	03d09000 	.word	0x03d09000
 8008d94:	003d0900 	.word	0x003d0900
 8008d98:	0800e6ec 	.word	0x0800e6ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9e:	2200      	movs	r2, #0
 8008da0:	60bb      	str	r3, [r7, #8]
 8008da2:	60fa      	str	r2, [r7, #12]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	4ac0      	ldr	r2, [pc, #768]	; (80090ac <UART_SetConfig+0xc28>)
 8008daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	2200      	movs	r2, #0
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	607a      	str	r2, [r7, #4]
 8008db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dbe:	f7f7 fa95 	bl	80002ec <__aeabi_uldivmod>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	020b      	lsls	r3, r1, #8
 8008dd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dd8:	0202      	lsls	r2, r0, #8
 8008dda:	6979      	ldr	r1, [r7, #20]
 8008ddc:	6849      	ldr	r1, [r1, #4]
 8008dde:	0849      	lsrs	r1, r1, #1
 8008de0:	2000      	movs	r0, #0
 8008de2:	460c      	mov	r4, r1
 8008de4:	4605      	mov	r5, r0
 8008de6:	eb12 0804 	adds.w	r8, r2, r4
 8008dea:	eb43 0905 	adc.w	r9, r3, r5
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	469a      	mov	sl, r3
 8008df6:	4693      	mov	fp, r2
 8008df8:	4652      	mov	r2, sl
 8008dfa:	465b      	mov	r3, fp
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	4649      	mov	r1, r9
 8008e00:	f7f7 fa74 	bl	80002ec <__aeabi_uldivmod>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4613      	mov	r3, r2
 8008e0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e12:	d308      	bcc.n	8008e26 <UART_SetConfig+0x9a2>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1a:	d204      	bcs.n	8008e26 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e22:	60da      	str	r2, [r3, #12]
 8008e24:	e17f      	b.n	8009126 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e2c:	e17b      	b.n	8009126 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e36:	f040 80bd 	bne.w	8008fb4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008e3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e3e:	2b20      	cmp	r3, #32
 8008e40:	dc48      	bgt.n	8008ed4 <UART_SetConfig+0xa50>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	db7b      	blt.n	8008f3e <UART_SetConfig+0xaba>
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d879      	bhi.n	8008f3e <UART_SetConfig+0xaba>
 8008e4a:	a201      	add	r2, pc, #4	; (adr r2, 8008e50 <UART_SetConfig+0x9cc>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008edb 	.word	0x08008edb
 8008e54:	08008ee3 	.word	0x08008ee3
 8008e58:	08008f3f 	.word	0x08008f3f
 8008e5c:	08008f3f 	.word	0x08008f3f
 8008e60:	08008eeb 	.word	0x08008eeb
 8008e64:	08008f3f 	.word	0x08008f3f
 8008e68:	08008f3f 	.word	0x08008f3f
 8008e6c:	08008f3f 	.word	0x08008f3f
 8008e70:	08008efb 	.word	0x08008efb
 8008e74:	08008f3f 	.word	0x08008f3f
 8008e78:	08008f3f 	.word	0x08008f3f
 8008e7c:	08008f3f 	.word	0x08008f3f
 8008e80:	08008f3f 	.word	0x08008f3f
 8008e84:	08008f3f 	.word	0x08008f3f
 8008e88:	08008f3f 	.word	0x08008f3f
 8008e8c:	08008f3f 	.word	0x08008f3f
 8008e90:	08008f0b 	.word	0x08008f0b
 8008e94:	08008f3f 	.word	0x08008f3f
 8008e98:	08008f3f 	.word	0x08008f3f
 8008e9c:	08008f3f 	.word	0x08008f3f
 8008ea0:	08008f3f 	.word	0x08008f3f
 8008ea4:	08008f3f 	.word	0x08008f3f
 8008ea8:	08008f3f 	.word	0x08008f3f
 8008eac:	08008f3f 	.word	0x08008f3f
 8008eb0:	08008f3f 	.word	0x08008f3f
 8008eb4:	08008f3f 	.word	0x08008f3f
 8008eb8:	08008f3f 	.word	0x08008f3f
 8008ebc:	08008f3f 	.word	0x08008f3f
 8008ec0:	08008f3f 	.word	0x08008f3f
 8008ec4:	08008f3f 	.word	0x08008f3f
 8008ec8:	08008f3f 	.word	0x08008f3f
 8008ecc:	08008f3f 	.word	0x08008f3f
 8008ed0:	08008f31 	.word	0x08008f31
 8008ed4:	2b40      	cmp	r3, #64	; 0x40
 8008ed6:	d02e      	beq.n	8008f36 <UART_SetConfig+0xab2>
 8008ed8:	e031      	b.n	8008f3e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eda:	f7fb fd59 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 8008ede:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ee0:	e033      	b.n	8008f4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ee2:	f7fb fd6b 	bl	80049bc <HAL_RCC_GetPCLK2Freq>
 8008ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ee8:	e02f      	b.n	8008f4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fc ff4e 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef8:	e027      	b.n	8008f4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008efa:	f107 0318 	add.w	r3, r7, #24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fd f89a 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f08:	e01f      	b.n	8008f4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f0a:	4b69      	ldr	r3, [pc, #420]	; (80090b0 <UART_SetConfig+0xc2c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0320 	and.w	r3, r3, #32
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d009      	beq.n	8008f2a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f16:	4b66      	ldr	r3, [pc, #408]	; (80090b0 <UART_SetConfig+0xc2c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	08db      	lsrs	r3, r3, #3
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	4a64      	ldr	r2, [pc, #400]	; (80090b4 <UART_SetConfig+0xc30>)
 8008f22:	fa22 f303 	lsr.w	r3, r2, r3
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f28:	e00f      	b.n	8008f4a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008f2a:	4b62      	ldr	r3, [pc, #392]	; (80090b4 <UART_SetConfig+0xc30>)
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f2e:	e00c      	b.n	8008f4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f30:	4b61      	ldr	r3, [pc, #388]	; (80090b8 <UART_SetConfig+0xc34>)
 8008f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f34:	e009      	b.n	8008f4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f3c:	e005      	b.n	8008f4a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 80ea 	beq.w	8009126 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	4a55      	ldr	r2, [pc, #340]	; (80090ac <UART_SetConfig+0xc28>)
 8008f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f64:	005a      	lsls	r2, r3, #1
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	085b      	lsrs	r3, r3, #1
 8008f6c:	441a      	add	r2, r3
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	2b0f      	cmp	r3, #15
 8008f7c:	d916      	bls.n	8008fac <UART_SetConfig+0xb28>
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f84:	d212      	bcs.n	8008fac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	f023 030f 	bic.w	r3, r3, #15
 8008f8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	085b      	lsrs	r3, r3, #1
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008fa8:	60da      	str	r2, [r3, #12]
 8008faa:	e0bc      	b.n	8009126 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008fb2:	e0b8      	b.n	8009126 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008fb8:	2b20      	cmp	r3, #32
 8008fba:	dc4b      	bgt.n	8009054 <UART_SetConfig+0xbd0>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f2c0 8087 	blt.w	80090d0 <UART_SetConfig+0xc4c>
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	f200 8084 	bhi.w	80090d0 <UART_SetConfig+0xc4c>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <UART_SetConfig+0xb4c>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	0800905b 	.word	0x0800905b
 8008fd4:	08009063 	.word	0x08009063
 8008fd8:	080090d1 	.word	0x080090d1
 8008fdc:	080090d1 	.word	0x080090d1
 8008fe0:	0800906b 	.word	0x0800906b
 8008fe4:	080090d1 	.word	0x080090d1
 8008fe8:	080090d1 	.word	0x080090d1
 8008fec:	080090d1 	.word	0x080090d1
 8008ff0:	0800907b 	.word	0x0800907b
 8008ff4:	080090d1 	.word	0x080090d1
 8008ff8:	080090d1 	.word	0x080090d1
 8008ffc:	080090d1 	.word	0x080090d1
 8009000:	080090d1 	.word	0x080090d1
 8009004:	080090d1 	.word	0x080090d1
 8009008:	080090d1 	.word	0x080090d1
 800900c:	080090d1 	.word	0x080090d1
 8009010:	0800908b 	.word	0x0800908b
 8009014:	080090d1 	.word	0x080090d1
 8009018:	080090d1 	.word	0x080090d1
 800901c:	080090d1 	.word	0x080090d1
 8009020:	080090d1 	.word	0x080090d1
 8009024:	080090d1 	.word	0x080090d1
 8009028:	080090d1 	.word	0x080090d1
 800902c:	080090d1 	.word	0x080090d1
 8009030:	080090d1 	.word	0x080090d1
 8009034:	080090d1 	.word	0x080090d1
 8009038:	080090d1 	.word	0x080090d1
 800903c:	080090d1 	.word	0x080090d1
 8009040:	080090d1 	.word	0x080090d1
 8009044:	080090d1 	.word	0x080090d1
 8009048:	080090d1 	.word	0x080090d1
 800904c:	080090d1 	.word	0x080090d1
 8009050:	080090c3 	.word	0x080090c3
 8009054:	2b40      	cmp	r3, #64	; 0x40
 8009056:	d037      	beq.n	80090c8 <UART_SetConfig+0xc44>
 8009058:	e03a      	b.n	80090d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800905a:	f7fb fc99 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 800905e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009060:	e03c      	b.n	80090dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009062:	f7fb fcab 	bl	80049bc <HAL_RCC_GetPCLK2Freq>
 8009066:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009068:	e038      	b.n	80090dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800906e:	4618      	mov	r0, r3
 8009070:	f7fc fe8e 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009078:	e030      	b.n	80090dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800907a:	f107 0318 	add.w	r3, r7, #24
 800907e:	4618      	mov	r0, r3
 8009080:	f7fc ffda 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009088:	e028      	b.n	80090dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <UART_SetConfig+0xc2c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d012      	beq.n	80090bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009096:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <UART_SetConfig+0xc2c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	08db      	lsrs	r3, r3, #3
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	4a04      	ldr	r2, [pc, #16]	; (80090b4 <UART_SetConfig+0xc30>)
 80090a2:	fa22 f303 	lsr.w	r3, r2, r3
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090a8:	e018      	b.n	80090dc <UART_SetConfig+0xc58>
 80090aa:	bf00      	nop
 80090ac:	0800e6ec 	.word	0x0800e6ec
 80090b0:	58024400 	.word	0x58024400
 80090b4:	03d09000 	.word	0x03d09000
 80090b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80090bc:	4b24      	ldr	r3, [pc, #144]	; (8009150 <UART_SetConfig+0xccc>)
 80090be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c0:	e00c      	b.n	80090dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090c2:	4b24      	ldr	r3, [pc, #144]	; (8009154 <UART_SetConfig+0xcd0>)
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c6:	e009      	b.n	80090dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ce:	e005      	b.n	80090dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80090da:	bf00      	nop
    }

    if (pclk != 0U)
 80090dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d021      	beq.n	8009126 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	4a1c      	ldr	r2, [pc, #112]	; (8009158 <UART_SetConfig+0xcd4>)
 80090e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ec:	461a      	mov	r2, r3
 80090ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	441a      	add	r2, r3
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	fbb2 f3f3 	udiv	r3, r2, r3
 8009104:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	2b0f      	cmp	r3, #15
 800910a:	d909      	bls.n	8009120 <UART_SetConfig+0xc9c>
 800910c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009112:	d205      	bcs.n	8009120 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009116:	b29a      	uxth	r2, r3
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	60da      	str	r2, [r3, #12]
 800911e:	e002      	b.n	8009126 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2201      	movs	r2, #1
 800912a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2201      	movs	r2, #1
 8009132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2200      	movs	r2, #0
 800913a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2200      	movs	r2, #0
 8009140:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009142:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009146:	4618      	mov	r0, r3
 8009148:	3748      	adds	r7, #72	; 0x48
 800914a:	46bd      	mov	sp, r7
 800914c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009150:	03d09000 	.word	0x03d09000
 8009154:	003d0900 	.word	0x003d0900
 8009158:	0800e6ec 	.word	0x0800e6ec

0800915c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00a      	beq.n	8009186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	430a      	orrs	r2, r1
 8009184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00a      	beq.n	80091a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	430a      	orrs	r2, r1
 80091a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00a      	beq.n	80091ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00a      	beq.n	80091ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f0:	f003 0310 	and.w	r3, r3, #16
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01a      	beq.n	8009272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800925a:	d10a      	bne.n	8009272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	605a      	str	r2, [r3, #4]
  }
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b098      	sub	sp, #96	; 0x60
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092b0:	f7f8 f832 	bl	8001318 <HAL_GetTick>
 80092b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0308 	and.w	r3, r3, #8
 80092c0:	2b08      	cmp	r3, #8
 80092c2:	d12f      	bne.n	8009324 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092cc:	2200      	movs	r2, #0
 80092ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f88e 	bl	80093f4 <UART_WaitOnFlagUntilTimeout>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d022      	beq.n	8009324 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	e853 3f00 	ldrex	r3, [r3]
 80092ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092f2:	653b      	str	r3, [r7, #80]	; 0x50
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fc:	647b      	str	r3, [r7, #68]	; 0x44
 80092fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800930a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e6      	bne.n	80092de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2220      	movs	r2, #32
 8009314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e063      	b.n	80093ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0304 	and.w	r3, r3, #4
 800932e:	2b04      	cmp	r3, #4
 8009330:	d149      	bne.n	80093c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009332:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800933a:	2200      	movs	r2, #0
 800933c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f857 	bl	80093f4 <UART_WaitOnFlagUntilTimeout>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d03c      	beq.n	80093c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	623b      	str	r3, [r7, #32]
   return(result);
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800936a:	633b      	str	r3, [r7, #48]	; 0x30
 800936c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e6      	bne.n	800934c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3308      	adds	r3, #8
 8009384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	e853 3f00 	ldrex	r3, [r3]
 800938c:	60fb      	str	r3, [r7, #12]
   return(result);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f023 0301 	bic.w	r3, r3, #1
 8009394:	64bb      	str	r3, [r7, #72]	; 0x48
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3308      	adds	r3, #8
 800939c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800939e:	61fa      	str	r2, [r7, #28]
 80093a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	69b9      	ldr	r1, [r7, #24]
 80093a4:	69fa      	ldr	r2, [r7, #28]
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	617b      	str	r3, [r7, #20]
   return(result);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e5      	bne.n	800937e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e012      	b.n	80093ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2220      	movs	r2, #32
 80093ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3758      	adds	r7, #88	; 0x58
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	4613      	mov	r3, r2
 8009402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009404:	e049      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800940c:	d045      	beq.n	800949a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800940e:	f7f7 ff83 	bl	8001318 <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	429a      	cmp	r2, r3
 800941c:	d302      	bcc.n	8009424 <UART_WaitOnFlagUntilTimeout+0x30>
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e048      	b.n	80094ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0304 	and.w	r3, r3, #4
 8009432:	2b00      	cmp	r3, #0
 8009434:	d031      	beq.n	800949a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	f003 0308 	and.w	r3, r3, #8
 8009440:	2b08      	cmp	r3, #8
 8009442:	d110      	bne.n	8009466 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2208      	movs	r2, #8
 800944a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 f95b 	bl	8009708 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2208      	movs	r2, #8
 8009456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e029      	b.n	80094ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009474:	d111      	bne.n	800949a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800947e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 f941 	bl	8009708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2220      	movs	r2, #32
 800948a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e00f      	b.n	80094ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69da      	ldr	r2, [r3, #28]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	4013      	ands	r3, r2
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	bf0c      	ite	eq
 80094aa:	2301      	moveq	r3, #1
 80094ac:	2300      	movne	r3, #0
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	461a      	mov	r2, r3
 80094b2:	79fb      	ldrb	r3, [r7, #7]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d0a6      	beq.n	8009406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
	...

080094c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b0a3      	sub	sp, #140	; 0x8c
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	4613      	mov	r3, r2
 80094d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	88fa      	ldrh	r2, [r7, #6]
 80094dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	88fa      	ldrh	r2, [r7, #6]
 80094e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f6:	d10e      	bne.n	8009516 <UART_Start_Receive_IT+0x52>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d105      	bne.n	800950c <UART_Start_Receive_IT+0x48>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800950a:	e02d      	b.n	8009568 <UART_Start_Receive_IT+0xa4>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	22ff      	movs	r2, #255	; 0xff
 8009510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009514:	e028      	b.n	8009568 <UART_Start_Receive_IT+0xa4>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10d      	bne.n	800953a <UART_Start_Receive_IT+0x76>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d104      	bne.n	8009530 <UART_Start_Receive_IT+0x6c>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	22ff      	movs	r2, #255	; 0xff
 800952a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800952e:	e01b      	b.n	8009568 <UART_Start_Receive_IT+0xa4>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	227f      	movs	r2, #127	; 0x7f
 8009534:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009538:	e016      	b.n	8009568 <UART_Start_Receive_IT+0xa4>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009542:	d10d      	bne.n	8009560 <UART_Start_Receive_IT+0x9c>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <UART_Start_Receive_IT+0x92>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	227f      	movs	r2, #127	; 0x7f
 8009550:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009554:	e008      	b.n	8009568 <UART_Start_Receive_IT+0xa4>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	223f      	movs	r2, #63	; 0x3f
 800955a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800955e:	e003      	b.n	8009568 <UART_Start_Receive_IT+0xa4>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2222      	movs	r2, #34	; 0x22
 8009574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3308      	adds	r3, #8
 800957e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009582:	e853 3f00 	ldrex	r3, [r3]
 8009586:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800958a:	f043 0301 	orr.w	r3, r3, #1
 800958e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3308      	adds	r3, #8
 8009598:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800959c:	673a      	str	r2, [r7, #112]	; 0x70
 800959e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80095a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80095a4:	e841 2300 	strex	r3, r2, [r1]
 80095a8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80095aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e3      	bne.n	8009578 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095b8:	d14f      	bne.n	800965a <UART_Start_Receive_IT+0x196>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095c0:	88fa      	ldrh	r2, [r7, #6]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d349      	bcc.n	800965a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ce:	d107      	bne.n	80095e0 <UART_Start_Receive_IT+0x11c>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d103      	bne.n	80095e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4a47      	ldr	r2, [pc, #284]	; (80096f8 <UART_Start_Receive_IT+0x234>)
 80095dc:	675a      	str	r2, [r3, #116]	; 0x74
 80095de:	e002      	b.n	80095e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4a46      	ldr	r2, [pc, #280]	; (80096fc <UART_Start_Receive_IT+0x238>)
 80095e4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d01a      	beq.n	8009624 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009612:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009616:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800961e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e4      	bne.n	80095ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3308      	adds	r3, #8
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800963a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3308      	adds	r3, #8
 8009642:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009644:	64ba      	str	r2, [r7, #72]	; 0x48
 8009646:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800964a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e5      	bne.n	8009624 <UART_Start_Receive_IT+0x160>
 8009658:	e046      	b.n	80096e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009662:	d107      	bne.n	8009674 <UART_Start_Receive_IT+0x1b0>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d103      	bne.n	8009674 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4a24      	ldr	r2, [pc, #144]	; (8009700 <UART_Start_Receive_IT+0x23c>)
 8009670:	675a      	str	r2, [r3, #116]	; 0x74
 8009672:	e002      	b.n	800967a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4a23      	ldr	r2, [pc, #140]	; (8009704 <UART_Start_Receive_IT+0x240>)
 8009678:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d019      	beq.n	80096b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009696:	677b      	str	r3, [r7, #116]	; 0x74
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096a0:	637b      	str	r3, [r7, #52]	; 0x34
 80096a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e6      	bne.n	8009682 <UART_Start_Receive_IT+0x1be>
 80096b4:	e018      	b.n	80096e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	613b      	str	r3, [r7, #16]
   return(result);
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f043 0320 	orr.w	r3, r3, #32
 80096ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096d4:	623b      	str	r3, [r7, #32]
 80096d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	69f9      	ldr	r1, [r7, #28]
 80096da:	6a3a      	ldr	r2, [r7, #32]
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e6      	bne.n	80096b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	378c      	adds	r7, #140	; 0x8c
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	08009f29 	.word	0x08009f29
 80096fc:	08009bc9 	.word	0x08009bc9
 8009700:	08009a11 	.word	0x08009a11
 8009704:	08009859 	.word	0x08009859

08009708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009708:	b480      	push	{r7}
 800970a:	b095      	sub	sp, #84	; 0x54
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	461a      	mov	r2, r3
 800972c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800972e:	643b      	str	r3, [r7, #64]	; 0x40
 8009730:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009732:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009736:	e841 2300 	strex	r3, r2, [r1]
 800973a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1e6      	bne.n	8009710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3308      	adds	r3, #8
 8009748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	e853 3f00 	ldrex	r3, [r3]
 8009750:	61fb      	str	r3, [r7, #28]
   return(result);
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	4b1e      	ldr	r3, [pc, #120]	; (80097d0 <UART_EndRxTransfer+0xc8>)
 8009756:	4013      	ands	r3, r2
 8009758:	64bb      	str	r3, [r7, #72]	; 0x48
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009764:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e5      	bne.n	8009742 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977a:	2b01      	cmp	r3, #1
 800977c:	d118      	bne.n	80097b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	60bb      	str	r3, [r7, #8]
   return(result);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f023 0310 	bic.w	r3, r3, #16
 8009792:	647b      	str	r3, [r7, #68]	; 0x44
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	461a      	mov	r2, r3
 800979a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6979      	ldr	r1, [r7, #20]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	613b      	str	r3, [r7, #16]
   return(result);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e6      	bne.n	800977e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80097c4:	bf00      	nop
 80097c6:	3754      	adds	r7, #84	; 0x54
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	effffffe 	.word	0xeffffffe

080097d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7fe fe30 	bl	8008458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097f8:	bf00      	nop
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b088      	sub	sp, #32
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	e853 3f00 	ldrex	r3, [r3]
 8009814:	60bb      	str	r3, [r7, #8]
   return(result);
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800981c:	61fb      	str	r3, [r7, #28]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	61bb      	str	r3, [r7, #24]
 8009828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	6979      	ldr	r1, [r7, #20]
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	613b      	str	r3, [r7, #16]
   return(result);
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e6      	bne.n	8009808 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7fe fdfb 	bl	8008444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800984e:	bf00      	nop
 8009850:	3720      	adds	r7, #32
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b09c      	sub	sp, #112	; 0x70
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009866:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009870:	2b22      	cmp	r3, #34	; 0x22
 8009872:	f040 80be 	bne.w	80099f2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009880:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009884:	b2d9      	uxtb	r1, r3
 8009886:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800988a:	b2da      	uxtb	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009890:	400a      	ands	r2, r1
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989a:	1c5a      	adds	r2, r3, #1
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f040 80a1 	bne.w	8009a02 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098de:	65bb      	str	r3, [r7, #88]	; 0x58
 80098e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e6      	bne.n	80098c0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3308      	adds	r3, #8
 80098f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	e853 3f00 	ldrex	r3, [r3]
 8009900:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009904:	f023 0301 	bic.w	r3, r3, #1
 8009908:	667b      	str	r3, [r7, #100]	; 0x64
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3308      	adds	r3, #8
 8009910:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009912:	647a      	str	r2, [r7, #68]	; 0x44
 8009914:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e5      	bne.n	80098f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2220      	movs	r2, #32
 800992a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a33      	ldr	r2, [pc, #204]	; (8009a0c <UART_RxISR_8BIT+0x1b4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d01f      	beq.n	8009984 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d018      	beq.n	8009984 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	623b      	str	r3, [r7, #32]
   return(result);
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009966:	663b      	str	r3, [r7, #96]	; 0x60
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	461a      	mov	r2, r3
 800996e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009970:	633b      	str	r3, [r7, #48]	; 0x30
 8009972:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e6      	bne.n	8009952 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009988:	2b01      	cmp	r3, #1
 800998a:	d12e      	bne.n	80099ea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	e853 3f00 	ldrex	r3, [r3]
 800999e:	60fb      	str	r3, [r7, #12]
   return(result);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f023 0310 	bic.w	r3, r3, #16
 80099a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099b0:	61fb      	str	r3, [r7, #28]
 80099b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b4:	69b9      	ldr	r1, [r7, #24]
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	e841 2300 	strex	r3, r2, [r1]
 80099bc:	617b      	str	r3, [r7, #20]
   return(result);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e6      	bne.n	8009992 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	f003 0310 	and.w	r3, r3, #16
 80099ce:	2b10      	cmp	r3, #16
 80099d0:	d103      	bne.n	80099da <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2210      	movs	r2, #16
 80099d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7fe fd42 	bl	800846c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099e8:	e00b      	b.n	8009a02 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7f7 f8f6 	bl	8000bdc <HAL_UART_RxCpltCallback>
}
 80099f0:	e007      	b.n	8009a02 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	699a      	ldr	r2, [r3, #24]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f042 0208 	orr.w	r2, r2, #8
 8009a00:	619a      	str	r2, [r3, #24]
}
 8009a02:	bf00      	nop
 8009a04:	3770      	adds	r7, #112	; 0x70
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	58000c00 	.word	0x58000c00

08009a10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b09c      	sub	sp, #112	; 0x70
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a28:	2b22      	cmp	r3, #34	; 0x22
 8009a2a:	f040 80be 	bne.w	8009baa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a3c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009a42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009a46:	4013      	ands	r3, r2
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a52:	1c9a      	adds	r2, r3, #2
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	3b01      	subs	r3, #1
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f040 80a1 	bne.w	8009bba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a80:	e853 3f00 	ldrex	r3, [r3]
 8009a84:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	461a      	mov	r2, r3
 8009a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a96:	657b      	str	r3, [r7, #84]	; 0x54
 8009a98:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a9e:	e841 2300 	strex	r3, r2, [r1]
 8009aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1e6      	bne.n	8009a78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3308      	adds	r3, #8
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab4:	e853 3f00 	ldrex	r3, [r3]
 8009ab8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	f023 0301 	bic.w	r3, r3, #1
 8009ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009aca:	643a      	str	r2, [r7, #64]	; 0x40
 8009acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1e5      	bne.n	8009aaa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a33      	ldr	r2, [pc, #204]	; (8009bc4 <UART_RxISR_16BIT+0x1b4>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d01f      	beq.n	8009b3c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d018      	beq.n	8009b3c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	e853 3f00 	ldrex	r3, [r3]
 8009b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	461a      	mov	r2, r3
 8009b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b2a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b30:	e841 2300 	strex	r3, r2, [r1]
 8009b34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1e6      	bne.n	8009b0a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d12e      	bne.n	8009ba2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	f023 0310 	bic.w	r3, r3, #16
 8009b5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6979      	ldr	r1, [r7, #20]
 8009b6e:	69ba      	ldr	r2, [r7, #24]
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	613b      	str	r3, [r7, #16]
   return(result);
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e6      	bne.n	8009b4a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b10      	cmp	r3, #16
 8009b88:	d103      	bne.n	8009b92 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2210      	movs	r2, #16
 8009b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7fe fc66 	bl	800846c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ba0:	e00b      	b.n	8009bba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7f7 f81a 	bl	8000bdc <HAL_UART_RxCpltCallback>
}
 8009ba8:	e007      	b.n	8009bba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	699a      	ldr	r2, [r3, #24]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f042 0208 	orr.w	r2, r2, #8
 8009bb8:	619a      	str	r2, [r3, #24]
}
 8009bba:	bf00      	nop
 8009bbc:	3770      	adds	r7, #112	; 0x70
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	58000c00 	.word	0x58000c00

08009bc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b0ac      	sub	sp, #176	; 0xb0
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009bd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bfe:	2b22      	cmp	r3, #34	; 0x22
 8009c00:	f040 8180 	bne.w	8009f04 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c0a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c0e:	e123      	b.n	8009e58 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c1a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009c1e:	b2d9      	uxtb	r1, r3
 8009c20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c2a:	400a      	ands	r2, r1
 8009c2c:	b2d2      	uxtb	r2, r2
 8009c2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	3b01      	subs	r3, #1
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c5a:	f003 0307 	and.w	r3, r3, #7
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d053      	beq.n	8009d0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d011      	beq.n	8009c92 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00b      	beq.n	8009c92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c88:	f043 0201 	orr.w	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d011      	beq.n	8009cc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00b      	beq.n	8009cc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb8:	f043 0204 	orr.w	r2, r3, #4
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cc6:	f003 0304 	and.w	r3, r3, #4
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d011      	beq.n	8009cf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00b      	beq.n	8009cf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2204      	movs	r2, #4
 8009ce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce8:	f043 0202 	orr.w	r2, r3, #2
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d006      	beq.n	8009d0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7fe fbab 	bl	8008458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f040 80a0 	bne.w	8009e58 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	461a      	mov	r2, r3
 8009d36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d3c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009d40:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009d42:	e841 2300 	strex	r3, r2, [r1]
 8009d46:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e4      	bne.n	8009d18 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3308      	adds	r3, #8
 8009d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d60:	4b6e      	ldr	r3, [pc, #440]	; (8009f1c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009d62:	4013      	ands	r3, r2
 8009d64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d72:	66ba      	str	r2, [r7, #104]	; 0x68
 8009d74:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009d78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e3      	bne.n	8009d4e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a60      	ldr	r2, [pc, #384]	; (8009f20 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d021      	beq.n	8009de8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d01a      	beq.n	8009de8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8009dd6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009dda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e4      	bne.n	8009db2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d130      	bne.n	8009e52 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfe:	e853 3f00 	ldrex	r3, [r3]
 8009e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e06:	f023 0310 	bic.w	r3, r3, #16
 8009e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e18:	643b      	str	r3, [r7, #64]	; 0x40
 8009e1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e20:	e841 2300 	strex	r3, r2, [r1]
 8009e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e4      	bne.n	8009df6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	f003 0310 	and.w	r3, r3, #16
 8009e36:	2b10      	cmp	r3, #16
 8009e38:	d103      	bne.n	8009e42 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2210      	movs	r2, #16
 8009e40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7fe fb0e 	bl	800846c <HAL_UARTEx_RxEventCallback>
 8009e50:	e002      	b.n	8009e58 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7f6 fec2 	bl	8000bdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e64:	f003 0320 	and.w	r3, r3, #32
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f47f aed1 	bne.w	8009c10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d049      	beq.n	8009f14 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e86:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d242      	bcs.n	8009f14 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3308      	adds	r3, #8
 8009e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	e853 3f00 	ldrex	r3, [r3]
 8009e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3308      	adds	r3, #8
 8009eae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e3      	bne.n	8009e8e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a16      	ldr	r2, [pc, #88]	; (8009f24 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009eca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	e853 3f00 	ldrex	r3, [r3]
 8009ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f043 0320 	orr.w	r3, r3, #32
 8009ee0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009eee:	61bb      	str	r3, [r7, #24]
 8009ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	6979      	ldr	r1, [r7, #20]
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	613b      	str	r3, [r7, #16]
   return(result);
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e4      	bne.n	8009ecc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f02:	e007      	b.n	8009f14 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	699a      	ldr	r2, [r3, #24]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0208 	orr.w	r2, r2, #8
 8009f12:	619a      	str	r2, [r3, #24]
}
 8009f14:	bf00      	nop
 8009f16:	37b0      	adds	r7, #176	; 0xb0
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	effffffe 	.word	0xeffffffe
 8009f20:	58000c00 	.word	0x58000c00
 8009f24:	08009859 	.word	0x08009859

08009f28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b0ae      	sub	sp, #184	; 0xb8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f36:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69db      	ldr	r3, [r3, #28]
 8009f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f5e:	2b22      	cmp	r3, #34	; 0x22
 8009f60:	f040 8184 	bne.w	800a26c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f6a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f6e:	e127      	b.n	800a1c0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009f82:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009f86:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f98:	1c9a      	adds	r2, r3, #2
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009fba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fbe:	f003 0307 	and.w	r3, r3, #7
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d053      	beq.n	800a06e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d011      	beq.n	8009ff6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00b      	beq.n	8009ff6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fec:	f043 0201 	orr.w	r2, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ffa:	f003 0302 	and.w	r3, r3, #2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d011      	beq.n	800a026 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00b      	beq.n	800a026 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2202      	movs	r2, #2
 800a014:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a01c:	f043 0204 	orr.w	r2, r3, #4
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d011      	beq.n	800a056 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00b      	beq.n	800a056 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2204      	movs	r2, #4
 800a044:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a04c:	f043 0202 	orr.w	r2, r3, #2
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d006      	beq.n	800a06e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7fe f9f9 	bl	8008458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	f040 80a2 	bne.w	800a1c0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a084:	e853 3f00 	ldrex	r3, [r3]
 800a088:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a08a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a08c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a09e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0a2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0aa:	e841 2300 	strex	r3, r2, [r1]
 800a0ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1e2      	bne.n	800a07c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0c0:	e853 3f00 	ldrex	r3, [r3]
 800a0c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0c8:	4b6e      	ldr	r3, [pc, #440]	; (800a284 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a0da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0e2:	e841 2300 	strex	r3, r2, [r1]
 800a0e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1e3      	bne.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a60      	ldr	r2, [pc, #384]	; (800a288 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d021      	beq.n	800a150 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d01a      	beq.n	800a150 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a12a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a12e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a13c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a13e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e4      	bne.n	800a11a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a154:	2b01      	cmp	r3, #1
 800a156:	d130      	bne.n	800a1ba <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a166:	e853 3f00 	ldrex	r3, [r3]
 800a16a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a16e:	f023 0310 	bic.w	r3, r3, #16
 800a172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a180:	647b      	str	r3, [r7, #68]	; 0x44
 800a182:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e4      	bne.n	800a15e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	69db      	ldr	r3, [r3, #28]
 800a19a:	f003 0310 	and.w	r3, r3, #16
 800a19e:	2b10      	cmp	r3, #16
 800a1a0:	d103      	bne.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2210      	movs	r2, #16
 800a1a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7fe f95a 	bl	800846c <HAL_UARTEx_RxEventCallback>
 800a1b8:	e002      	b.n	800a1c0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7f6 fd0e 	bl	8000bdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a1c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d006      	beq.n	800a1d6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a1c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a1cc:	f003 0320 	and.w	r3, r3, #32
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f47f aecd 	bne.w	8009f70 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d049      	beq.n	800a27c <UART_RxISR_16BIT_FIFOEN+0x354>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a1ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d242      	bcs.n	800a27c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3308      	adds	r3, #8
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	e853 3f00 	ldrex	r3, [r3]
 800a204:	623b      	str	r3, [r7, #32]
   return(result);
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a20c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3308      	adds	r3, #8
 800a216:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a21a:	633a      	str	r2, [r7, #48]	; 0x30
 800a21c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e3      	bne.n	800a1f6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a16      	ldr	r2, [pc, #88]	; (800a28c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a232:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	e853 3f00 	ldrex	r3, [r3]
 800a240:	60fb      	str	r3, [r7, #12]
   return(result);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f043 0320 	orr.w	r3, r3, #32
 800a248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a256:	61fb      	str	r3, [r7, #28]
 800a258:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	69b9      	ldr	r1, [r7, #24]
 800a25c:	69fa      	ldr	r2, [r7, #28]
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	617b      	str	r3, [r7, #20]
   return(result);
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e4      	bne.n	800a234 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a26a:	e007      	b.n	800a27c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	699a      	ldr	r2, [r3, #24]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f042 0208 	orr.w	r2, r2, #8
 800a27a:	619a      	str	r2, [r3, #24]
}
 800a27c:	bf00      	nop
 800a27e:	37b8      	adds	r7, #184	; 0xb8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	effffffe 	.word	0xeffffffe
 800a288:	58000c00 	.word	0x58000c00
 800a28c:	08009a11 	.word	0x08009a11

0800a290 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e027      	b.n	800a332 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2224      	movs	r2, #36	; 0x24
 800a2ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0201 	bic.w	r2, r2, #1
 800a308:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a310:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2220      	movs	r2, #32
 800a324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d101      	bne.n	800a356 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a352:	2302      	movs	r3, #2
 800a354:	e02d      	b.n	800a3b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2224      	movs	r2, #36	; 0x24
 800a362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0201 	bic.w	r2, r2, #1
 800a37c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f850 	bl	800a438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	e02d      	b.n	800a42e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2224      	movs	r2, #36	; 0x24
 800a3de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f022 0201 	bic.w	r2, r2, #1
 800a3f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	683a      	ldr	r2, [r7, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f812 	bl	800a438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2220      	movs	r2, #32
 800a420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a444:	2b00      	cmp	r3, #0
 800a446:	d108      	bne.n	800a45a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a458:	e031      	b.n	800a4be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a45a:	2310      	movs	r3, #16
 800a45c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a45e:	2310      	movs	r3, #16
 800a460:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	0e5b      	lsrs	r3, r3, #25
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	f003 0307 	and.w	r3, r3, #7
 800a470:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	0f5b      	lsrs	r3, r3, #29
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	f003 0307 	and.w	r3, r3, #7
 800a480:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	7b3a      	ldrb	r2, [r7, #12]
 800a486:	4911      	ldr	r1, [pc, #68]	; (800a4cc <UARTEx_SetNbDataToProcess+0x94>)
 800a488:	5c8a      	ldrb	r2, [r1, r2]
 800a48a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a48e:	7b3a      	ldrb	r2, [r7, #12]
 800a490:	490f      	ldr	r1, [pc, #60]	; (800a4d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a492:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a494:	fb93 f3f2 	sdiv	r3, r3, r2
 800a498:	b29a      	uxth	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
 800a4a2:	7b7a      	ldrb	r2, [r7, #13]
 800a4a4:	4909      	ldr	r1, [pc, #36]	; (800a4cc <UARTEx_SetNbDataToProcess+0x94>)
 800a4a6:	5c8a      	ldrb	r2, [r1, r2]
 800a4a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4ac:	7b7a      	ldrb	r2, [r7, #13]
 800a4ae:	4908      	ldr	r1, [pc, #32]	; (800a4d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a4b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	0800e704 	.word	0x0800e704
 800a4d0:	0800e70c 	.word	0x0800e70c

0800a4d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	f107 001c 	add.w	r0, r7, #28
 800a4e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d120      	bne.n	800a52e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68da      	ldr	r2, [r3, #12]
 800a4fc:	4b2a      	ldr	r3, [pc, #168]	; (800a5a8 <USB_CoreInit+0xd4>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a512:	2b01      	cmp	r3, #1
 800a514:	d105      	bne.n	800a522 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f001 faf8 	bl	800bb18 <USB_CoreReset>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]
 800a52c:	e01a      	b.n	800a564 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f001 faec 	bl	800bb18 <USB_CoreReset>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	639a      	str	r2, [r3, #56]	; 0x38
 800a556:	e005      	b.n	800a564 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	2b01      	cmp	r3, #1
 800a568:	d116      	bne.n	800a598 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a56e:	b29a      	uxth	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a578:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <USB_CoreInit+0xd8>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f043 0206 	orr.w	r2, r3, #6
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f043 0220 	orr.w	r2, r3, #32
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5a4:	b004      	add	sp, #16
 800a5a6:	4770      	bx	lr
 800a5a8:	ffbdffbf 	.word	0xffbdffbf
 800a5ac:	03ee0000 	.word	0x03ee0000

0800a5b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d165      	bne.n	800a690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	4a41      	ldr	r2, [pc, #260]	; (800a6cc <USB_SetTurnaroundTime+0x11c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d906      	bls.n	800a5da <USB_SetTurnaroundTime+0x2a>
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4a40      	ldr	r2, [pc, #256]	; (800a6d0 <USB_SetTurnaroundTime+0x120>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d202      	bcs.n	800a5da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a5d4:	230f      	movs	r3, #15
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	e062      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	4a3c      	ldr	r2, [pc, #240]	; (800a6d0 <USB_SetTurnaroundTime+0x120>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d306      	bcc.n	800a5f0 <USB_SetTurnaroundTime+0x40>
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	4a3b      	ldr	r2, [pc, #236]	; (800a6d4 <USB_SetTurnaroundTime+0x124>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d202      	bcs.n	800a5f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a5ea:	230e      	movs	r3, #14
 800a5ec:	617b      	str	r3, [r7, #20]
 800a5ee:	e057      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	4a38      	ldr	r2, [pc, #224]	; (800a6d4 <USB_SetTurnaroundTime+0x124>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d306      	bcc.n	800a606 <USB_SetTurnaroundTime+0x56>
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	4a37      	ldr	r2, [pc, #220]	; (800a6d8 <USB_SetTurnaroundTime+0x128>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d202      	bcs.n	800a606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a600:	230d      	movs	r3, #13
 800a602:	617b      	str	r3, [r7, #20]
 800a604:	e04c      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	4a33      	ldr	r2, [pc, #204]	; (800a6d8 <USB_SetTurnaroundTime+0x128>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d306      	bcc.n	800a61c <USB_SetTurnaroundTime+0x6c>
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	4a32      	ldr	r2, [pc, #200]	; (800a6dc <USB_SetTurnaroundTime+0x12c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d802      	bhi.n	800a61c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a616:	230c      	movs	r3, #12
 800a618:	617b      	str	r3, [r7, #20]
 800a61a:	e041      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	4a2f      	ldr	r2, [pc, #188]	; (800a6dc <USB_SetTurnaroundTime+0x12c>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d906      	bls.n	800a632 <USB_SetTurnaroundTime+0x82>
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	4a2e      	ldr	r2, [pc, #184]	; (800a6e0 <USB_SetTurnaroundTime+0x130>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d802      	bhi.n	800a632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a62c:	230b      	movs	r3, #11
 800a62e:	617b      	str	r3, [r7, #20]
 800a630:	e036      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	4a2a      	ldr	r2, [pc, #168]	; (800a6e0 <USB_SetTurnaroundTime+0x130>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d906      	bls.n	800a648 <USB_SetTurnaroundTime+0x98>
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	4a29      	ldr	r2, [pc, #164]	; (800a6e4 <USB_SetTurnaroundTime+0x134>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d802      	bhi.n	800a648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a642:	230a      	movs	r3, #10
 800a644:	617b      	str	r3, [r7, #20]
 800a646:	e02b      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	4a26      	ldr	r2, [pc, #152]	; (800a6e4 <USB_SetTurnaroundTime+0x134>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d906      	bls.n	800a65e <USB_SetTurnaroundTime+0xae>
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4a25      	ldr	r2, [pc, #148]	; (800a6e8 <USB_SetTurnaroundTime+0x138>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d202      	bcs.n	800a65e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a658:	2309      	movs	r3, #9
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	e020      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	4a21      	ldr	r2, [pc, #132]	; (800a6e8 <USB_SetTurnaroundTime+0x138>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d306      	bcc.n	800a674 <USB_SetTurnaroundTime+0xc4>
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	4a20      	ldr	r2, [pc, #128]	; (800a6ec <USB_SetTurnaroundTime+0x13c>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d802      	bhi.n	800a674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a66e:	2308      	movs	r3, #8
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	e015      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4a1d      	ldr	r2, [pc, #116]	; (800a6ec <USB_SetTurnaroundTime+0x13c>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d906      	bls.n	800a68a <USB_SetTurnaroundTime+0xda>
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	4a1c      	ldr	r2, [pc, #112]	; (800a6f0 <USB_SetTurnaroundTime+0x140>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d202      	bcs.n	800a68a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a684:	2307      	movs	r3, #7
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	e00a      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a68a:	2306      	movs	r3, #6
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	e007      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a690:	79fb      	ldrb	r3, [r7, #7]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d102      	bne.n	800a69c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a696:	2309      	movs	r3, #9
 800a698:	617b      	str	r3, [r7, #20]
 800a69a:	e001      	b.n	800a6a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a69c:	2309      	movs	r3, #9
 800a69e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	68da      	ldr	r2, [r3, #12]
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	029b      	lsls	r3, r3, #10
 800a6b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	371c      	adds	r7, #28
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	00d8acbf 	.word	0x00d8acbf
 800a6d0:	00e4e1c0 	.word	0x00e4e1c0
 800a6d4:	00f42400 	.word	0x00f42400
 800a6d8:	01067380 	.word	0x01067380
 800a6dc:	011a499f 	.word	0x011a499f
 800a6e0:	01312cff 	.word	0x01312cff
 800a6e4:	014ca43f 	.word	0x014ca43f
 800a6e8:	016e3600 	.word	0x016e3600
 800a6ec:	01a6ab1f 	.word	0x01a6ab1f
 800a6f0:	01e84800 	.word	0x01e84800

0800a6f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f043 0201 	orr.w	r2, r3, #1
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a716:	b480      	push	{r7}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f023 0201 	bic.w	r2, r3, #1
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a744:	2300      	movs	r3, #0
 800a746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d115      	bne.n	800a786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a766:	2001      	movs	r0, #1
 800a768:	f7f6 fde2 	bl	8001330 <HAL_Delay>
      ms++;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 f93f 	bl	800b9f6 <USB_GetMode>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d01e      	beq.n	800a7bc <USB_SetCurrentMode+0x84>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b31      	cmp	r3, #49	; 0x31
 800a782:	d9f0      	bls.n	800a766 <USB_SetCurrentMode+0x2e>
 800a784:	e01a      	b.n	800a7bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a786:	78fb      	ldrb	r3, [r7, #3]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d115      	bne.n	800a7b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a798:	2001      	movs	r0, #1
 800a79a:	f7f6 fdc9 	bl	8001330 <HAL_Delay>
      ms++;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 f926 	bl	800b9f6 <USB_GetMode>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d005      	beq.n	800a7bc <USB_SetCurrentMode+0x84>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b31      	cmp	r3, #49	; 0x31
 800a7b4:	d9f0      	bls.n	800a798 <USB_SetCurrentMode+0x60>
 800a7b6:	e001      	b.n	800a7bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e005      	b.n	800a7c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b32      	cmp	r3, #50	; 0x32
 800a7c0:	d101      	bne.n	800a7c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e000      	b.n	800a7c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b086      	sub	sp, #24
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a7de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	613b      	str	r3, [r7, #16]
 800a7ee:	e009      	b.n	800a804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	3340      	adds	r3, #64	; 0x40
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	3301      	adds	r3, #1
 800a802:	613b      	str	r3, [r7, #16]
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	2b0e      	cmp	r3, #14
 800a808:	d9f2      	bls.n	800a7f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d11c      	bne.n	800a84a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a81e:	f043 0302 	orr.w	r3, r3, #2
 800a822:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a828:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	e005      	b.n	800a856 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a85c:	461a      	mov	r2, r3
 800a85e:	2300      	movs	r3, #0
 800a860:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a868:	4619      	mov	r1, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a870:	461a      	mov	r2, r3
 800a872:	680b      	ldr	r3, [r1, #0]
 800a874:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d10c      	bne.n	800a896 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d104      	bne.n	800a88c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a882:	2100      	movs	r1, #0
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f965 	bl	800ab54 <USB_SetDevSpeed>
 800a88a:	e008      	b.n	800a89e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a88c:	2101      	movs	r1, #1
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f960 	bl	800ab54 <USB_SetDevSpeed>
 800a894:	e003      	b.n	800a89e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a896:	2103      	movs	r1, #3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f95b 	bl	800ab54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a89e:	2110      	movs	r1, #16
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f8f3 	bl	800aa8c <USB_FlushTxFifo>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f91f 	bl	800aaf4 <USB_FlushRxFifo>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8de:	461a      	mov	r2, r3
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	e043      	b.n	800a972 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	015a      	lsls	r2, r3, #5
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a900:	d118      	bne.n	800a934 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	015a      	lsls	r2, r3, #5
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a914:	461a      	mov	r2, r3
 800a916:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	e013      	b.n	800a946 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a92a:	461a      	mov	r2, r3
 800a92c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	e008      	b.n	800a946 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a940:	461a      	mov	r2, r3
 800a942:	2300      	movs	r3, #0
 800a944:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a952:	461a      	mov	r2, r3
 800a954:	2300      	movs	r3, #0
 800a956:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a964:	461a      	mov	r2, r3
 800a966:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a96a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	3301      	adds	r3, #1
 800a970:	613b      	str	r3, [r7, #16]
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	429a      	cmp	r2, r3
 800a978:	d3b7      	bcc.n	800a8ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a97a:	2300      	movs	r3, #0
 800a97c:	613b      	str	r3, [r7, #16]
 800a97e:	e043      	b.n	800aa08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	015a      	lsls	r2, r3, #5
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a996:	d118      	bne.n	800a9ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	e013      	b.n	800a9dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	015a      	lsls	r2, r3, #5
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9c6:	6013      	str	r3, [r2, #0]
 800a9c8:	e008      	b.n	800a9dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	015a      	lsls	r2, r3, #5
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	2300      	movs	r3, #0
 800a9da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	015a      	lsls	r2, r3, #5
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	3301      	adds	r3, #1
 800aa06:	613b      	str	r3, [r7, #16]
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d3b7      	bcc.n	800a980 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aa30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d105      	bne.n	800aa44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	f043 0210 	orr.w	r2, r3, #16
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	699a      	ldr	r2, [r3, #24]
 800aa48:	4b0e      	ldr	r3, [pc, #56]	; (800aa84 <USB_DevInit+0x2b4>)
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d005      	beq.n	800aa62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	f043 0208 	orr.w	r2, r3, #8
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d105      	bne.n	800aa74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	699a      	ldr	r2, [r3, #24]
 800aa6c:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <USB_DevInit+0x2b8>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa80:	b004      	add	sp, #16
 800aa82:	4770      	bx	lr
 800aa84:	803c3800 	.word	0x803c3800
 800aa88:	40000004 	.word	0x40000004

0800aa8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa96:	2300      	movs	r3, #0
 800aa98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4a13      	ldr	r2, [pc, #76]	; (800aaf0 <USB_FlushTxFifo+0x64>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d901      	bls.n	800aaac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e01b      	b.n	800aae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	daf2      	bge.n	800aa9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aab4:	2300      	movs	r3, #0
 800aab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	019b      	lsls	r3, r3, #6
 800aabc:	f043 0220 	orr.w	r2, r3, #32
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	3301      	adds	r3, #1
 800aac8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4a08      	ldr	r2, [pc, #32]	; (800aaf0 <USB_FlushTxFifo+0x64>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d901      	bls.n	800aad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e006      	b.n	800aae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	f003 0320 	and.w	r3, r3, #32
 800aade:	2b20      	cmp	r3, #32
 800aae0:	d0f0      	beq.n	800aac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	00030d40 	.word	0x00030d40

0800aaf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3301      	adds	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4a11      	ldr	r2, [pc, #68]	; (800ab50 <USB_FlushRxFifo+0x5c>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d901      	bls.n	800ab12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e018      	b.n	800ab44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	daf2      	bge.n	800ab00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2210      	movs	r2, #16
 800ab22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3301      	adds	r3, #1
 800ab28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	4a08      	ldr	r2, [pc, #32]	; (800ab50 <USB_FlushRxFifo+0x5c>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d901      	bls.n	800ab36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e006      	b.n	800ab44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	f003 0310 	and.w	r3, r3, #16
 800ab3e:	2b10      	cmp	r3, #16
 800ab40:	d0f0      	beq.n	800ab24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	00030d40 	.word	0x00030d40

0800ab54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab74:	4313      	orrs	r3, r2
 800ab76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b087      	sub	sp, #28
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f003 0306 	and.w	r3, r3, #6
 800ab9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d102      	bne.n	800abac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aba6:	2300      	movs	r3, #0
 800aba8:	75fb      	strb	r3, [r7, #23]
 800abaa:	e00a      	b.n	800abc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d002      	beq.n	800abb8 <USB_GetDevSpeed+0x32>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b06      	cmp	r3, #6
 800abb6:	d102      	bne.n	800abbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800abb8:	2302      	movs	r3, #2
 800abba:	75fb      	strb	r3, [r7, #23]
 800abbc:	e001      	b.n	800abc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800abbe:	230f      	movs	r3, #15
 800abc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	371c      	adds	r7, #28
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	785b      	ldrb	r3, [r3, #1]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d139      	bne.n	800ac60 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf2:	69da      	ldr	r2, [r3, #28]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	f003 030f 	and.w	r3, r3, #15
 800abfc:	2101      	movs	r1, #1
 800abfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	68f9      	ldr	r1, [r7, #12]
 800ac06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	015a      	lsls	r2, r3, #5
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d153      	bne.n	800accc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	791b      	ldrb	r3, [r3, #4]
 800ac3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	059b      	lsls	r3, r3, #22
 800ac46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac48:	431a      	orrs	r2, r3
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	0159      	lsls	r1, r3, #5
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	440b      	add	r3, r1
 800ac52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac56:	4619      	mov	r1, r3
 800ac58:	4b20      	ldr	r3, [pc, #128]	; (800acdc <USB_ActivateEndpoint+0x10c>)
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	600b      	str	r3, [r1, #0]
 800ac5e:	e035      	b.n	800accc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac66:	69da      	ldr	r2, [r3, #28]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	f003 030f 	and.w	r3, r3, #15
 800ac70:	2101      	movs	r1, #1
 800ac72:	fa01 f303 	lsl.w	r3, r1, r3
 800ac76:	041b      	lsls	r3, r3, #16
 800ac78:	68f9      	ldr	r1, [r7, #12]
 800ac7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	015a      	lsls	r2, r3, #5
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	4413      	add	r3, r2
 800ac8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d119      	bne.n	800accc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	791b      	ldrb	r3, [r3, #4]
 800acb2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acb4:	430b      	orrs	r3, r1
 800acb6:	431a      	orrs	r2, r3
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	0159      	lsls	r1, r3, #5
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	440b      	add	r3, r1
 800acc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc4:	4619      	mov	r1, r3
 800acc6:	4b05      	ldr	r3, [pc, #20]	; (800acdc <USB_ActivateEndpoint+0x10c>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	10008000 	.word	0x10008000

0800ace0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	785b      	ldrb	r3, [r3, #1]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d161      	bne.n	800adc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad12:	d11f      	bne.n	800ad54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	015a      	lsls	r2, r3, #5
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	0151      	lsls	r1, r2, #5
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	440a      	add	r2, r1
 800ad2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	015a      	lsls	r2, r3, #5
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	0151      	lsls	r1, r2, #5
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	440a      	add	r2, r1
 800ad4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	f003 030f 	and.w	r3, r3, #15
 800ad64:	2101      	movs	r1, #1
 800ad66:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	43db      	mvns	r3, r3
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad74:	4013      	ands	r3, r2
 800ad76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad7e:	69da      	ldr	r2, [r3, #28]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	f003 030f 	and.w	r3, r3, #15
 800ad88:	2101      	movs	r1, #1
 800ad8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	43db      	mvns	r3, r3
 800ad92:	68f9      	ldr	r1, [r7, #12]
 800ad94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad98:	4013      	ands	r3, r2
 800ad9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	015a      	lsls	r2, r3, #5
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4413      	add	r3, r2
 800ada4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	0159      	lsls	r1, r3, #5
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	440b      	add	r3, r1
 800adb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb6:	4619      	mov	r1, r3
 800adb8:	4b35      	ldr	r3, [pc, #212]	; (800ae90 <USB_DeactivateEndpoint+0x1b0>)
 800adba:	4013      	ands	r3, r2
 800adbc:	600b      	str	r3, [r1, #0]
 800adbe:	e060      	b.n	800ae82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800add2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800add6:	d11f      	bne.n	800ae18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	0151      	lsls	r1, r2, #5
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	440a      	add	r2, r1
 800adee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800adf6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	015a      	lsls	r2, r3, #5
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	0151      	lsls	r1, r2, #5
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	440a      	add	r2, r1
 800ae0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	f003 030f 	and.w	r3, r3, #15
 800ae28:	2101      	movs	r1, #1
 800ae2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae2e:	041b      	lsls	r3, r3, #16
 800ae30:	43db      	mvns	r3, r3
 800ae32:	68f9      	ldr	r1, [r7, #12]
 800ae34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae38:	4013      	ands	r3, r2
 800ae3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae42:	69da      	ldr	r2, [r3, #28]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	f003 030f 	and.w	r3, r3, #15
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae52:	041b      	lsls	r3, r3, #16
 800ae54:	43db      	mvns	r3, r3
 800ae56:	68f9      	ldr	r1, [r7, #12]
 800ae58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	0159      	lsls	r1, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	440b      	add	r3, r1
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <USB_DeactivateEndpoint+0x1b4>)
 800ae7e:	4013      	ands	r3, r2
 800ae80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	ec337800 	.word	0xec337800
 800ae94:	eff37800 	.word	0xeff37800

0800ae98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08a      	sub	sp, #40	; 0x28
 800ae9c:	af02      	add	r7, sp, #8
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	4613      	mov	r3, r2
 800aea4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	785b      	ldrb	r3, [r3, #1]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	f040 8181 	bne.w	800b1bc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d132      	bne.n	800af28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	015a      	lsls	r2, r3, #5
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4413      	add	r3, r2
 800aeca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aece:	691a      	ldr	r2, [r3, #16]
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	0159      	lsls	r1, r3, #5
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	440b      	add	r3, r1
 800aed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aedc:	4619      	mov	r1, r3
 800aede:	4ba5      	ldr	r3, [pc, #660]	; (800b174 <USB_EPStartXfer+0x2dc>)
 800aee0:	4013      	ands	r3, r2
 800aee2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	69ba      	ldr	r2, [r7, #24]
 800aef4:	0151      	lsls	r1, r2, #5
 800aef6:	69fa      	ldr	r2, [r7, #28]
 800aef8:	440a      	add	r2, r1
 800aefa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aefe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af10:	691a      	ldr	r2, [r3, #16]
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	0159      	lsls	r1, r3, #5
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	440b      	add	r3, r1
 800af1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1e:	4619      	mov	r1, r3
 800af20:	4b95      	ldr	r3, [pc, #596]	; (800b178 <USB_EPStartXfer+0x2e0>)
 800af22:	4013      	ands	r3, r2
 800af24:	610b      	str	r3, [r1, #16]
 800af26:	e092      	b.n	800b04e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af34:	691a      	ldr	r2, [r3, #16]
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	0159      	lsls	r1, r3, #5
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	440b      	add	r3, r1
 800af3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af42:	4619      	mov	r1, r3
 800af44:	4b8c      	ldr	r3, [pc, #560]	; (800b178 <USB_EPStartXfer+0x2e0>)
 800af46:	4013      	ands	r3, r2
 800af48:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	015a      	lsls	r2, r3, #5
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	4413      	add	r3, r2
 800af52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af56:	691a      	ldr	r2, [r3, #16]
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	0159      	lsls	r1, r3, #5
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	440b      	add	r3, r1
 800af60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af64:	4619      	mov	r1, r3
 800af66:	4b83      	ldr	r3, [pc, #524]	; (800b174 <USB_EPStartXfer+0x2dc>)
 800af68:	4013      	ands	r3, r2
 800af6a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d11a      	bne.n	800afa8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	691a      	ldr	r2, [r3, #16]
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d903      	bls.n	800af86 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	015a      	lsls	r2, r3, #5
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	69ba      	ldr	r2, [r7, #24]
 800af96:	0151      	lsls	r1, r2, #5
 800af98:	69fa      	ldr	r2, [r7, #28]
 800af9a:	440a      	add	r2, r1
 800af9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afa4:	6113      	str	r3, [r2, #16]
 800afa6:	e01b      	b.n	800afe0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	6919      	ldr	r1, [r3, #16]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	440b      	add	r3, r1
 800afc0:	1e59      	subs	r1, r3, #1
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	fbb1 f3f3 	udiv	r3, r1, r3
 800afca:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800afcc:	4b6b      	ldr	r3, [pc, #428]	; (800b17c <USB_EPStartXfer+0x2e4>)
 800afce:	400b      	ands	r3, r1
 800afd0:	69b9      	ldr	r1, [r7, #24]
 800afd2:	0148      	lsls	r0, r1, #5
 800afd4:	69f9      	ldr	r1, [r7, #28]
 800afd6:	4401      	add	r1, r0
 800afd8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800afdc:	4313      	orrs	r3, r2
 800afde:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afec:	691a      	ldr	r2, [r3, #16]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aff6:	69b9      	ldr	r1, [r7, #24]
 800aff8:	0148      	lsls	r0, r1, #5
 800affa:	69f9      	ldr	r1, [r7, #28]
 800affc:	4401      	add	r1, r0
 800affe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b002:	4313      	orrs	r3, r2
 800b004:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	791b      	ldrb	r3, [r3, #4]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d11f      	bne.n	800b04e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	4413      	add	r3, r2
 800b016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	0151      	lsls	r1, r2, #5
 800b020:	69fa      	ldr	r2, [r7, #28]
 800b022:	440a      	add	r2, r1
 800b024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b028:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b02c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	4413      	add	r3, r2
 800b036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	69ba      	ldr	r2, [r7, #24]
 800b03e:	0151      	lsls	r1, r2, #5
 800b040:	69fa      	ldr	r2, [r7, #28]
 800b042:	440a      	add	r2, r1
 800b044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b048:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b04c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d14b      	bne.n	800b0ec <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d009      	beq.n	800b070 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b068:	461a      	mov	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	69db      	ldr	r3, [r3, #28]
 800b06e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	791b      	ldrb	r3, [r3, #4]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d128      	bne.n	800b0ca <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b084:	2b00      	cmp	r3, #0
 800b086:	d110      	bne.n	800b0aa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	0151      	lsls	r1, r2, #5
 800b09a:	69fa      	ldr	r2, [r7, #28]
 800b09c:	440a      	add	r2, r1
 800b09e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0a6:	6013      	str	r3, [r2, #0]
 800b0a8:	e00f      	b.n	800b0ca <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	69fa      	ldr	r2, [r7, #28]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	69ba      	ldr	r2, [r7, #24]
 800b0da:	0151      	lsls	r1, r2, #5
 800b0dc:	69fa      	ldr	r2, [r7, #28]
 800b0de:	440a      	add	r2, r1
 800b0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	e16a      	b.n	800b3c2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	015a      	lsls	r2, r3, #5
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	0151      	lsls	r1, r2, #5
 800b0fe:	69fa      	ldr	r2, [r7, #28]
 800b100:	440a      	add	r2, r1
 800b102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b106:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b10a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	791b      	ldrb	r3, [r3, #4]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d015      	beq.n	800b140 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 8152 	beq.w	800b3c2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	f003 030f 	and.w	r3, r3, #15
 800b12e:	2101      	movs	r1, #1
 800b130:	fa01 f303 	lsl.w	r3, r1, r3
 800b134:	69f9      	ldr	r1, [r7, #28]
 800b136:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b13a:	4313      	orrs	r3, r2
 800b13c:	634b      	str	r3, [r1, #52]	; 0x34
 800b13e:	e140      	b.n	800b3c2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d117      	bne.n	800b180 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	4413      	add	r3, r2
 800b158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	0151      	lsls	r1, r2, #5
 800b162:	69fa      	ldr	r2, [r7, #28]
 800b164:	440a      	add	r2, r1
 800b166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b16a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b16e:	6013      	str	r3, [r2, #0]
 800b170:	e016      	b.n	800b1a0 <USB_EPStartXfer+0x308>
 800b172:	bf00      	nop
 800b174:	e007ffff 	.word	0xe007ffff
 800b178:	fff80000 	.word	0xfff80000
 800b17c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	015a      	lsls	r2, r3, #5
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	4413      	add	r3, r2
 800b188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	0151      	lsls	r1, r2, #5
 800b192:	69fa      	ldr	r2, [r7, #28]
 800b194:	440a      	add	r2, r1
 800b196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b19a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b19e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	68d9      	ldr	r1, [r3, #12]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	781a      	ldrb	r2, [r3, #0]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	b298      	uxth	r0, r3
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f000 f9b9 	bl	800b52c <USB_WritePacket>
 800b1ba:	e102      	b.n	800b3c2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	015a      	lsls	r2, r3, #5
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c8:	691a      	ldr	r2, [r3, #16]
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	0159      	lsls	r1, r3, #5
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	440b      	add	r3, r1
 800b1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4b7c      	ldr	r3, [pc, #496]	; (800b3cc <USB_EPStartXfer+0x534>)
 800b1da:	4013      	ands	r3, r2
 800b1dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ea:	691a      	ldr	r2, [r3, #16]
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	0159      	lsls	r1, r3, #5
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	440b      	add	r3, r1
 800b1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	4b75      	ldr	r3, [pc, #468]	; (800b3d0 <USB_EPStartXfer+0x538>)
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d12f      	bne.n	800b266 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	689a      	ldr	r2, [r3, #8]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	689a      	ldr	r2, [r3, #8]
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b22a:	691a      	ldr	r2, [r3, #16]
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	6a1b      	ldr	r3, [r3, #32]
 800b230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b234:	69b9      	ldr	r1, [r7, #24]
 800b236:	0148      	lsls	r0, r1, #5
 800b238:	69f9      	ldr	r1, [r7, #28]
 800b23a:	4401      	add	r1, r0
 800b23c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b240:	4313      	orrs	r3, r2
 800b242:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	69ba      	ldr	r2, [r7, #24]
 800b254:	0151      	lsls	r1, r2, #5
 800b256:	69fa      	ldr	r2, [r7, #28]
 800b258:	440a      	add	r2, r1
 800b25a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b25e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b262:	6113      	str	r3, [r2, #16]
 800b264:	e05f      	b.n	800b326 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d123      	bne.n	800b2b6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	4413      	add	r3, r2
 800b276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27a:	691a      	ldr	r2, [r3, #16]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b284:	69b9      	ldr	r1, [r7, #24]
 800b286:	0148      	lsls	r0, r1, #5
 800b288:	69f9      	ldr	r1, [r7, #28]
 800b28a:	4401      	add	r1, r0
 800b28c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b290:	4313      	orrs	r3, r2
 800b292:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	69ba      	ldr	r2, [r7, #24]
 800b2a4:	0151      	lsls	r1, r2, #5
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	440a      	add	r2, r1
 800b2aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2b2:	6113      	str	r3, [r2, #16]
 800b2b4:	e037      	b.n	800b326 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	691a      	ldr	r2, [r3, #16]
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	4413      	add	r3, r2
 800b2c0:	1e5a      	subs	r2, r3, #1
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ca:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	8afa      	ldrh	r2, [r7, #22]
 800b2d2:	fb03 f202 	mul.w	r2, r3, r2
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e6:	691a      	ldr	r2, [r3, #16]
 800b2e8:	8afb      	ldrh	r3, [r7, #22]
 800b2ea:	04d9      	lsls	r1, r3, #19
 800b2ec:	4b39      	ldr	r3, [pc, #228]	; (800b3d4 <USB_EPStartXfer+0x53c>)
 800b2ee:	400b      	ands	r3, r1
 800b2f0:	69b9      	ldr	r1, [r7, #24]
 800b2f2:	0148      	lsls	r0, r1, #5
 800b2f4:	69f9      	ldr	r1, [r7, #28]
 800b2f6:	4401      	add	r1, r0
 800b2f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	4413      	add	r3, r2
 800b308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30c:	691a      	ldr	r2, [r3, #16]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b316:	69b9      	ldr	r1, [r7, #24]
 800b318:	0148      	lsls	r0, r1, #5
 800b31a:	69f9      	ldr	r1, [r7, #28]
 800b31c:	4401      	add	r1, r0
 800b31e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b322:	4313      	orrs	r3, r2
 800b324:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b326:	79fb      	ldrb	r3, [r7, #7]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d10d      	bne.n	800b348 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d009      	beq.n	800b348 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	68d9      	ldr	r1, [r3, #12]
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	015a      	lsls	r2, r3, #5
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	4413      	add	r3, r2
 800b340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b344:	460a      	mov	r2, r1
 800b346:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	791b      	ldrb	r3, [r3, #4]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d128      	bne.n	800b3a2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d110      	bne.n	800b382 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	015a      	lsls	r2, r3, #5
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	4413      	add	r3, r2
 800b368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	69ba      	ldr	r2, [r7, #24]
 800b370:	0151      	lsls	r1, r2, #5
 800b372:	69fa      	ldr	r2, [r7, #28]
 800b374:	440a      	add	r2, r1
 800b376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b37a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	e00f      	b.n	800b3a2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	69ba      	ldr	r2, [r7, #24]
 800b392:	0151      	lsls	r1, r2, #5
 800b394:	69fa      	ldr	r2, [r7, #28]
 800b396:	440a      	add	r2, r1
 800b398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b39c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3a0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	0151      	lsls	r1, r2, #5
 800b3b4:	69fa      	ldr	r2, [r7, #28]
 800b3b6:	440a      	add	r2, r1
 800b3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3720      	adds	r7, #32
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	fff80000 	.word	0xfff80000
 800b3d0:	e007ffff 	.word	0xe007ffff
 800b3d4:	1ff80000 	.word	0x1ff80000

0800b3d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	785b      	ldrb	r3, [r3, #1]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d14a      	bne.n	800b48c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	015a      	lsls	r2, r3, #5
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b40a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b40e:	f040 8086 	bne.w	800b51e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	7812      	ldrb	r2, [r2, #0]
 800b426:	0151      	lsls	r1, r2, #5
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	440a      	add	r2, r1
 800b42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b430:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b434:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	7812      	ldrb	r2, [r2, #0]
 800b44a:	0151      	lsls	r1, r2, #5
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	440a      	add	r2, r1
 800b450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b458:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	3301      	adds	r3, #1
 800b45e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f242 7210 	movw	r2, #10000	; 0x2710
 800b466:	4293      	cmp	r3, r2
 800b468:	d902      	bls.n	800b470 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	75fb      	strb	r3, [r7, #23]
          break;
 800b46e:	e056      	b.n	800b51e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	4413      	add	r3, r2
 800b47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b488:	d0e7      	beq.n	800b45a <USB_EPStopXfer+0x82>
 800b48a:	e048      	b.n	800b51e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4a4:	d13b      	bne.n	800b51e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	7812      	ldrb	r2, [r2, #0]
 800b4ba:	0151      	lsls	r1, r2, #5
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	440a      	add	r2, r1
 800b4c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	7812      	ldrb	r2, [r2, #0]
 800b4de:	0151      	lsls	r1, r2, #5
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	440a      	add	r2, r1
 800b4e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f242 7210 	movw	r2, #10000	; 0x2710
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d902      	bls.n	800b504 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	75fb      	strb	r3, [r7, #23]
          break;
 800b502:	e00c      	b.n	800b51e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b51c:	d0e7      	beq.n	800b4ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b520:	4618      	mov	r0, r3
 800b522:	371c      	adds	r7, #28
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b089      	sub	sp, #36	; 0x24
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	4611      	mov	r1, r2
 800b538:	461a      	mov	r2, r3
 800b53a:	460b      	mov	r3, r1
 800b53c:	71fb      	strb	r3, [r7, #7]
 800b53e:	4613      	mov	r3, r2
 800b540:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b54a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d123      	bne.n	800b59a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b552:	88bb      	ldrh	r3, [r7, #4]
 800b554:	3303      	adds	r3, #3
 800b556:	089b      	lsrs	r3, r3, #2
 800b558:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b55a:	2300      	movs	r3, #0
 800b55c:	61bb      	str	r3, [r7, #24]
 800b55e:	e018      	b.n	800b592 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b560:	79fb      	ldrb	r3, [r7, #7]
 800b562:	031a      	lsls	r2, r3, #12
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	4413      	add	r3, r2
 800b568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b56c:	461a      	mov	r2, r3
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	3301      	adds	r3, #1
 800b578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	3301      	adds	r3, #1
 800b57e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	3301      	adds	r3, #1
 800b584:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	3301      	adds	r3, #1
 800b58a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	3301      	adds	r3, #1
 800b590:	61bb      	str	r3, [r7, #24]
 800b592:	69ba      	ldr	r2, [r7, #24]
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	429a      	cmp	r2, r3
 800b598:	d3e2      	bcc.n	800b560 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3724      	adds	r7, #36	; 0x24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b08b      	sub	sp, #44	; 0x2c
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b5be:	88fb      	ldrh	r3, [r7, #6]
 800b5c0:	089b      	lsrs	r3, r3, #2
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b5c6:	88fb      	ldrh	r3, [r7, #6]
 800b5c8:	f003 0303 	and.w	r3, r3, #3
 800b5cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	e014      	b.n	800b5fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	623b      	str	r3, [r7, #32]
 800b5fe:	6a3a      	ldr	r2, [r7, #32]
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	429a      	cmp	r2, r3
 800b604:	d3e6      	bcc.n	800b5d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b606:	8bfb      	ldrh	r3, [r7, #30]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d01e      	beq.n	800b64a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b60c:	2300      	movs	r3, #0
 800b60e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b616:	461a      	mov	r2, r3
 800b618:	f107 0310 	add.w	r3, r7, #16
 800b61c:	6812      	ldr	r2, [r2, #0]
 800b61e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	b2db      	uxtb	r3, r3
 800b626:	00db      	lsls	r3, r3, #3
 800b628:	fa22 f303 	lsr.w	r3, r2, r3
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	701a      	strb	r2, [r3, #0]
      i++;
 800b632:	6a3b      	ldr	r3, [r7, #32]
 800b634:	3301      	adds	r3, #1
 800b636:	623b      	str	r3, [r7, #32]
      pDest++;
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	3301      	adds	r3, #1
 800b63c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b63e:	8bfb      	ldrh	r3, [r7, #30]
 800b640:	3b01      	subs	r3, #1
 800b642:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b644:	8bfb      	ldrh	r3, [r7, #30]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1ea      	bne.n	800b620 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	372c      	adds	r7, #44	; 0x2c
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	785b      	ldrb	r3, [r3, #1]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d12c      	bne.n	800b6ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	015a      	lsls	r2, r3, #5
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	db12      	blt.n	800b6ac <USB_EPSetStall+0x54>
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00f      	beq.n	800b6ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	015a      	lsls	r2, r3, #5
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4413      	add	r3, r2
 800b694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	0151      	lsls	r1, r2, #5
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	440a      	add	r2, r1
 800b6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	015a      	lsls	r2, r3, #5
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	0151      	lsls	r1, r2, #5
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	440a      	add	r2, r1
 800b6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	e02b      	b.n	800b726 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	015a      	lsls	r2, r3, #5
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	db12      	blt.n	800b706 <USB_EPSetStall+0xae>
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00f      	beq.n	800b706 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	015a      	lsls	r2, r3, #5
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	0151      	lsls	r1, r2, #5
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	440a      	add	r2, r1
 800b6fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b700:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b704:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	0151      	lsls	r1, r2, #5
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	440a      	add	r2, r1
 800b71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b724:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	785b      	ldrb	r3, [r3, #1]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d128      	bne.n	800b7a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	015a      	lsls	r2, r3, #5
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	4413      	add	r3, r2
 800b758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	0151      	lsls	r1, r2, #5
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	440a      	add	r2, r1
 800b766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b76a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b76e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	791b      	ldrb	r3, [r3, #4]
 800b774:	2b03      	cmp	r3, #3
 800b776:	d003      	beq.n	800b780 <USB_EPClearStall+0x4c>
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	791b      	ldrb	r3, [r3, #4]
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d138      	bne.n	800b7f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	0151      	lsls	r1, r2, #5
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	440a      	add	r2, r1
 800b796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b79a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	e027      	b.n	800b7f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	015a      	lsls	r2, r3, #5
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	0151      	lsls	r1, r2, #5
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	440a      	add	r2, r1
 800b7b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	791b      	ldrb	r3, [r3, #4]
 800b7c6:	2b03      	cmp	r3, #3
 800b7c8:	d003      	beq.n	800b7d2 <USB_EPClearStall+0x9e>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	791b      	ldrb	r3, [r3, #4]
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d10f      	bne.n	800b7f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	015a      	lsls	r2, r3, #5
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	0151      	lsls	r1, r2, #5
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	440a      	add	r2, r1
 800b7e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	460b      	mov	r3, r1
 800b80a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b81e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b822:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	78fb      	ldrb	r3, [r7, #3]
 800b82e:	011b      	lsls	r3, r3, #4
 800b830:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b834:	68f9      	ldr	r1, [r7, #12]
 800b836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b83a:	4313      	orrs	r3, r2
 800b83c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b866:	f023 0303 	bic.w	r3, r3, #3
 800b86a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b87a:	f023 0302 	bic.w	r3, r3, #2
 800b87e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b88e:	b480      	push	{r7}
 800b890:	b085      	sub	sp, #20
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8a8:	f023 0303 	bic.w	r3, r3, #3
 800b8ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8bc:	f043 0302 	orr.w	r3, r3, #2
 800b8c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3714      	adds	r7, #20
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b085      	sub	sp, #20
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b912:	69db      	ldr	r3, [r3, #28]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	4013      	ands	r3, r2
 800b918:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	0c1b      	lsrs	r3, r3, #16
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b085      	sub	sp, #20
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b946:	69db      	ldr	r3, [r3, #28]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	4013      	ands	r3, r2
 800b94c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	b29b      	uxth	r3, r3
}
 800b952:	4618      	mov	r0, r3
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b95e:	b480      	push	{r7}
 800b960:	b085      	sub	sp, #20
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	460b      	mov	r3, r1
 800b968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b96e:	78fb      	ldrb	r3, [r7, #3]
 800b970:	015a      	lsls	r2, r3, #5
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	4413      	add	r3, r2
 800b976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	4013      	ands	r3, r2
 800b98a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b98c:	68bb      	ldr	r3, [r7, #8]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b087      	sub	sp, #28
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b9be:	78fb      	ldrb	r3, [r7, #3]
 800b9c0:	f003 030f 	and.w	r3, r3, #15
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ca:	01db      	lsls	r3, r3, #7
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b9d4:	78fb      	ldrb	r3, [r7, #3]
 800b9d6:	015a      	lsls	r2, r3, #5
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	4413      	add	r3, r2
 800b9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	371c      	adds	r7, #28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b083      	sub	sp, #12
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	695b      	ldr	r3, [r3, #20]
 800ba02:	f003 0301 	and.w	r3, r3, #1
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
	...

0800ba14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4b09      	ldr	r3, [pc, #36]	; (800ba58 <USB_ActivateSetup+0x44>)
 800ba32:	4013      	ands	r3, r2
 800ba34:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	fffff800 	.word	0xfffff800

0800ba5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	460b      	mov	r3, r1
 800ba66:	607a      	str	r2, [r7, #4]
 800ba68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	333c      	adds	r3, #60	; 0x3c
 800ba72:	3304      	adds	r3, #4
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	4a26      	ldr	r2, [pc, #152]	; (800bb14 <USB_EP0_OutStart+0xb8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d90a      	bls.n	800ba96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba90:	d101      	bne.n	800ba96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	e037      	b.n	800bb06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	2300      	movs	r3, #0
 800baa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac4:	f043 0318 	orr.w	r3, r3, #24
 800bac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bad8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800badc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bade:	7afb      	ldrb	r3, [r7, #11]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d10f      	bne.n	800bb04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baea:	461a      	mov	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bafe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bb02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	4f54300a 	.word	0x4f54300a

0800bb18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb20:	2300      	movs	r3, #0
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3301      	adds	r3, #1
 800bb28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	4a13      	ldr	r2, [pc, #76]	; (800bb7c <USB_CoreReset+0x64>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d901      	bls.n	800bb36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb32:	2303      	movs	r3, #3
 800bb34:	e01b      	b.n	800bb6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	daf2      	bge.n	800bb24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	f043 0201 	orr.w	r2, r3, #1
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3301      	adds	r3, #1
 800bb52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4a09      	ldr	r2, [pc, #36]	; (800bb7c <USB_CoreReset+0x64>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d901      	bls.n	800bb60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e006      	b.n	800bb6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d0f0      	beq.n	800bb4e <USB_CoreReset+0x36>

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	00030d40 	.word	0x00030d40

0800bb80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb90:	f002 fcdc 	bl	800e54c <USBD_static_malloc>
 800bb94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d109      	bne.n	800bbb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	32b0      	adds	r2, #176	; 0xb0
 800bba6:	2100      	movs	r1, #0
 800bba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bbac:	2302      	movs	r3, #2
 800bbae:	e0d4      	b.n	800bd5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bbb0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f002 fd30 	bl	800e61c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	32b0      	adds	r2, #176	; 0xb0
 800bbc6:	68f9      	ldr	r1, [r7, #12]
 800bbc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	32b0      	adds	r2, #176	; 0xb0
 800bbd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	7c1b      	ldrb	r3, [r3, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d138      	bne.n	800bc5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bbe8:	4b5e      	ldr	r3, [pc, #376]	; (800bd64 <USBD_CDC_Init+0x1e4>)
 800bbea:	7819      	ldrb	r1, [r3, #0]
 800bbec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f002 fb87 	bl	800e306 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bbf8:	4b5a      	ldr	r3, [pc, #360]	; (800bd64 <USBD_CDC_Init+0x1e4>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	f003 020f 	and.w	r2, r3, #15
 800bc00:	6879      	ldr	r1, [r7, #4]
 800bc02:	4613      	mov	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	440b      	add	r3, r1
 800bc0c:	3324      	adds	r3, #36	; 0x24
 800bc0e:	2201      	movs	r2, #1
 800bc10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc12:	4b55      	ldr	r3, [pc, #340]	; (800bd68 <USBD_CDC_Init+0x1e8>)
 800bc14:	7819      	ldrb	r1, [r3, #0]
 800bc16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f002 fb72 	bl	800e306 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc22:	4b51      	ldr	r3, [pc, #324]	; (800bd68 <USBD_CDC_Init+0x1e8>)
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	f003 020f 	and.w	r2, r3, #15
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	440b      	add	r3, r1
 800bc36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bc3e:	4b4b      	ldr	r3, [pc, #300]	; (800bd6c <USBD_CDC_Init+0x1ec>)
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	f003 020f 	and.w	r2, r3, #15
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4413      	add	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	440b      	add	r3, r1
 800bc52:	3326      	adds	r3, #38	; 0x26
 800bc54:	2210      	movs	r2, #16
 800bc56:	801a      	strh	r2, [r3, #0]
 800bc58:	e035      	b.n	800bcc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc5a:	4b42      	ldr	r3, [pc, #264]	; (800bd64 <USBD_CDC_Init+0x1e4>)
 800bc5c:	7819      	ldrb	r1, [r3, #0]
 800bc5e:	2340      	movs	r3, #64	; 0x40
 800bc60:	2202      	movs	r2, #2
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f002 fb4f 	bl	800e306 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc68:	4b3e      	ldr	r3, [pc, #248]	; (800bd64 <USBD_CDC_Init+0x1e4>)
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	f003 020f 	and.w	r2, r3, #15
 800bc70:	6879      	ldr	r1, [r7, #4]
 800bc72:	4613      	mov	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4413      	add	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	440b      	add	r3, r1
 800bc7c:	3324      	adds	r3, #36	; 0x24
 800bc7e:	2201      	movs	r2, #1
 800bc80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc82:	4b39      	ldr	r3, [pc, #228]	; (800bd68 <USBD_CDC_Init+0x1e8>)
 800bc84:	7819      	ldrb	r1, [r3, #0]
 800bc86:	2340      	movs	r3, #64	; 0x40
 800bc88:	2202      	movs	r2, #2
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f002 fb3b 	bl	800e306 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc90:	4b35      	ldr	r3, [pc, #212]	; (800bd68 <USBD_CDC_Init+0x1e8>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	f003 020f 	and.w	r2, r3, #15
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	440b      	add	r3, r1
 800bca4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bca8:	2201      	movs	r2, #1
 800bcaa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bcac:	4b2f      	ldr	r3, [pc, #188]	; (800bd6c <USBD_CDC_Init+0x1ec>)
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	f003 020f 	and.w	r2, r3, #15
 800bcb4:	6879      	ldr	r1, [r7, #4]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	440b      	add	r3, r1
 800bcc0:	3326      	adds	r3, #38	; 0x26
 800bcc2:	2210      	movs	r2, #16
 800bcc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bcc6:	4b29      	ldr	r3, [pc, #164]	; (800bd6c <USBD_CDC_Init+0x1ec>)
 800bcc8:	7819      	ldrb	r1, [r3, #0]
 800bcca:	2308      	movs	r3, #8
 800bccc:	2203      	movs	r2, #3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f002 fb19 	bl	800e306 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bcd4:	4b25      	ldr	r3, [pc, #148]	; (800bd6c <USBD_CDC_Init+0x1ec>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f003 020f 	and.w	r2, r3, #15
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	4613      	mov	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4413      	add	r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	440b      	add	r3, r1
 800bce8:	3324      	adds	r3, #36	; 0x24
 800bcea:	2201      	movs	r2, #1
 800bcec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	33b0      	adds	r3, #176	; 0xb0
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bd24:	2302      	movs	r3, #2
 800bd26:	e018      	b.n	800bd5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	7c1b      	ldrb	r3, [r3, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10a      	bne.n	800bd46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd30:	4b0d      	ldr	r3, [pc, #52]	; (800bd68 <USBD_CDC_Init+0x1e8>)
 800bd32:	7819      	ldrb	r1, [r3, #0]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f002 fbd0 	bl	800e4e4 <USBD_LL_PrepareReceive>
 800bd44:	e008      	b.n	800bd58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd46:	4b08      	ldr	r3, [pc, #32]	; (800bd68 <USBD_CDC_Init+0x1e8>)
 800bd48:	7819      	ldrb	r1, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd50:	2340      	movs	r3, #64	; 0x40
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f002 fbc6 	bl	800e4e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	240001d9 	.word	0x240001d9
 800bd68:	240001da 	.word	0x240001da
 800bd6c:	240001db 	.word	0x240001db

0800bd70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bd7c:	4b3a      	ldr	r3, [pc, #232]	; (800be68 <USBD_CDC_DeInit+0xf8>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f002 fae5 	bl	800e352 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bd88:	4b37      	ldr	r3, [pc, #220]	; (800be68 <USBD_CDC_DeInit+0xf8>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	f003 020f 	and.w	r2, r3, #15
 800bd90:	6879      	ldr	r1, [r7, #4]
 800bd92:	4613      	mov	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	440b      	add	r3, r1
 800bd9c:	3324      	adds	r3, #36	; 0x24
 800bd9e:	2200      	movs	r2, #0
 800bda0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bda2:	4b32      	ldr	r3, [pc, #200]	; (800be6c <USBD_CDC_DeInit+0xfc>)
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	4619      	mov	r1, r3
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f002 fad2 	bl	800e352 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bdae:	4b2f      	ldr	r3, [pc, #188]	; (800be6c <USBD_CDC_DeInit+0xfc>)
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	f003 020f 	and.w	r2, r3, #15
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	440b      	add	r3, r1
 800bdc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bdca:	4b29      	ldr	r3, [pc, #164]	; (800be70 <USBD_CDC_DeInit+0x100>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	4619      	mov	r1, r3
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f002 fabe 	bl	800e352 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bdd6:	4b26      	ldr	r3, [pc, #152]	; (800be70 <USBD_CDC_DeInit+0x100>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	f003 020f 	and.w	r2, r3, #15
 800bdde:	6879      	ldr	r1, [r7, #4]
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	440b      	add	r3, r1
 800bdea:	3324      	adds	r3, #36	; 0x24
 800bdec:	2200      	movs	r2, #0
 800bdee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bdf0:	4b1f      	ldr	r3, [pc, #124]	; (800be70 <USBD_CDC_DeInit+0x100>)
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	f003 020f 	and.w	r2, r3, #15
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	440b      	add	r3, r1
 800be04:	3326      	adds	r3, #38	; 0x26
 800be06:	2200      	movs	r2, #0
 800be08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	32b0      	adds	r2, #176	; 0xb0
 800be14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d01f      	beq.n	800be5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	33b0      	adds	r3, #176	; 0xb0
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	32b0      	adds	r2, #176	; 0xb0
 800be3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be3e:	4618      	mov	r0, r3
 800be40:	f002 fb92 	bl	800e568 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	32b0      	adds	r2, #176	; 0xb0
 800be4e:	2100      	movs	r1, #0
 800be50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	240001d9 	.word	0x240001d9
 800be6c:	240001da 	.word	0x240001da
 800be70:	240001db 	.word	0x240001db

0800be74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	32b0      	adds	r2, #176	; 0xb0
 800be88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800be8e:	2300      	movs	r3, #0
 800be90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800be92:	2300      	movs	r3, #0
 800be94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d101      	bne.n	800bea4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bea0:	2303      	movs	r3, #3
 800bea2:	e0bf      	b.n	800c024 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800beac:	2b00      	cmp	r3, #0
 800beae:	d050      	beq.n	800bf52 <USBD_CDC_Setup+0xde>
 800beb0:	2b20      	cmp	r3, #32
 800beb2:	f040 80af 	bne.w	800c014 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	88db      	ldrh	r3, [r3, #6]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d03a      	beq.n	800bf34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	b25b      	sxtb	r3, r3
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	da1b      	bge.n	800bf00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	33b0      	adds	r3, #176	; 0xb0
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bede:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	88d2      	ldrh	r2, [r2, #6]
 800bee4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	88db      	ldrh	r3, [r3, #6]
 800beea:	2b07      	cmp	r3, #7
 800beec:	bf28      	it	cs
 800beee:	2307      	movcs	r3, #7
 800bef0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	89fa      	ldrh	r2, [r7, #14]
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f001 fd49 	bl	800d990 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800befe:	e090      	b.n	800c022 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	785a      	ldrb	r2, [r3, #1]
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	88db      	ldrh	r3, [r3, #6]
 800bf0e:	2b3f      	cmp	r3, #63	; 0x3f
 800bf10:	d803      	bhi.n	800bf1a <USBD_CDC_Setup+0xa6>
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	88db      	ldrh	r3, [r3, #6]
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	e000      	b.n	800bf1c <USBD_CDC_Setup+0xa8>
 800bf1a:	2240      	movs	r2, #64	; 0x40
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bf22:	6939      	ldr	r1, [r7, #16]
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 fd5b 	bl	800d9e8 <USBD_CtlPrepareRx>
      break;
 800bf32:	e076      	b.n	800c022 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	33b0      	adds	r3, #176	; 0xb0
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	7850      	ldrb	r0, [r2, #1]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	4798      	blx	r3
      break;
 800bf50:	e067      	b.n	800c022 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	785b      	ldrb	r3, [r3, #1]
 800bf56:	2b0b      	cmp	r3, #11
 800bf58:	d851      	bhi.n	800bffe <USBD_CDC_Setup+0x18a>
 800bf5a:	a201      	add	r2, pc, #4	; (adr r2, 800bf60 <USBD_CDC_Setup+0xec>)
 800bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf60:	0800bf91 	.word	0x0800bf91
 800bf64:	0800c00d 	.word	0x0800c00d
 800bf68:	0800bfff 	.word	0x0800bfff
 800bf6c:	0800bfff 	.word	0x0800bfff
 800bf70:	0800bfff 	.word	0x0800bfff
 800bf74:	0800bfff 	.word	0x0800bfff
 800bf78:	0800bfff 	.word	0x0800bfff
 800bf7c:	0800bfff 	.word	0x0800bfff
 800bf80:	0800bfff 	.word	0x0800bfff
 800bf84:	0800bfff 	.word	0x0800bfff
 800bf88:	0800bfbb 	.word	0x0800bfbb
 800bf8c:	0800bfe5 	.word	0x0800bfe5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d107      	bne.n	800bfac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf9c:	f107 030a 	add.w	r3, r7, #10
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f001 fcf3 	bl	800d990 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfaa:	e032      	b.n	800c012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f001 fc7d 	bl	800d8ae <USBD_CtlError>
            ret = USBD_FAIL;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	75fb      	strb	r3, [r7, #23]
          break;
 800bfb8:	e02b      	b.n	800c012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d107      	bne.n	800bfd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bfc6:	f107 030d 	add.w	r3, r7, #13
 800bfca:	2201      	movs	r2, #1
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f001 fcde 	bl	800d990 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfd4:	e01d      	b.n	800c012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 fc68 	bl	800d8ae <USBD_CtlError>
            ret = USBD_FAIL;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	75fb      	strb	r3, [r7, #23]
          break;
 800bfe2:	e016      	b.n	800c012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	d00f      	beq.n	800c010 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f001 fc5b 	bl	800d8ae <USBD_CtlError>
            ret = USBD_FAIL;
 800bff8:	2303      	movs	r3, #3
 800bffa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bffc:	e008      	b.n	800c010 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f001 fc54 	bl	800d8ae <USBD_CtlError>
          ret = USBD_FAIL;
 800c006:	2303      	movs	r3, #3
 800c008:	75fb      	strb	r3, [r7, #23]
          break;
 800c00a:	e002      	b.n	800c012 <USBD_CDC_Setup+0x19e>
          break;
 800c00c:	bf00      	nop
 800c00e:	e008      	b.n	800c022 <USBD_CDC_Setup+0x1ae>
          break;
 800c010:	bf00      	nop
      }
      break;
 800c012:	e006      	b.n	800c022 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f001 fc49 	bl	800d8ae <USBD_CtlError>
      ret = USBD_FAIL;
 800c01c:	2303      	movs	r3, #3
 800c01e:	75fb      	strb	r3, [r7, #23]
      break;
 800c020:	bf00      	nop
  }

  return (uint8_t)ret;
 800c022:	7dfb      	ldrb	r3, [r7, #23]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	460b      	mov	r3, r1
 800c036:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c03e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	32b0      	adds	r2, #176	; 0xb0
 800c04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c052:	2303      	movs	r3, #3
 800c054:	e065      	b.n	800c122 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	32b0      	adds	r2, #176	; 0xb0
 800c060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c064:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c066:	78fb      	ldrb	r3, [r7, #3]
 800c068:	f003 020f 	and.w	r2, r3, #15
 800c06c:	6879      	ldr	r1, [r7, #4]
 800c06e:	4613      	mov	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	440b      	add	r3, r1
 800c078:	3318      	adds	r3, #24
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d02f      	beq.n	800c0e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c080:	78fb      	ldrb	r3, [r7, #3]
 800c082:	f003 020f 	and.w	r2, r3, #15
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	4613      	mov	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	440b      	add	r3, r1
 800c092:	3318      	adds	r3, #24
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	78fb      	ldrb	r3, [r7, #3]
 800c098:	f003 010f 	and.w	r1, r3, #15
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	460b      	mov	r3, r1
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	440b      	add	r3, r1
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4403      	add	r3, r0
 800c0a8:	3344      	adds	r3, #68	; 0x44
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800c0b0:	fb01 f303 	mul.w	r3, r1, r3
 800c0b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d112      	bne.n	800c0e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c0ba:	78fb      	ldrb	r3, [r7, #3]
 800c0bc:	f003 020f 	and.w	r2, r3, #15
 800c0c0:	6879      	ldr	r1, [r7, #4]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4413      	add	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	440b      	add	r3, r1
 800c0cc:	3318      	adds	r3, #24
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0d2:	78f9      	ldrb	r1, [r7, #3]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f002 f9e2 	bl	800e4a2 <USBD_LL_Transmit>
 800c0de:	e01f      	b.n	800c120 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	33b0      	adds	r3, #176	; 0xb0
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d010      	beq.n	800c120 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	33b0      	adds	r3, #176	; 0xb0
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c11c:	78fa      	ldrb	r2, [r7, #3]
 800c11e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	460b      	mov	r3, r1
 800c134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	32b0      	adds	r2, #176	; 0xb0
 800c140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c144:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	32b0      	adds	r2, #176	; 0xb0
 800c150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d101      	bne.n	800c15c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c158:	2303      	movs	r3, #3
 800c15a:	e01a      	b.n	800c192 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c15c:	78fb      	ldrb	r3, [r7, #3]
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f002 f9e0 	bl	800e526 <USBD_LL_GetRxDataSize>
 800c166:	4602      	mov	r2, r0
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	33b0      	adds	r3, #176	; 0xb0
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c18c:	4611      	mov	r1, r2
 800c18e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	32b0      	adds	r2, #176	; 0xb0
 800c1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e025      	b.n	800c208 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	33b0      	adds	r3, #176	; 0xb0
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d01a      	beq.n	800c206 <USBD_CDC_EP0_RxReady+0x6c>
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c1d6:	2bff      	cmp	r3, #255	; 0xff
 800c1d8:	d015      	beq.n	800c206 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	33b0      	adds	r3, #176	; 0xb0
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	4413      	add	r3, r2
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c1f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c1fa:	b292      	uxth	r2, r2
 800c1fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	22ff      	movs	r2, #255	; 0xff
 800c202:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c218:	2182      	movs	r1, #130	; 0x82
 800c21a:	4818      	ldr	r0, [pc, #96]	; (800c27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c21c:	f000 fd0f 	bl	800cc3e <USBD_GetEpDesc>
 800c220:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c222:	2101      	movs	r1, #1
 800c224:	4815      	ldr	r0, [pc, #84]	; (800c27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c226:	f000 fd0a 	bl	800cc3e <USBD_GetEpDesc>
 800c22a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c22c:	2181      	movs	r1, #129	; 0x81
 800c22e:	4813      	ldr	r0, [pc, #76]	; (800c27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c230:	f000 fd05 	bl	800cc3e <USBD_GetEpDesc>
 800c234:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	2210      	movs	r2, #16
 800c240:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d006      	beq.n	800c256 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c250:	711a      	strb	r2, [r3, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d006      	beq.n	800c26a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2200      	movs	r2, #0
 800c260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c264:	711a      	strb	r2, [r3, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2265      	movs	r2, #101	; 0x65
 800c26e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c270:	4b02      	ldr	r3, [pc, #8]	; (800c27c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	24000174 	.word	0x24000174

0800c280 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b086      	sub	sp, #24
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c288:	2182      	movs	r1, #130	; 0x82
 800c28a:	4818      	ldr	r0, [pc, #96]	; (800c2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c28c:	f000 fcd7 	bl	800cc3e <USBD_GetEpDesc>
 800c290:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c292:	2101      	movs	r1, #1
 800c294:	4815      	ldr	r0, [pc, #84]	; (800c2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c296:	f000 fcd2 	bl	800cc3e <USBD_GetEpDesc>
 800c29a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c29c:	2181      	movs	r1, #129	; 0x81
 800c29e:	4813      	ldr	r0, [pc, #76]	; (800c2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c2a0:	f000 fccd 	bl	800cc3e <USBD_GetEpDesc>
 800c2a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2210      	movs	r2, #16
 800c2b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d006      	beq.n	800c2c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	711a      	strb	r2, [r3, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f042 0202 	orr.w	r2, r2, #2
 800c2c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d006      	beq.n	800c2da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	711a      	strb	r2, [r3, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f042 0202 	orr.w	r2, r2, #2
 800c2d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2265      	movs	r2, #101	; 0x65
 800c2de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c2e0:	4b02      	ldr	r3, [pc, #8]	; (800c2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3718      	adds	r7, #24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	24000174 	.word	0x24000174

0800c2f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2f8:	2182      	movs	r1, #130	; 0x82
 800c2fa:	4818      	ldr	r0, [pc, #96]	; (800c35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2fc:	f000 fc9f 	bl	800cc3e <USBD_GetEpDesc>
 800c300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c302:	2101      	movs	r1, #1
 800c304:	4815      	ldr	r0, [pc, #84]	; (800c35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c306:	f000 fc9a 	bl	800cc3e <USBD_GetEpDesc>
 800c30a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c30c:	2181      	movs	r1, #129	; 0x81
 800c30e:	4813      	ldr	r0, [pc, #76]	; (800c35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c310:	f000 fc95 	bl	800cc3e <USBD_GetEpDesc>
 800c314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	2210      	movs	r2, #16
 800c320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d006      	beq.n	800c336 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c330:	711a      	strb	r2, [r3, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d006      	beq.n	800c34a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c344:	711a      	strb	r2, [r3, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2265      	movs	r2, #101	; 0x65
 800c34e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c350:	4b02      	ldr	r3, [pc, #8]	; (800c35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	24000174 	.word	0x24000174

0800c360 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	220a      	movs	r2, #10
 800c36c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c36e:	4b03      	ldr	r3, [pc, #12]	; (800c37c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c370:	4618      	mov	r0, r3
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	24000130 	.word	0x24000130

0800c380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d101      	bne.n	800c394 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c390:	2303      	movs	r3, #3
 800c392:	e009      	b.n	800c3a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	33b0      	adds	r3, #176	; 0xb0
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b087      	sub	sp, #28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	32b0      	adds	r2, #176	; 0xb0
 800c3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	e008      	b.n	800c3ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	371c      	adds	r7, #28
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	32b0      	adds	r2, #176	; 0xb0
 800c40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c410:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d101      	bne.n	800c41c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c418:	2303      	movs	r3, #3
 800c41a:	e004      	b.n	800c426 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
	...

0800c434 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	32b0      	adds	r2, #176	; 0xb0
 800c446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	32b0      	adds	r2, #176	; 0xb0
 800c456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d101      	bne.n	800c462 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c45e:	2303      	movs	r3, #3
 800c460:	e018      	b.n	800c494 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	7c1b      	ldrb	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10a      	bne.n	800c480 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c46a:	4b0c      	ldr	r3, [pc, #48]	; (800c49c <USBD_CDC_ReceivePacket+0x68>)
 800c46c:	7819      	ldrb	r1, [r3, #0]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c474:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f002 f833 	bl	800e4e4 <USBD_LL_PrepareReceive>
 800c47e:	e008      	b.n	800c492 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c480:	4b06      	ldr	r3, [pc, #24]	; (800c49c <USBD_CDC_ReceivePacket+0x68>)
 800c482:	7819      	ldrb	r1, [r3, #0]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c48a:	2340      	movs	r3, #64	; 0x40
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f002 f829 	bl	800e4e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	240001da 	.word	0x240001da

0800c4a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e01f      	b.n	800c4f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d003      	beq.n	800c4de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	79fa      	ldrb	r2, [r7, #7]
 800c4ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f001 fe9d 	bl	800e22c <USBD_LL_Init>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3718      	adds	r7, #24
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c50a:	2300      	movs	r3, #0
 800c50c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c514:	2303      	movs	r3, #3
 800c516:	e025      	b.n	800c564 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	32ae      	adds	r2, #174	; 0xae
 800c52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00f      	beq.n	800c554 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	32ae      	adds	r2, #174	; 0xae
 800c53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c544:	f107 020e 	add.w	r2, r7, #14
 800c548:	4610      	mov	r0, r2
 800c54a:	4798      	blx	r3
 800c54c:	4602      	mov	r2, r0
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f001 feab 	bl	800e2d0 <USBD_LL_Start>
 800c57a:	4603      	mov	r3, r0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c58c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c58e:	4618      	mov	r0, r3
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b084      	sub	sp, #16
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d009      	beq.n	800c5c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	78fa      	ldrb	r2, [r7, #3]
 800c5be:	4611      	mov	r1, r2
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	4798      	blx	r3
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	78fa      	ldrb	r2, [r7, #3]
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d001      	beq.n	800c5fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b084      	sub	sp, #16
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	4618      	mov	r0, r3
 800c61a:	f001 f90e 	bl	800d83a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c62c:	461a      	mov	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c63a:	f003 031f 	and.w	r3, r3, #31
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d01a      	beq.n	800c678 <USBD_LL_SetupStage+0x72>
 800c642:	2b02      	cmp	r3, #2
 800c644:	d822      	bhi.n	800c68c <USBD_LL_SetupStage+0x86>
 800c646:	2b00      	cmp	r3, #0
 800c648:	d002      	beq.n	800c650 <USBD_LL_SetupStage+0x4a>
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d00a      	beq.n	800c664 <USBD_LL_SetupStage+0x5e>
 800c64e:	e01d      	b.n	800c68c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fb65 	bl	800cd28 <USBD_StdDevReq>
 800c65e:	4603      	mov	r3, r0
 800c660:	73fb      	strb	r3, [r7, #15]
      break;
 800c662:	e020      	b.n	800c6a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fbcd 	bl	800ce0c <USBD_StdItfReq>
 800c672:	4603      	mov	r3, r0
 800c674:	73fb      	strb	r3, [r7, #15]
      break;
 800c676:	e016      	b.n	800c6a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c67e:	4619      	mov	r1, r3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fc2f 	bl	800cee4 <USBD_StdEPReq>
 800c686:	4603      	mov	r3, r0
 800c688:	73fb      	strb	r3, [r7, #15]
      break;
 800c68a:	e00c      	b.n	800c6a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c692:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c696:	b2db      	uxtb	r3, r3
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f001 fe78 	bl	800e390 <USBD_LL_StallEP>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a4:	bf00      	nop
  }

  return ret;
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c6c2:	7afb      	ldrb	r3, [r7, #11]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d16e      	bne.n	800c7a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c6ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6d6:	2b03      	cmp	r3, #3
 800c6d8:	f040 8098 	bne.w	800c80c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d913      	bls.n	800c710 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	689a      	ldr	r2, [r3, #8]
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	1ad2      	subs	r2, r2, r3
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	68da      	ldr	r2, [r3, #12]
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	4293      	cmp	r3, r2
 800c700:	bf28      	it	cs
 800c702:	4613      	movcs	r3, r2
 800c704:	461a      	mov	r2, r3
 800c706:	6879      	ldr	r1, [r7, #4]
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f001 f98a 	bl	800da22 <USBD_CtlContinueRx>
 800c70e:	e07d      	b.n	800c80c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c716:	f003 031f 	and.w	r3, r3, #31
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d014      	beq.n	800c748 <USBD_LL_DataOutStage+0x98>
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d81d      	bhi.n	800c75e <USBD_LL_DataOutStage+0xae>
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <USBD_LL_DataOutStage+0x7c>
 800c726:	2b01      	cmp	r3, #1
 800c728:	d003      	beq.n	800c732 <USBD_LL_DataOutStage+0x82>
 800c72a:	e018      	b.n	800c75e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c72c:	2300      	movs	r3, #0
 800c72e:	75bb      	strb	r3, [r7, #22]
            break;
 800c730:	e018      	b.n	800c764 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	4619      	mov	r1, r3
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f000 fa64 	bl	800cc0a <USBD_CoreFindIF>
 800c742:	4603      	mov	r3, r0
 800c744:	75bb      	strb	r3, [r7, #22]
            break;
 800c746:	e00d      	b.n	800c764 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	4619      	mov	r1, r3
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f000 fa66 	bl	800cc24 <USBD_CoreFindEP>
 800c758:	4603      	mov	r3, r0
 800c75a:	75bb      	strb	r3, [r7, #22]
            break;
 800c75c:	e002      	b.n	800c764 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c75e:	2300      	movs	r3, #0
 800c760:	75bb      	strb	r3, [r7, #22]
            break;
 800c762:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c764:	7dbb      	ldrb	r3, [r7, #22]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d119      	bne.n	800c79e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b03      	cmp	r3, #3
 800c774:	d113      	bne.n	800c79e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c776:	7dba      	ldrb	r2, [r7, #22]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	32ae      	adds	r2, #174	; 0xae
 800c77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00b      	beq.n	800c79e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c786:	7dba      	ldrb	r2, [r7, #22]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c78e:	7dba      	ldrb	r2, [r7, #22]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	32ae      	adds	r2, #174	; 0xae
 800c794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c798:	691b      	ldr	r3, [r3, #16]
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f001 f950 	bl	800da44 <USBD_CtlSendStatus>
 800c7a4:	e032      	b.n	800c80c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c7a6:	7afb      	ldrb	r3, [r7, #11]
 800c7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f000 fa37 	bl	800cc24 <USBD_CoreFindEP>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7ba:	7dbb      	ldrb	r3, [r7, #22]
 800c7bc:	2bff      	cmp	r3, #255	; 0xff
 800c7be:	d025      	beq.n	800c80c <USBD_LL_DataOutStage+0x15c>
 800c7c0:	7dbb      	ldrb	r3, [r7, #22]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d122      	bne.n	800c80c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d117      	bne.n	800c802 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c7d2:	7dba      	ldrb	r2, [r7, #22]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	32ae      	adds	r2, #174	; 0xae
 800c7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d00f      	beq.n	800c802 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c7e2:	7dba      	ldrb	r2, [r7, #22]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c7ea:	7dba      	ldrb	r2, [r7, #22]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	32ae      	adds	r2, #174	; 0xae
 800c7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	7afa      	ldrb	r2, [r7, #11]
 800c7f8:	4611      	mov	r1, r2
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	4798      	blx	r3
 800c7fe:	4603      	mov	r3, r0
 800c800:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c802:	7dfb      	ldrb	r3, [r7, #23]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c808:	7dfb      	ldrb	r3, [r7, #23]
 800c80a:	e000      	b.n	800c80e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b086      	sub	sp, #24
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	60f8      	str	r0, [r7, #12]
 800c81e:	460b      	mov	r3, r1
 800c820:	607a      	str	r2, [r7, #4]
 800c822:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c824:	7afb      	ldrb	r3, [r7, #11]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d16f      	bne.n	800c90a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3314      	adds	r3, #20
 800c82e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c836:	2b02      	cmp	r3, #2
 800c838:	d15a      	bne.n	800c8f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	689a      	ldr	r2, [r3, #8]
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	429a      	cmp	r2, r3
 800c844:	d914      	bls.n	800c870 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	689a      	ldr	r2, [r3, #8]
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	1ad2      	subs	r2, r2, r3
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	461a      	mov	r2, r3
 800c85a:	6879      	ldr	r1, [r7, #4]
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f001 f8b2 	bl	800d9c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c862:	2300      	movs	r3, #0
 800c864:	2200      	movs	r2, #0
 800c866:	2100      	movs	r1, #0
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f001 fe3b 	bl	800e4e4 <USBD_LL_PrepareReceive>
 800c86e:	e03f      	b.n	800c8f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	68da      	ldr	r2, [r3, #12]
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d11c      	bne.n	800c8b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c884:	429a      	cmp	r2, r3
 800c886:	d316      	bcc.n	800c8b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c892:	429a      	cmp	r2, r3
 800c894:	d20f      	bcs.n	800c8b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c896:	2200      	movs	r2, #0
 800c898:	2100      	movs	r1, #0
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f001 f893 	bl	800d9c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f001 fe18 	bl	800e4e4 <USBD_LL_PrepareReceive>
 800c8b4:	e01c      	b.n	800c8f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d10f      	bne.n	800c8e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d009      	beq.n	800c8e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8e2:	2180      	movs	r1, #128	; 0x80
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f001 fd53 	bl	800e390 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f001 f8bd 	bl	800da6a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d03a      	beq.n	800c970 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f7ff fe42 	bl	800c584 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c908:	e032      	b.n	800c970 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c90a:	7afb      	ldrb	r3, [r7, #11]
 800c90c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c910:	b2db      	uxtb	r3, r3
 800c912:	4619      	mov	r1, r3
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f985 	bl	800cc24 <USBD_CoreFindEP>
 800c91a:	4603      	mov	r3, r0
 800c91c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
 800c920:	2bff      	cmp	r3, #255	; 0xff
 800c922:	d025      	beq.n	800c970 <USBD_LL_DataInStage+0x15a>
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d122      	bne.n	800c970 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b03      	cmp	r3, #3
 800c934:	d11c      	bne.n	800c970 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c936:	7dfa      	ldrb	r2, [r7, #23]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	32ae      	adds	r2, #174	; 0xae
 800c93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d014      	beq.n	800c970 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c946:	7dfa      	ldrb	r2, [r7, #23]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c94e:	7dfa      	ldrb	r2, [r7, #23]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	32ae      	adds	r2, #174	; 0xae
 800c954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c958:	695b      	ldr	r3, [r3, #20]
 800c95a:	7afa      	ldrb	r2, [r7, #11]
 800c95c:	4611      	mov	r1, r2
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	4798      	blx	r3
 800c962:	4603      	mov	r3, r0
 800c964:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c966:	7dbb      	ldrb	r3, [r7, #22]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c96c:	7dbb      	ldrb	r3, [r7, #22]
 800c96e:	e000      	b.n	800c972 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2201      	movs	r2, #1
 800c98a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d014      	beq.n	800c9e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00e      	beq.n	800c9e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	6852      	ldr	r2, [r2, #4]
 800c9ce:	b2d2      	uxtb	r2, r2
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	4798      	blx	r3
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9e0:	2340      	movs	r3, #64	; 0x40
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f001 fc8d 	bl	800e306 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2240      	movs	r2, #64	; 0x40
 800c9f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9fc:	2340      	movs	r3, #64	; 0x40
 800c9fe:	2200      	movs	r2, #0
 800ca00:	2180      	movs	r1, #128	; 0x80
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f001 fc7f 	bl	800e306 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2240      	movs	r2, #64	; 0x40
 800ca12:	621a      	str	r2, [r3, #32]

  return ret;
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca1e:	b480      	push	{r7}
 800ca20:	b083      	sub	sp, #12
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	460b      	mov	r3, r1
 800ca28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	78fa      	ldrb	r2, [r7, #3]
 800ca2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	370c      	adds	r7, #12
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b083      	sub	sp, #12
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b04      	cmp	r3, #4
 800ca50:	d006      	beq.n	800ca60 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2204      	movs	r2, #4
 800ca64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	370c      	adds	r7, #12
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b083      	sub	sp, #12
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	2b04      	cmp	r3, #4
 800ca88:	d106      	bne.n	800ca98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b082      	sub	sp, #8
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b03      	cmp	r3, #3
 800cab8:	d110      	bne.n	800cadc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00b      	beq.n	800cadc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caca:	69db      	ldr	r3, [r3, #28]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d005      	beq.n	800cadc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cad6:	69db      	ldr	r3, [r3, #28]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b082      	sub	sp, #8
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	460b      	mov	r3, r1
 800caf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	32ae      	adds	r2, #174	; 0xae
 800cafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d101      	bne.n	800cb08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb04:	2303      	movs	r3, #3
 800cb06:	e01c      	b.n	800cb42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b03      	cmp	r3, #3
 800cb12:	d115      	bne.n	800cb40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	32ae      	adds	r2, #174	; 0xae
 800cb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb22:	6a1b      	ldr	r3, [r3, #32]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00b      	beq.n	800cb40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	32ae      	adds	r2, #174	; 0xae
 800cb32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb36:	6a1b      	ldr	r3, [r3, #32]
 800cb38:	78fa      	ldrb	r2, [r7, #3]
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	460b      	mov	r3, r1
 800cb54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	32ae      	adds	r2, #174	; 0xae
 800cb60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	e01c      	b.n	800cba6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	d115      	bne.n	800cba4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	32ae      	adds	r2, #174	; 0xae
 800cb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00b      	beq.n	800cba4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	32ae      	adds	r2, #174	; 0xae
 800cb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9c:	78fa      	ldrb	r2, [r7, #3]
 800cb9e:	4611      	mov	r1, r2
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cbae:	b480      	push	{r7}
 800cbb0:	b083      	sub	sp, #12
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00e      	beq.n	800cc00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	6852      	ldr	r2, [r2, #4]
 800cbee:	b2d2      	uxtb	r2, r2
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	4798      	blx	r3
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	460b      	mov	r3, r1
 800cc14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	370c      	adds	r7, #12
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b086      	sub	sp, #24
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	460b      	mov	r3, r1
 800cc48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	885b      	ldrh	r3, [r3, #2]
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d920      	bls.n	800cca8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cc6e:	e013      	b.n	800cc98 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cc70:	f107 030a 	add.w	r3, r7, #10
 800cc74:	4619      	mov	r1, r3
 800cc76:	6978      	ldr	r0, [r7, #20]
 800cc78:	f000 f81b 	bl	800ccb2 <USBD_GetNextDesc>
 800cc7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	785b      	ldrb	r3, [r3, #1]
 800cc82:	2b05      	cmp	r3, #5
 800cc84:	d108      	bne.n	800cc98 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	789b      	ldrb	r3, [r3, #2]
 800cc8e:	78fa      	ldrb	r2, [r7, #3]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d008      	beq.n	800cca6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	885b      	ldrh	r3, [r3, #2]
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	897b      	ldrh	r3, [r7, #10]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d8e5      	bhi.n	800cc70 <USBD_GetEpDesc+0x32>
 800cca4:	e000      	b.n	800cca8 <USBD_GetEpDesc+0x6a>
          break;
 800cca6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cca8:	693b      	ldr	r3, [r7, #16]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3718      	adds	r7, #24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ccb2:	b480      	push	{r7}
 800ccb4:	b085      	sub	sp, #20
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
 800ccba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	881a      	ldrh	r2, [r3, #0]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	4413      	add	r3, r2
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4413      	add	r3, r2
 800ccdc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ccde:	68fb      	ldr	r3, [r7, #12]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b087      	sub	sp, #28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	3301      	adds	r3, #1
 800cd02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cd0a:	8a3b      	ldrh	r3, [r7, #16]
 800cd0c:	021b      	lsls	r3, r3, #8
 800cd0e:	b21a      	sxth	r2, r3
 800cd10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	b21b      	sxth	r3, r3
 800cd18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cd1a:	89fb      	ldrh	r3, [r7, #14]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	371c      	adds	r7, #28
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd3e:	2b40      	cmp	r3, #64	; 0x40
 800cd40:	d005      	beq.n	800cd4e <USBD_StdDevReq+0x26>
 800cd42:	2b40      	cmp	r3, #64	; 0x40
 800cd44:	d857      	bhi.n	800cdf6 <USBD_StdDevReq+0xce>
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00f      	beq.n	800cd6a <USBD_StdDevReq+0x42>
 800cd4a:	2b20      	cmp	r3, #32
 800cd4c:	d153      	bne.n	800cdf6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	32ae      	adds	r2, #174	; 0xae
 800cd58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	6839      	ldr	r1, [r7, #0]
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	4798      	blx	r3
 800cd64:	4603      	mov	r3, r0
 800cd66:	73fb      	strb	r3, [r7, #15]
      break;
 800cd68:	e04a      	b.n	800ce00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	785b      	ldrb	r3, [r3, #1]
 800cd6e:	2b09      	cmp	r3, #9
 800cd70:	d83b      	bhi.n	800cdea <USBD_StdDevReq+0xc2>
 800cd72:	a201      	add	r2, pc, #4	; (adr r2, 800cd78 <USBD_StdDevReq+0x50>)
 800cd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd78:	0800cdcd 	.word	0x0800cdcd
 800cd7c:	0800cde1 	.word	0x0800cde1
 800cd80:	0800cdeb 	.word	0x0800cdeb
 800cd84:	0800cdd7 	.word	0x0800cdd7
 800cd88:	0800cdeb 	.word	0x0800cdeb
 800cd8c:	0800cdab 	.word	0x0800cdab
 800cd90:	0800cda1 	.word	0x0800cda1
 800cd94:	0800cdeb 	.word	0x0800cdeb
 800cd98:	0800cdc3 	.word	0x0800cdc3
 800cd9c:	0800cdb5 	.word	0x0800cdb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cda0:	6839      	ldr	r1, [r7, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 fa3c 	bl	800d220 <USBD_GetDescriptor>
          break;
 800cda8:	e024      	b.n	800cdf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fba1 	bl	800d4f4 <USBD_SetAddress>
          break;
 800cdb2:	e01f      	b.n	800cdf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 fbe0 	bl	800d57c <USBD_SetConfig>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73fb      	strb	r3, [r7, #15]
          break;
 800cdc0:	e018      	b.n	800cdf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fc83 	bl	800d6d0 <USBD_GetConfig>
          break;
 800cdca:	e013      	b.n	800cdf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fcb4 	bl	800d73c <USBD_GetStatus>
          break;
 800cdd4:	e00e      	b.n	800cdf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fce3 	bl	800d7a4 <USBD_SetFeature>
          break;
 800cdde:	e009      	b.n	800cdf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 fd07 	bl	800d7f6 <USBD_ClrFeature>
          break;
 800cde8:	e004      	b.n	800cdf4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cdea:	6839      	ldr	r1, [r7, #0]
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 fd5e 	bl	800d8ae <USBD_CtlError>
          break;
 800cdf2:	bf00      	nop
      }
      break;
 800cdf4:	e004      	b.n	800ce00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cdf6:	6839      	ldr	r1, [r7, #0]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 fd58 	bl	800d8ae <USBD_CtlError>
      break;
 800cdfe:	bf00      	nop
  }

  return ret;
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop

0800ce0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce16:	2300      	movs	r3, #0
 800ce18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce22:	2b40      	cmp	r3, #64	; 0x40
 800ce24:	d005      	beq.n	800ce32 <USBD_StdItfReq+0x26>
 800ce26:	2b40      	cmp	r3, #64	; 0x40
 800ce28:	d852      	bhi.n	800ced0 <USBD_StdItfReq+0xc4>
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d001      	beq.n	800ce32 <USBD_StdItfReq+0x26>
 800ce2e:	2b20      	cmp	r3, #32
 800ce30:	d14e      	bne.n	800ced0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d840      	bhi.n	800cec2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	889b      	ldrh	r3, [r3, #4]
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d836      	bhi.n	800ceb8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	889b      	ldrh	r3, [r3, #4]
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	4619      	mov	r1, r3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7ff fed9 	bl	800cc0a <USBD_CoreFindIF>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce5c:	7bbb      	ldrb	r3, [r7, #14]
 800ce5e:	2bff      	cmp	r3, #255	; 0xff
 800ce60:	d01d      	beq.n	800ce9e <USBD_StdItfReq+0x92>
 800ce62:	7bbb      	ldrb	r3, [r7, #14]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d11a      	bne.n	800ce9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ce68:	7bba      	ldrb	r2, [r7, #14]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	32ae      	adds	r2, #174	; 0xae
 800ce6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00f      	beq.n	800ce98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ce78:	7bba      	ldrb	r2, [r7, #14]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce80:	7bba      	ldrb	r2, [r7, #14]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	32ae      	adds	r2, #174	; 0xae
 800ce86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	4798      	blx	r3
 800ce92:	4603      	mov	r3, r0
 800ce94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce96:	e004      	b.n	800cea2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce9c:	e001      	b.n	800cea2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	88db      	ldrh	r3, [r3, #6]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d110      	bne.n	800cecc <USBD_StdItfReq+0xc0>
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10d      	bne.n	800cecc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 fdc7 	bl	800da44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ceb6:	e009      	b.n	800cecc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 fcf7 	bl	800d8ae <USBD_CtlError>
          break;
 800cec0:	e004      	b.n	800cecc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cec2:	6839      	ldr	r1, [r7, #0]
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 fcf2 	bl	800d8ae <USBD_CtlError>
          break;
 800ceca:	e000      	b.n	800cece <USBD_StdItfReq+0xc2>
          break;
 800cecc:	bf00      	nop
      }
      break;
 800cece:	e004      	b.n	800ceda <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ced0:	6839      	ldr	r1, [r7, #0]
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 fceb 	bl	800d8ae <USBD_CtlError>
      break;
 800ced8:	bf00      	nop
  }

  return ret;
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	889b      	ldrh	r3, [r3, #4]
 800cef6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf00:	2b40      	cmp	r3, #64	; 0x40
 800cf02:	d007      	beq.n	800cf14 <USBD_StdEPReq+0x30>
 800cf04:	2b40      	cmp	r3, #64	; 0x40
 800cf06:	f200 817f 	bhi.w	800d208 <USBD_StdEPReq+0x324>
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d02a      	beq.n	800cf64 <USBD_StdEPReq+0x80>
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	f040 817a 	bne.w	800d208 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf14:	7bbb      	ldrb	r3, [r7, #14]
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7ff fe83 	bl	800cc24 <USBD_CoreFindEP>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf22:	7b7b      	ldrb	r3, [r7, #13]
 800cf24:	2bff      	cmp	r3, #255	; 0xff
 800cf26:	f000 8174 	beq.w	800d212 <USBD_StdEPReq+0x32e>
 800cf2a:	7b7b      	ldrb	r3, [r7, #13]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f040 8170 	bne.w	800d212 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cf32:	7b7a      	ldrb	r2, [r7, #13]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cf3a:	7b7a      	ldrb	r2, [r7, #13]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	32ae      	adds	r2, #174	; 0xae
 800cf40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 8163 	beq.w	800d212 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cf4c:	7b7a      	ldrb	r2, [r7, #13]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	32ae      	adds	r2, #174	; 0xae
 800cf52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	4798      	blx	r3
 800cf5e:	4603      	mov	r3, r0
 800cf60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf62:	e156      	b.n	800d212 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	785b      	ldrb	r3, [r3, #1]
 800cf68:	2b03      	cmp	r3, #3
 800cf6a:	d008      	beq.n	800cf7e <USBD_StdEPReq+0x9a>
 800cf6c:	2b03      	cmp	r3, #3
 800cf6e:	f300 8145 	bgt.w	800d1fc <USBD_StdEPReq+0x318>
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 809b 	beq.w	800d0ae <USBD_StdEPReq+0x1ca>
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d03c      	beq.n	800cff6 <USBD_StdEPReq+0x112>
 800cf7c:	e13e      	b.n	800d1fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	d002      	beq.n	800cf90 <USBD_StdEPReq+0xac>
 800cf8a:	2b03      	cmp	r3, #3
 800cf8c:	d016      	beq.n	800cfbc <USBD_StdEPReq+0xd8>
 800cf8e:	e02c      	b.n	800cfea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf90:	7bbb      	ldrb	r3, [r7, #14]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00d      	beq.n	800cfb2 <USBD_StdEPReq+0xce>
 800cf96:	7bbb      	ldrb	r3, [r7, #14]
 800cf98:	2b80      	cmp	r3, #128	; 0x80
 800cf9a:	d00a      	beq.n	800cfb2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf9c:	7bbb      	ldrb	r3, [r7, #14]
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f001 f9f5 	bl	800e390 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfa6:	2180      	movs	r1, #128	; 0x80
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f001 f9f1 	bl	800e390 <USBD_LL_StallEP>
 800cfae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cfb0:	e020      	b.n	800cff4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fc7a 	bl	800d8ae <USBD_CtlError>
              break;
 800cfba:	e01b      	b.n	800cff4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	885b      	ldrh	r3, [r3, #2]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10e      	bne.n	800cfe2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cfc4:	7bbb      	ldrb	r3, [r7, #14]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00b      	beq.n	800cfe2 <USBD_StdEPReq+0xfe>
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	2b80      	cmp	r3, #128	; 0x80
 800cfce:	d008      	beq.n	800cfe2 <USBD_StdEPReq+0xfe>
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	88db      	ldrh	r3, [r3, #6]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d104      	bne.n	800cfe2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfd8:	7bbb      	ldrb	r3, [r7, #14]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f001 f9d7 	bl	800e390 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fd2e 	bl	800da44 <USBD_CtlSendStatus>

              break;
 800cfe8:	e004      	b.n	800cff4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cfea:	6839      	ldr	r1, [r7, #0]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fc5e 	bl	800d8ae <USBD_CtlError>
              break;
 800cff2:	bf00      	nop
          }
          break;
 800cff4:	e107      	b.n	800d206 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d002      	beq.n	800d008 <USBD_StdEPReq+0x124>
 800d002:	2b03      	cmp	r3, #3
 800d004:	d016      	beq.n	800d034 <USBD_StdEPReq+0x150>
 800d006:	e04b      	b.n	800d0a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d008:	7bbb      	ldrb	r3, [r7, #14]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00d      	beq.n	800d02a <USBD_StdEPReq+0x146>
 800d00e:	7bbb      	ldrb	r3, [r7, #14]
 800d010:	2b80      	cmp	r3, #128	; 0x80
 800d012:	d00a      	beq.n	800d02a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d014:	7bbb      	ldrb	r3, [r7, #14]
 800d016:	4619      	mov	r1, r3
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f001 f9b9 	bl	800e390 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d01e:	2180      	movs	r1, #128	; 0x80
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f001 f9b5 	bl	800e390 <USBD_LL_StallEP>
 800d026:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d028:	e040      	b.n	800d0ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 fc3e 	bl	800d8ae <USBD_CtlError>
              break;
 800d032:	e03b      	b.n	800d0ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	885b      	ldrh	r3, [r3, #2]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d136      	bne.n	800d0aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d03c:	7bbb      	ldrb	r3, [r7, #14]
 800d03e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d042:	2b00      	cmp	r3, #0
 800d044:	d004      	beq.n	800d050 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d046:	7bbb      	ldrb	r3, [r7, #14]
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f001 f9bf 	bl	800e3ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fcf7 	bl	800da44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d056:	7bbb      	ldrb	r3, [r7, #14]
 800d058:	4619      	mov	r1, r3
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f7ff fde2 	bl	800cc24 <USBD_CoreFindEP>
 800d060:	4603      	mov	r3, r0
 800d062:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d064:	7b7b      	ldrb	r3, [r7, #13]
 800d066:	2bff      	cmp	r3, #255	; 0xff
 800d068:	d01f      	beq.n	800d0aa <USBD_StdEPReq+0x1c6>
 800d06a:	7b7b      	ldrb	r3, [r7, #13]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d11c      	bne.n	800d0aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d070:	7b7a      	ldrb	r2, [r7, #13]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d078:	7b7a      	ldrb	r2, [r7, #13]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	32ae      	adds	r2, #174	; 0xae
 800d07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d010      	beq.n	800d0aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d088:	7b7a      	ldrb	r2, [r7, #13]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	32ae      	adds	r2, #174	; 0xae
 800d08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	4798      	blx	r3
 800d09a:	4603      	mov	r3, r0
 800d09c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d09e:	e004      	b.n	800d0aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 fc03 	bl	800d8ae <USBD_CtlError>
              break;
 800d0a8:	e000      	b.n	800d0ac <USBD_StdEPReq+0x1c8>
              break;
 800d0aa:	bf00      	nop
          }
          break;
 800d0ac:	e0ab      	b.n	800d206 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d002      	beq.n	800d0c0 <USBD_StdEPReq+0x1dc>
 800d0ba:	2b03      	cmp	r3, #3
 800d0bc:	d032      	beq.n	800d124 <USBD_StdEPReq+0x240>
 800d0be:	e097      	b.n	800d1f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0c0:	7bbb      	ldrb	r3, [r7, #14]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d007      	beq.n	800d0d6 <USBD_StdEPReq+0x1f2>
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	2b80      	cmp	r3, #128	; 0x80
 800d0ca:	d004      	beq.n	800d0d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fbed 	bl	800d8ae <USBD_CtlError>
                break;
 800d0d4:	e091      	b.n	800d1fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	da0b      	bge.n	800d0f6 <USBD_StdEPReq+0x212>
 800d0de:	7bbb      	ldrb	r3, [r7, #14]
 800d0e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	3310      	adds	r3, #16
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	e00b      	b.n	800d10e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0f6:	7bbb      	ldrb	r3, [r7, #14]
 800d0f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4413      	add	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	4413      	add	r3, r2
 800d10c:	3304      	adds	r3, #4
 800d10e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	2200      	movs	r2, #0
 800d114:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2202      	movs	r2, #2
 800d11a:	4619      	mov	r1, r3
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fc37 	bl	800d990 <USBD_CtlSendData>
              break;
 800d122:	e06a      	b.n	800d1fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	da11      	bge.n	800d150 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d12c:	7bbb      	ldrb	r3, [r7, #14]
 800d12e:	f003 020f 	and.w	r2, r3, #15
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	4613      	mov	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	440b      	add	r3, r1
 800d13e:	3324      	adds	r3, #36	; 0x24
 800d140:	881b      	ldrh	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d117      	bne.n	800d176 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 fbb0 	bl	800d8ae <USBD_CtlError>
                  break;
 800d14e:	e054      	b.n	800d1fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d150:	7bbb      	ldrb	r3, [r7, #14]
 800d152:	f003 020f 	and.w	r2, r3, #15
 800d156:	6879      	ldr	r1, [r7, #4]
 800d158:	4613      	mov	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	440b      	add	r3, r1
 800d162:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d104      	bne.n	800d176 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d16c:	6839      	ldr	r1, [r7, #0]
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 fb9d 	bl	800d8ae <USBD_CtlError>
                  break;
 800d174:	e041      	b.n	800d1fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d176:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	da0b      	bge.n	800d196 <USBD_StdEPReq+0x2b2>
 800d17e:	7bbb      	ldrb	r3, [r7, #14]
 800d180:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d184:	4613      	mov	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	3310      	adds	r3, #16
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	4413      	add	r3, r2
 800d192:	3304      	adds	r3, #4
 800d194:	e00b      	b.n	800d1ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d196:	7bbb      	ldrb	r3, [r7, #14]
 800d198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d19c:	4613      	mov	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d1b0:	7bbb      	ldrb	r3, [r7, #14]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d002      	beq.n	800d1bc <USBD_StdEPReq+0x2d8>
 800d1b6:	7bbb      	ldrb	r3, [r7, #14]
 800d1b8:	2b80      	cmp	r3, #128	; 0x80
 800d1ba:	d103      	bne.n	800d1c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	601a      	str	r2, [r3, #0]
 800d1c2:	e00e      	b.n	800d1e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f001 f91f 	bl	800e40c <USBD_LL_IsStallEP>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d003      	beq.n	800d1dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	601a      	str	r2, [r3, #0]
 800d1da:	e002      	b.n	800d1e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	2202      	movs	r2, #2
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 fbd1 	bl	800d990 <USBD_CtlSendData>
              break;
 800d1ee:	e004      	b.n	800d1fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d1f0:	6839      	ldr	r1, [r7, #0]
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 fb5b 	bl	800d8ae <USBD_CtlError>
              break;
 800d1f8:	bf00      	nop
          }
          break;
 800d1fa:	e004      	b.n	800d206 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d1fc:	6839      	ldr	r1, [r7, #0]
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 fb55 	bl	800d8ae <USBD_CtlError>
          break;
 800d204:	bf00      	nop
      }
      break;
 800d206:	e005      	b.n	800d214 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d208:	6839      	ldr	r1, [r7, #0]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 fb4f 	bl	800d8ae <USBD_CtlError>
      break;
 800d210:	e000      	b.n	800d214 <USBD_StdEPReq+0x330>
      break;
 800d212:	bf00      	nop
  }

  return ret;
 800d214:	7bfb      	ldrb	r3, [r7, #15]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d22a:	2300      	movs	r3, #0
 800d22c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d232:	2300      	movs	r3, #0
 800d234:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	885b      	ldrh	r3, [r3, #2]
 800d23a:	0a1b      	lsrs	r3, r3, #8
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	3b01      	subs	r3, #1
 800d240:	2b06      	cmp	r3, #6
 800d242:	f200 8128 	bhi.w	800d496 <USBD_GetDescriptor+0x276>
 800d246:	a201      	add	r2, pc, #4	; (adr r2, 800d24c <USBD_GetDescriptor+0x2c>)
 800d248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d24c:	0800d269 	.word	0x0800d269
 800d250:	0800d281 	.word	0x0800d281
 800d254:	0800d2c1 	.word	0x0800d2c1
 800d258:	0800d497 	.word	0x0800d497
 800d25c:	0800d497 	.word	0x0800d497
 800d260:	0800d437 	.word	0x0800d437
 800d264:	0800d463 	.word	0x0800d463
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	7c12      	ldrb	r2, [r2, #16]
 800d274:	f107 0108 	add.w	r1, r7, #8
 800d278:	4610      	mov	r0, r2
 800d27a:	4798      	blx	r3
 800d27c:	60f8      	str	r0, [r7, #12]
      break;
 800d27e:	e112      	b.n	800d4a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	7c1b      	ldrb	r3, [r3, #16]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d10d      	bne.n	800d2a4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d290:	f107 0208 	add.w	r2, r7, #8
 800d294:	4610      	mov	r0, r2
 800d296:	4798      	blx	r3
 800d298:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	3301      	adds	r3, #1
 800d29e:	2202      	movs	r2, #2
 800d2a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d2a2:	e100      	b.n	800d4a6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ac:	f107 0208 	add.w	r2, r7, #8
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	4798      	blx	r3
 800d2b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	701a      	strb	r2, [r3, #0]
      break;
 800d2be:	e0f2      	b.n	800d4a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	885b      	ldrh	r3, [r3, #2]
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b05      	cmp	r3, #5
 800d2c8:	f200 80ac 	bhi.w	800d424 <USBD_GetDescriptor+0x204>
 800d2cc:	a201      	add	r2, pc, #4	; (adr r2, 800d2d4 <USBD_GetDescriptor+0xb4>)
 800d2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d2:	bf00      	nop
 800d2d4:	0800d2ed 	.word	0x0800d2ed
 800d2d8:	0800d321 	.word	0x0800d321
 800d2dc:	0800d355 	.word	0x0800d355
 800d2e0:	0800d389 	.word	0x0800d389
 800d2e4:	0800d3bd 	.word	0x0800d3bd
 800d2e8:	0800d3f1 	.word	0x0800d3f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00b      	beq.n	800d310 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	7c12      	ldrb	r2, [r2, #16]
 800d304:	f107 0108 	add.w	r1, r7, #8
 800d308:	4610      	mov	r0, r2
 800d30a:	4798      	blx	r3
 800d30c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d30e:	e091      	b.n	800d434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d310:	6839      	ldr	r1, [r7, #0]
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 facb 	bl	800d8ae <USBD_CtlError>
            err++;
 800d318:	7afb      	ldrb	r3, [r7, #11]
 800d31a:	3301      	adds	r3, #1
 800d31c:	72fb      	strb	r3, [r7, #11]
          break;
 800d31e:	e089      	b.n	800d434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00b      	beq.n	800d344 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	7c12      	ldrb	r2, [r2, #16]
 800d338:	f107 0108 	add.w	r1, r7, #8
 800d33c:	4610      	mov	r0, r2
 800d33e:	4798      	blx	r3
 800d340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d342:	e077      	b.n	800d434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d344:	6839      	ldr	r1, [r7, #0]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 fab1 	bl	800d8ae <USBD_CtlError>
            err++;
 800d34c:	7afb      	ldrb	r3, [r7, #11]
 800d34e:	3301      	adds	r3, #1
 800d350:	72fb      	strb	r3, [r7, #11]
          break;
 800d352:	e06f      	b.n	800d434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00b      	beq.n	800d378 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	7c12      	ldrb	r2, [r2, #16]
 800d36c:	f107 0108 	add.w	r1, r7, #8
 800d370:	4610      	mov	r0, r2
 800d372:	4798      	blx	r3
 800d374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d376:	e05d      	b.n	800d434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fa97 	bl	800d8ae <USBD_CtlError>
            err++;
 800d380:	7afb      	ldrb	r3, [r7, #11]
 800d382:	3301      	adds	r3, #1
 800d384:	72fb      	strb	r3, [r7, #11]
          break;
 800d386:	e055      	b.n	800d434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00b      	beq.n	800d3ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d39a:	691b      	ldr	r3, [r3, #16]
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	7c12      	ldrb	r2, [r2, #16]
 800d3a0:	f107 0108 	add.w	r1, r7, #8
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	4798      	blx	r3
 800d3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3aa:	e043      	b.n	800d434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3ac:	6839      	ldr	r1, [r7, #0]
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 fa7d 	bl	800d8ae <USBD_CtlError>
            err++;
 800d3b4:	7afb      	ldrb	r3, [r7, #11]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ba:	e03b      	b.n	800d434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00b      	beq.n	800d3e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3ce:	695b      	ldr	r3, [r3, #20]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	7c12      	ldrb	r2, [r2, #16]
 800d3d4:	f107 0108 	add.w	r1, r7, #8
 800d3d8:	4610      	mov	r0, r2
 800d3da:	4798      	blx	r3
 800d3dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3de:	e029      	b.n	800d434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fa63 	bl	800d8ae <USBD_CtlError>
            err++;
 800d3e8:	7afb      	ldrb	r3, [r7, #11]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ee:	e021      	b.n	800d434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3f6:	699b      	ldr	r3, [r3, #24]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00b      	beq.n	800d414 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	7c12      	ldrb	r2, [r2, #16]
 800d408:	f107 0108 	add.w	r1, r7, #8
 800d40c:	4610      	mov	r0, r2
 800d40e:	4798      	blx	r3
 800d410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d412:	e00f      	b.n	800d434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d414:	6839      	ldr	r1, [r7, #0]
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 fa49 	bl	800d8ae <USBD_CtlError>
            err++;
 800d41c:	7afb      	ldrb	r3, [r7, #11]
 800d41e:	3301      	adds	r3, #1
 800d420:	72fb      	strb	r3, [r7, #11]
          break;
 800d422:	e007      	b.n	800d434 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fa41 	bl	800d8ae <USBD_CtlError>
          err++;
 800d42c:	7afb      	ldrb	r3, [r7, #11]
 800d42e:	3301      	adds	r3, #1
 800d430:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d432:	bf00      	nop
      }
      break;
 800d434:	e037      	b.n	800d4a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	7c1b      	ldrb	r3, [r3, #16]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d109      	bne.n	800d452 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d446:	f107 0208 	add.w	r2, r7, #8
 800d44a:	4610      	mov	r0, r2
 800d44c:	4798      	blx	r3
 800d44e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d450:	e029      	b.n	800d4a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d452:	6839      	ldr	r1, [r7, #0]
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 fa2a 	bl	800d8ae <USBD_CtlError>
        err++;
 800d45a:	7afb      	ldrb	r3, [r7, #11]
 800d45c:	3301      	adds	r3, #1
 800d45e:	72fb      	strb	r3, [r7, #11]
      break;
 800d460:	e021      	b.n	800d4a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	7c1b      	ldrb	r3, [r3, #16]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10d      	bne.n	800d486 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d472:	f107 0208 	add.w	r2, r7, #8
 800d476:	4610      	mov	r0, r2
 800d478:	4798      	blx	r3
 800d47a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	3301      	adds	r3, #1
 800d480:	2207      	movs	r2, #7
 800d482:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d484:	e00f      	b.n	800d4a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fa10 	bl	800d8ae <USBD_CtlError>
        err++;
 800d48e:	7afb      	ldrb	r3, [r7, #11]
 800d490:	3301      	adds	r3, #1
 800d492:	72fb      	strb	r3, [r7, #11]
      break;
 800d494:	e007      	b.n	800d4a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d496:	6839      	ldr	r1, [r7, #0]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 fa08 	bl	800d8ae <USBD_CtlError>
      err++;
 800d49e:	7afb      	ldrb	r3, [r7, #11]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	72fb      	strb	r3, [r7, #11]
      break;
 800d4a4:	bf00      	nop
  }

  if (err != 0U)
 800d4a6:	7afb      	ldrb	r3, [r7, #11]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d11e      	bne.n	800d4ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	88db      	ldrh	r3, [r3, #6]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d016      	beq.n	800d4e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d4b4:	893b      	ldrh	r3, [r7, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00e      	beq.n	800d4d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	88da      	ldrh	r2, [r3, #6]
 800d4be:	893b      	ldrh	r3, [r7, #8]
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	bf28      	it	cs
 800d4c4:	4613      	movcs	r3, r2
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d4ca:	893b      	ldrh	r3, [r7, #8]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	68f9      	ldr	r1, [r7, #12]
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fa5d 	bl	800d990 <USBD_CtlSendData>
 800d4d6:	e009      	b.n	800d4ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f9e7 	bl	800d8ae <USBD_CtlError>
 800d4e0:	e004      	b.n	800d4ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 faae 	bl	800da44 <USBD_CtlSendStatus>
 800d4e8:	e000      	b.n	800d4ec <USBD_GetDescriptor+0x2cc>
    return;
 800d4ea:	bf00      	nop
  }
}
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop

0800d4f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	889b      	ldrh	r3, [r3, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d131      	bne.n	800d56a <USBD_SetAddress+0x76>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	88db      	ldrh	r3, [r3, #6]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d12d      	bne.n	800d56a <USBD_SetAddress+0x76>
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	885b      	ldrh	r3, [r3, #2]
 800d512:	2b7f      	cmp	r3, #127	; 0x7f
 800d514:	d829      	bhi.n	800d56a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	885b      	ldrh	r3, [r3, #2]
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d520:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b03      	cmp	r3, #3
 800d52c:	d104      	bne.n	800d538 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 f9bc 	bl	800d8ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d536:	e01d      	b.n	800d574 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	7bfa      	ldrb	r2, [r7, #15]
 800d53c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d540:	7bfb      	ldrb	r3, [r7, #15]
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 ff8d 	bl	800e464 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fa7a 	bl	800da44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d550:	7bfb      	ldrb	r3, [r7, #15]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d004      	beq.n	800d560 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2202      	movs	r2, #2
 800d55a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d55e:	e009      	b.n	800d574 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d568:	e004      	b.n	800d574 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 f99e 	bl	800d8ae <USBD_CtlError>
  }
}
 800d572:	bf00      	nop
 800d574:	bf00      	nop
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d586:	2300      	movs	r3, #0
 800d588:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	885b      	ldrh	r3, [r3, #2]
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	4b4e      	ldr	r3, [pc, #312]	; (800d6cc <USBD_SetConfig+0x150>)
 800d592:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d594:	4b4d      	ldr	r3, [pc, #308]	; (800d6cc <USBD_SetConfig+0x150>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d905      	bls.n	800d5a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d59c:	6839      	ldr	r1, [r7, #0]
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f985 	bl	800d8ae <USBD_CtlError>
    return USBD_FAIL;
 800d5a4:	2303      	movs	r3, #3
 800d5a6:	e08c      	b.n	800d6c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d002      	beq.n	800d5ba <USBD_SetConfig+0x3e>
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d029      	beq.n	800d60c <USBD_SetConfig+0x90>
 800d5b8:	e075      	b.n	800d6a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d5ba:	4b44      	ldr	r3, [pc, #272]	; (800d6cc <USBD_SetConfig+0x150>)
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d020      	beq.n	800d604 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d5c2:	4b42      	ldr	r3, [pc, #264]	; (800d6cc <USBD_SetConfig+0x150>)
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d5cc:	4b3f      	ldr	r3, [pc, #252]	; (800d6cc <USBD_SetConfig+0x150>)
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f7fe ffe1 	bl	800c59a <USBD_SetClassConfig>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d5dc:	7bfb      	ldrb	r3, [r7, #15]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d008      	beq.n	800d5f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 f962 	bl	800d8ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2202      	movs	r2, #2
 800d5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d5f2:	e065      	b.n	800d6c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 fa25 	bl	800da44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2203      	movs	r2, #3
 800d5fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d602:	e05d      	b.n	800d6c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fa1d 	bl	800da44 <USBD_CtlSendStatus>
      break;
 800d60a:	e059      	b.n	800d6c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d60c:	4b2f      	ldr	r3, [pc, #188]	; (800d6cc <USBD_SetConfig+0x150>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d112      	bne.n	800d63a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2202      	movs	r2, #2
 800d618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d61c:	4b2b      	ldr	r3, [pc, #172]	; (800d6cc <USBD_SetConfig+0x150>)
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	461a      	mov	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d626:	4b29      	ldr	r3, [pc, #164]	; (800d6cc <USBD_SetConfig+0x150>)
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7fe ffd0 	bl	800c5d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fa06 	bl	800da44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d638:	e042      	b.n	800d6c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d63a:	4b24      	ldr	r3, [pc, #144]	; (800d6cc <USBD_SetConfig+0x150>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	461a      	mov	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	429a      	cmp	r2, r3
 800d646:	d02a      	beq.n	800d69e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	4619      	mov	r1, r3
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7fe ffbe 	bl	800c5d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d656:	4b1d      	ldr	r3, [pc, #116]	; (800d6cc <USBD_SetConfig+0x150>)
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	461a      	mov	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d660:	4b1a      	ldr	r3, [pc, #104]	; (800d6cc <USBD_SetConfig+0x150>)
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	4619      	mov	r1, r3
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7fe ff97 	bl	800c59a <USBD_SetClassConfig>
 800d66c:	4603      	mov	r3, r0
 800d66e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d670:	7bfb      	ldrb	r3, [r7, #15]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00f      	beq.n	800d696 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d676:	6839      	ldr	r1, [r7, #0]
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 f918 	bl	800d8ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	b2db      	uxtb	r3, r3
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7fe ffa3 	bl	800c5d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2202      	movs	r2, #2
 800d690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d694:	e014      	b.n	800d6c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f9d4 	bl	800da44 <USBD_CtlSendStatus>
      break;
 800d69c:	e010      	b.n	800d6c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 f9d0 	bl	800da44 <USBD_CtlSendStatus>
      break;
 800d6a4:	e00c      	b.n	800d6c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d6a6:	6839      	ldr	r1, [r7, #0]
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 f900 	bl	800d8ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d6ae:	4b07      	ldr	r3, [pc, #28]	; (800d6cc <USBD_SetConfig+0x150>)
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7fe ff8c 	bl	800c5d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d6be:	bf00      	nop
  }

  return ret;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	240003b8 	.word	0x240003b8

0800d6d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	88db      	ldrh	r3, [r3, #6]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d004      	beq.n	800d6ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d6e2:	6839      	ldr	r1, [r7, #0]
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f8e2 	bl	800d8ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d6ea:	e023      	b.n	800d734 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	dc02      	bgt.n	800d6fe <USBD_GetConfig+0x2e>
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	dc03      	bgt.n	800d704 <USBD_GetConfig+0x34>
 800d6fc:	e015      	b.n	800d72a <USBD_GetConfig+0x5a>
 800d6fe:	2b03      	cmp	r3, #3
 800d700:	d00b      	beq.n	800d71a <USBD_GetConfig+0x4a>
 800d702:	e012      	b.n	800d72a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	3308      	adds	r3, #8
 800d70e:	2201      	movs	r2, #1
 800d710:	4619      	mov	r1, r3
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f93c 	bl	800d990 <USBD_CtlSendData>
        break;
 800d718:	e00c      	b.n	800d734 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	3304      	adds	r3, #4
 800d71e:	2201      	movs	r2, #1
 800d720:	4619      	mov	r1, r3
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 f934 	bl	800d990 <USBD_CtlSendData>
        break;
 800d728:	e004      	b.n	800d734 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 f8be 	bl	800d8ae <USBD_CtlError>
        break;
 800d732:	bf00      	nop
}
 800d734:	bf00      	nop
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	3b01      	subs	r3, #1
 800d750:	2b02      	cmp	r3, #2
 800d752:	d81e      	bhi.n	800d792 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	88db      	ldrh	r3, [r3, #6]
 800d758:	2b02      	cmp	r3, #2
 800d75a:	d004      	beq.n	800d766 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f8a5 	bl	800d8ae <USBD_CtlError>
        break;
 800d764:	e01a      	b.n	800d79c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d772:	2b00      	cmp	r3, #0
 800d774:	d005      	beq.n	800d782 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	f043 0202 	orr.w	r2, r3, #2
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	330c      	adds	r3, #12
 800d786:	2202      	movs	r2, #2
 800d788:	4619      	mov	r1, r3
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f900 	bl	800d990 <USBD_CtlSendData>
      break;
 800d790:	e004      	b.n	800d79c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d792:	6839      	ldr	r1, [r7, #0]
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 f88a 	bl	800d8ae <USBD_CtlError>
      break;
 800d79a:	bf00      	nop
  }
}
 800d79c:	bf00      	nop
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	885b      	ldrh	r3, [r3, #2]
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d107      	bne.n	800d7c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f940 	bl	800da44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d7c4:	e013      	b.n	800d7ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	885b      	ldrh	r3, [r3, #2]
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d10b      	bne.n	800d7e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	889b      	ldrh	r3, [r3, #4]
 800d7d2:	0a1b      	lsrs	r3, r3, #8
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 f930 	bl	800da44 <USBD_CtlSendStatus>
}
 800d7e4:	e003      	b.n	800d7ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 f860 	bl	800d8ae <USBD_CtlError>
}
 800d7ee:	bf00      	nop
 800d7f0:	3708      	adds	r7, #8
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b082      	sub	sp, #8
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
 800d7fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d806:	b2db      	uxtb	r3, r3
 800d808:	3b01      	subs	r3, #1
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d80b      	bhi.n	800d826 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	885b      	ldrh	r3, [r3, #2]
 800d812:	2b01      	cmp	r3, #1
 800d814:	d10c      	bne.n	800d830 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f910 	bl	800da44 <USBD_CtlSendStatus>
      }
      break;
 800d824:	e004      	b.n	800d830 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f840 	bl	800d8ae <USBD_CtlError>
      break;
 800d82e:	e000      	b.n	800d832 <USBD_ClrFeature+0x3c>
      break;
 800d830:	bf00      	nop
  }
}
 800d832:	bf00      	nop
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b084      	sub	sp, #16
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	781a      	ldrb	r2, [r3, #0]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	3301      	adds	r3, #1
 800d854:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	781a      	ldrb	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3301      	adds	r3, #1
 800d862:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f7ff fa41 	bl	800ccec <SWAPBYTE>
 800d86a:	4603      	mov	r3, r0
 800d86c:	461a      	mov	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	3301      	adds	r3, #1
 800d876:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	3301      	adds	r3, #1
 800d87c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f7ff fa34 	bl	800ccec <SWAPBYTE>
 800d884:	4603      	mov	r3, r0
 800d886:	461a      	mov	r2, r3
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	3301      	adds	r3, #1
 800d890:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	3301      	adds	r3, #1
 800d896:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f7ff fa27 	bl	800ccec <SWAPBYTE>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	80da      	strh	r2, [r3, #6]
}
 800d8a6:	bf00      	nop
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b082      	sub	sp, #8
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8b8:	2180      	movs	r1, #128	; 0x80
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 fd68 	bl	800e390 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 fd64 	bl	800e390 <USBD_LL_StallEP>
}
 800d8c8:	bf00      	nop
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d036      	beq.n	800d954 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d8ea:	6938      	ldr	r0, [r7, #16]
 800d8ec:	f000 f836 	bl	800d95c <USBD_GetLen>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	005b      	lsls	r3, r3, #1
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d8fe:	7dfb      	ldrb	r3, [r7, #23]
 800d900:	68ba      	ldr	r2, [r7, #8]
 800d902:	4413      	add	r3, r2
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	7812      	ldrb	r2, [r2, #0]
 800d908:	701a      	strb	r2, [r3, #0]
  idx++;
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
 800d90c:	3301      	adds	r3, #1
 800d90e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d910:	7dfb      	ldrb	r3, [r7, #23]
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	4413      	add	r3, r2
 800d916:	2203      	movs	r2, #3
 800d918:	701a      	strb	r2, [r3, #0]
  idx++;
 800d91a:	7dfb      	ldrb	r3, [r7, #23]
 800d91c:	3301      	adds	r3, #1
 800d91e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d920:	e013      	b.n	800d94a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d922:	7dfb      	ldrb	r3, [r7, #23]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	4413      	add	r3, r2
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	7812      	ldrb	r2, [r2, #0]
 800d92c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	3301      	adds	r3, #1
 800d932:	613b      	str	r3, [r7, #16]
    idx++;
 800d934:	7dfb      	ldrb	r3, [r7, #23]
 800d936:	3301      	adds	r3, #1
 800d938:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d93a:	7dfb      	ldrb	r3, [r7, #23]
 800d93c:	68ba      	ldr	r2, [r7, #8]
 800d93e:	4413      	add	r3, r2
 800d940:	2200      	movs	r2, #0
 800d942:	701a      	strb	r2, [r3, #0]
    idx++;
 800d944:	7dfb      	ldrb	r3, [r7, #23]
 800d946:	3301      	adds	r3, #1
 800d948:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1e7      	bne.n	800d922 <USBD_GetString+0x52>
 800d952:	e000      	b.n	800d956 <USBD_GetString+0x86>
    return;
 800d954:	bf00      	nop
  }
}
 800d956:	3718      	adds	r7, #24
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d96c:	e005      	b.n	800d97a <USBD_GetLen+0x1e>
  {
    len++;
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	3301      	adds	r3, #1
 800d972:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	3301      	adds	r3, #1
 800d978:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1f5      	bne.n	800d96e <USBD_GetLen+0x12>
  }

  return len;
 800d982:	7bfb      	ldrb	r3, [r7, #15]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2202      	movs	r2, #2
 800d9a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f000 fd73 	bl	800e4a2 <USBD_LL_Transmit>

  return USBD_OK;
 800d9bc:	2300      	movs	r3, #0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	60f8      	str	r0, [r7, #12]
 800d9ce:	60b9      	str	r1, [r7, #8]
 800d9d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 fd62 	bl	800e4a2 <USBD_LL_Transmit>

  return USBD_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2203      	movs	r2, #3
 800d9f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	2100      	movs	r1, #0
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f000 fd66 	bl	800e4e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b084      	sub	sp, #16
 800da26:	af00      	add	r7, sp, #0
 800da28:	60f8      	str	r0, [r7, #12]
 800da2a:	60b9      	str	r1, [r7, #8]
 800da2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	2100      	movs	r1, #0
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f000 fd55 	bl	800e4e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3710      	adds	r7, #16
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2204      	movs	r2, #4
 800da50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da54:	2300      	movs	r3, #0
 800da56:	2200      	movs	r2, #0
 800da58:	2100      	movs	r1, #0
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fd21 	bl	800e4a2 <USBD_LL_Transmit>

  return USBD_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2205      	movs	r2, #5
 800da76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da7a:	2300      	movs	r3, #0
 800da7c:	2200      	movs	r2, #0
 800da7e:	2100      	movs	r1, #0
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fd2f 	bl	800e4e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800da96:	2201      	movs	r2, #1
 800da98:	4921      	ldr	r1, [pc, #132]	; (800db20 <MX_USB_DEVICE_Init+0x90>)
 800da9a:	4822      	ldr	r0, [pc, #136]	; (800db24 <MX_USB_DEVICE_Init+0x94>)
 800da9c:	f7fe fd00 	bl	800c4a0 <USBD_Init>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d001      	beq.n	800daaa <MX_USB_DEVICE_Init+0x1a>
  {
    Error_Handler();
 800daa6:	f7f3 f8bb 	bl	8000c20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800daaa:	491f      	ldr	r1, [pc, #124]	; (800db28 <MX_USB_DEVICE_Init+0x98>)
 800daac:	481d      	ldr	r0, [pc, #116]	; (800db24 <MX_USB_DEVICE_Init+0x94>)
 800daae:	f7fe fd27 	bl	800c500 <USBD_RegisterClass>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800dab8:	f7f3 f8b2 	bl	8000c20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800dabc:	491b      	ldr	r1, [pc, #108]	; (800db2c <MX_USB_DEVICE_Init+0x9c>)
 800dabe:	4819      	ldr	r0, [pc, #100]	; (800db24 <MX_USB_DEVICE_Init+0x94>)
 800dac0:	f7fe fc5e 	bl	800c380 <USBD_CDC_RegisterInterface>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d001      	beq.n	800dace <MX_USB_DEVICE_Init+0x3e>
  {
    Error_Handler();
 800daca:	f7f3 f8a9 	bl	8000c20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800dace:	4815      	ldr	r0, [pc, #84]	; (800db24 <MX_USB_DEVICE_Init+0x94>)
 800dad0:	f7fe fd4c 	bl	800c56c <USBD_Start>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <MX_USB_DEVICE_Init+0x4e>
  {
    Error_Handler();
 800dada:	f7f3 f8a1 	bl	8000c20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800dade:	f7f5 ffb5 	bl	8003a4c <HAL_PWREx_EnableUSBVoltageDetector>

  uint8_t txbuf[8];
  	  txbuf[0] = 0x9; //??
 800dae2:	2309      	movs	r3, #9
 800dae4:	703b      	strb	r3, [r7, #0]
  	  txbuf[1] = 0xB0 | 0x00; //0xB0 - Control Change (for hi-res midi) | channel
 800dae6:	23b0      	movs	r3, #176	; 0xb0
 800dae8:	707b      	strb	r3, [r7, #1]
  	  txbuf[2] = 0x7F & 88; // 88 (for hi-res midi)
 800daea:	2358      	movs	r3, #88	; 0x58
 800daec:	70bb      	strb	r3, [r7, #2]
  	  txbuf[3] = 0x7F & 81; //velocity xx.80
 800daee:	2351      	movs	r3, #81	; 0x51
 800daf0:	70fb      	strb	r3, [r7, #3]

  	  txbuf[4] = 0x9; //??
 800daf2:	2309      	movs	r3, #9
 800daf4:	713b      	strb	r3, [r7, #4]
  	  txbuf[5] = 0x90 | 0x00; //0x8 - note off, 0x9 - note on | channel
 800daf6:	2390      	movs	r3, #144	; 0x90
 800daf8:	717b      	strb	r3, [r7, #5]
  	  txbuf[6] = 0x7F & 53; //number note
 800dafa:	2335      	movs	r3, #53	; 0x35
 800dafc:	71bb      	strb	r3, [r7, #6]
  	  txbuf[7] = 0x7F & 86; //velocity 86.xx
 800dafe:	2356      	movs	r3, #86	; 0x56
 800db00:	71fb      	strb	r3, [r7, #7]

  	  HAL_Delay(500);
 800db02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db06:	f7f3 fc13 	bl	8001330 <HAL_Delay>

  USBD_LL_Transmit(&hUsbDeviceHS, 0x81, txbuf, 8);
 800db0a:	463a      	mov	r2, r7
 800db0c:	2308      	movs	r3, #8
 800db0e:	2181      	movs	r1, #129	; 0x81
 800db10:	4804      	ldr	r0, [pc, #16]	; (800db24 <MX_USB_DEVICE_Init+0x94>)
 800db12:	f000 fcc6 	bl	800e4a2 <USBD_LL_Transmit>
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db16:	bf00      	nop
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	240001dc 	.word	0x240001dc
 800db24:	240003bc 	.word	0x240003bc
 800db28:	2400013c 	.word	0x2400013c
 800db2c:	2400022c 	.word	0x2400022c

0800db30 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	4603      	mov	r3, r0
 800db38:	6039      	str	r1, [r7, #0]
 800db3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	2212      	movs	r2, #18
 800db40:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800db42:	4b03      	ldr	r3, [pc, #12]	; (800db50 <USBD_HS_DeviceDescriptor+0x20>)
}
 800db44:	4618      	mov	r0, r3
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	240001f8 	.word	0x240001f8

0800db54 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	4603      	mov	r3, r0
 800db5c:	6039      	str	r1, [r7, #0]
 800db5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	2204      	movs	r2, #4
 800db64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db66:	4b03      	ldr	r3, [pc, #12]	; (800db74 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800db68:	4618      	mov	r0, r3
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr
 800db74:	2400020c 	.word	0x2400020c

0800db78 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	4603      	mov	r3, r0
 800db80:	6039      	str	r1, [r7, #0]
 800db82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d105      	bne.n	800db96 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	4907      	ldr	r1, [pc, #28]	; (800dbac <USBD_HS_ProductStrDescriptor+0x34>)
 800db8e:	4808      	ldr	r0, [pc, #32]	; (800dbb0 <USBD_HS_ProductStrDescriptor+0x38>)
 800db90:	f7ff fe9e 	bl	800d8d0 <USBD_GetString>
 800db94:	e004      	b.n	800dba0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800db96:	683a      	ldr	r2, [r7, #0]
 800db98:	4904      	ldr	r1, [pc, #16]	; (800dbac <USBD_HS_ProductStrDescriptor+0x34>)
 800db9a:	4805      	ldr	r0, [pc, #20]	; (800dbb0 <USBD_HS_ProductStrDescriptor+0x38>)
 800db9c:	f7ff fe98 	bl	800d8d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dba0:	4b02      	ldr	r3, [pc, #8]	; (800dbac <USBD_HS_ProductStrDescriptor+0x34>)
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	24000698 	.word	0x24000698
 800dbb0:	0800e64c 	.word	0x0800e64c

0800dbb4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	4603      	mov	r3, r0
 800dbbc:	6039      	str	r1, [r7, #0]
 800dbbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbc0:	683a      	ldr	r2, [r7, #0]
 800dbc2:	4904      	ldr	r1, [pc, #16]	; (800dbd4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800dbc4:	4804      	ldr	r0, [pc, #16]	; (800dbd8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800dbc6:	f7ff fe83 	bl	800d8d0 <USBD_GetString>
  return USBD_StrDesc;
 800dbca:	4b02      	ldr	r3, [pc, #8]	; (800dbd4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	24000698 	.word	0x24000698
 800dbd8:	0800e664 	.word	0x0800e664

0800dbdc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	6039      	str	r1, [r7, #0]
 800dbe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	221a      	movs	r2, #26
 800dbec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dbee:	f000 f843 	bl	800dc78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dbf2:	4b02      	ldr	r3, [pc, #8]	; (800dbfc <USBD_HS_SerialStrDescriptor+0x20>)
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	24000210 	.word	0x24000210

0800dc00 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	4603      	mov	r3, r0
 800dc08:	6039      	str	r1, [r7, #0]
 800dc0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc0c:	79fb      	ldrb	r3, [r7, #7]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d105      	bne.n	800dc1e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	4907      	ldr	r1, [pc, #28]	; (800dc34 <USBD_HS_ConfigStrDescriptor+0x34>)
 800dc16:	4808      	ldr	r0, [pc, #32]	; (800dc38 <USBD_HS_ConfigStrDescriptor+0x38>)
 800dc18:	f7ff fe5a 	bl	800d8d0 <USBD_GetString>
 800dc1c:	e004      	b.n	800dc28 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	4904      	ldr	r1, [pc, #16]	; (800dc34 <USBD_HS_ConfigStrDescriptor+0x34>)
 800dc22:	4805      	ldr	r0, [pc, #20]	; (800dc38 <USBD_HS_ConfigStrDescriptor+0x38>)
 800dc24:	f7ff fe54 	bl	800d8d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc28:	4b02      	ldr	r3, [pc, #8]	; (800dc34 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	24000698 	.word	0x24000698
 800dc38:	0800e678 	.word	0x0800e678

0800dc3c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	4603      	mov	r3, r0
 800dc44:	6039      	str	r1, [r7, #0]
 800dc46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc48:	79fb      	ldrb	r3, [r7, #7]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d105      	bne.n	800dc5a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800dc4e:	683a      	ldr	r2, [r7, #0]
 800dc50:	4907      	ldr	r1, [pc, #28]	; (800dc70 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800dc52:	4808      	ldr	r0, [pc, #32]	; (800dc74 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800dc54:	f7ff fe3c 	bl	800d8d0 <USBD_GetString>
 800dc58:	e004      	b.n	800dc64 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	4904      	ldr	r1, [pc, #16]	; (800dc70 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800dc5e:	4805      	ldr	r0, [pc, #20]	; (800dc74 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800dc60:	f7ff fe36 	bl	800d8d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc64:	4b02      	ldr	r3, [pc, #8]	; (800dc70 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	24000698 	.word	0x24000698
 800dc74:	0800e684 	.word	0x0800e684

0800dc78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dc7e:	4b0f      	ldr	r3, [pc, #60]	; (800dcbc <Get_SerialNum+0x44>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc84:	4b0e      	ldr	r3, [pc, #56]	; (800dcc0 <Get_SerialNum+0x48>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc8a:	4b0e      	ldr	r3, [pc, #56]	; (800dcc4 <Get_SerialNum+0x4c>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4413      	add	r3, r2
 800dc96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d009      	beq.n	800dcb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc9e:	2208      	movs	r2, #8
 800dca0:	4909      	ldr	r1, [pc, #36]	; (800dcc8 <Get_SerialNum+0x50>)
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f000 f814 	bl	800dcd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dca8:	2204      	movs	r2, #4
 800dcaa:	4908      	ldr	r1, [pc, #32]	; (800dccc <Get_SerialNum+0x54>)
 800dcac:	68b8      	ldr	r0, [r7, #8]
 800dcae:	f000 f80f 	bl	800dcd0 <IntToUnicode>
  }
}
 800dcb2:	bf00      	nop
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	08fff800 	.word	0x08fff800
 800dcc0:	08fff804 	.word	0x08fff804
 800dcc4:	08fff808 	.word	0x08fff808
 800dcc8:	24000212 	.word	0x24000212
 800dccc:	24000222 	.word	0x24000222

0800dcd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b087      	sub	sp, #28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	4613      	mov	r3, r2
 800dcdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dce2:	2300      	movs	r3, #0
 800dce4:	75fb      	strb	r3, [r7, #23]
 800dce6:	e027      	b.n	800dd38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	0f1b      	lsrs	r3, r3, #28
 800dcec:	2b09      	cmp	r3, #9
 800dcee:	d80b      	bhi.n	800dd08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	0f1b      	lsrs	r3, r3, #28
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	7dfb      	ldrb	r3, [r7, #23]
 800dcf8:	005b      	lsls	r3, r3, #1
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	440b      	add	r3, r1
 800dd00:	3230      	adds	r2, #48	; 0x30
 800dd02:	b2d2      	uxtb	r2, r2
 800dd04:	701a      	strb	r2, [r3, #0]
 800dd06:	e00a      	b.n	800dd1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	0f1b      	lsrs	r3, r3, #28
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	7dfb      	ldrb	r3, [r7, #23]
 800dd10:	005b      	lsls	r3, r3, #1
 800dd12:	4619      	mov	r1, r3
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	440b      	add	r3, r1
 800dd18:	3237      	adds	r2, #55	; 0x37
 800dd1a:	b2d2      	uxtb	r2, r2
 800dd1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	011b      	lsls	r3, r3, #4
 800dd22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd24:	7dfb      	ldrb	r3, [r7, #23]
 800dd26:	005b      	lsls	r3, r3, #1
 800dd28:	3301      	adds	r3, #1
 800dd2a:	68ba      	ldr	r2, [r7, #8]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	2200      	movs	r2, #0
 800dd30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd32:	7dfb      	ldrb	r3, [r7, #23]
 800dd34:	3301      	adds	r3, #1
 800dd36:	75fb      	strb	r3, [r7, #23]
 800dd38:	7dfa      	ldrb	r2, [r7, #23]
 800dd3a:	79fb      	ldrb	r3, [r7, #7]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d3d3      	bcc.n	800dce8 <IntToUnicode+0x18>
  }
}
 800dd40:	bf00      	nop
 800dd42:	bf00      	nop
 800dd44:	371c      	adds	r7, #28
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
	...

0800dd50 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800dd54:	2200      	movs	r2, #0
 800dd56:	4905      	ldr	r1, [pc, #20]	; (800dd6c <CDC_Init_HS+0x1c>)
 800dd58:	4805      	ldr	r0, [pc, #20]	; (800dd70 <CDC_Init_HS+0x20>)
 800dd5a:	f7fe fb2b 	bl	800c3b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800dd5e:	4905      	ldr	r1, [pc, #20]	; (800dd74 <CDC_Init_HS+0x24>)
 800dd60:	4803      	ldr	r0, [pc, #12]	; (800dd70 <CDC_Init_HS+0x20>)
 800dd62:	f7fe fb49 	bl	800c3f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dd66:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	24001098 	.word	0x24001098
 800dd70:	240003bc 	.word	0x240003bc
 800dd74:	24000898 	.word	0x24000898

0800dd78 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800dd7c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	4603      	mov	r3, r0
 800dd90:	6039      	str	r1, [r7, #0]
 800dd92:	71fb      	strb	r3, [r7, #7]
 800dd94:	4613      	mov	r3, r2
 800dd96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800dd98:	79fb      	ldrb	r3, [r7, #7]
 800dd9a:	2b23      	cmp	r3, #35	; 0x23
 800dd9c:	d84a      	bhi.n	800de34 <CDC_Control_HS+0xac>
 800dd9e:	a201      	add	r2, pc, #4	; (adr r2, 800dda4 <CDC_Control_HS+0x1c>)
 800dda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda4:	0800de35 	.word	0x0800de35
 800dda8:	0800de35 	.word	0x0800de35
 800ddac:	0800de35 	.word	0x0800de35
 800ddb0:	0800de35 	.word	0x0800de35
 800ddb4:	0800de35 	.word	0x0800de35
 800ddb8:	0800de35 	.word	0x0800de35
 800ddbc:	0800de35 	.word	0x0800de35
 800ddc0:	0800de35 	.word	0x0800de35
 800ddc4:	0800de35 	.word	0x0800de35
 800ddc8:	0800de35 	.word	0x0800de35
 800ddcc:	0800de35 	.word	0x0800de35
 800ddd0:	0800de35 	.word	0x0800de35
 800ddd4:	0800de35 	.word	0x0800de35
 800ddd8:	0800de35 	.word	0x0800de35
 800dddc:	0800de35 	.word	0x0800de35
 800dde0:	0800de35 	.word	0x0800de35
 800dde4:	0800de35 	.word	0x0800de35
 800dde8:	0800de35 	.word	0x0800de35
 800ddec:	0800de35 	.word	0x0800de35
 800ddf0:	0800de35 	.word	0x0800de35
 800ddf4:	0800de35 	.word	0x0800de35
 800ddf8:	0800de35 	.word	0x0800de35
 800ddfc:	0800de35 	.word	0x0800de35
 800de00:	0800de35 	.word	0x0800de35
 800de04:	0800de35 	.word	0x0800de35
 800de08:	0800de35 	.word	0x0800de35
 800de0c:	0800de35 	.word	0x0800de35
 800de10:	0800de35 	.word	0x0800de35
 800de14:	0800de35 	.word	0x0800de35
 800de18:	0800de35 	.word	0x0800de35
 800de1c:	0800de35 	.word	0x0800de35
 800de20:	0800de35 	.word	0x0800de35
 800de24:	0800de35 	.word	0x0800de35
 800de28:	0800de35 	.word	0x0800de35
 800de2c:	0800de35 	.word	0x0800de35
 800de30:	0800de35 	.word	0x0800de35
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800de34:	bf00      	nop
  }

  return (USBD_OK);
 800de36:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800de38:	4618      	mov	r0, r3
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800de4e:	6879      	ldr	r1, [r7, #4]
 800de50:	4824      	ldr	r0, [pc, #144]	; (800dee4 <CDC_Receive_HS+0xa0>)
 800de52:	f7fe fad1 	bl	800c3f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800de56:	4823      	ldr	r0, [pc, #140]	; (800dee4 <CDC_Receive_HS+0xa0>)
 800de58:	f7fe faec 	bl	800c434 <USBD_CDC_ReceivePacket>
  if(Buf[1]==0xB0){
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	3301      	adds	r3, #1
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2bb0      	cmp	r3, #176	; 0xb0
 800de64:	d114      	bne.n	800de90 <CDC_Receive_HS+0x4c>
	  pwm=1000+Buf[3]*8;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	3303      	adds	r3, #3
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	337d      	adds	r3, #125	; 0x7d
 800de6e:	00db      	lsls	r3, r3, #3
 800de70:	4a1d      	ldr	r2, [pc, #116]	; (800dee8 <CDC_Receive_HS+0xa4>)
 800de72:	6013      	str	r3, [r2, #0]
	  if(pwm>2000) pwm=2000;
 800de74:	4b1c      	ldr	r3, [pc, #112]	; (800dee8 <CDC_Receive_HS+0xa4>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800de7c:	dd03      	ble.n	800de86 <CDC_Receive_HS+0x42>
 800de7e:	4b1a      	ldr	r3, [pc, #104]	; (800dee8 <CDC_Receive_HS+0xa4>)
 800de80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800de84:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 800de86:	4b18      	ldr	r3, [pc, #96]	; (800dee8 <CDC_Receive_HS+0xa4>)
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	4b18      	ldr	r3, [pc, #96]	; (800deec <CDC_Receive_HS+0xa8>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(Buf[2] >=60 || Buf[2]<=95){
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3302      	adds	r3, #2
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	2b3b      	cmp	r3, #59	; 0x3b
 800de98:	d804      	bhi.n	800dea4 <CDC_Receive_HS+0x60>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	3302      	adds	r3, #2
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	2b5f      	cmp	r3, #95	; 0x5f
 800dea2:	d819      	bhi.n	800ded8 <CDC_Receive_HS+0x94>
      	if(0x90 == Buf[1]){
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3301      	adds	r3, #1
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b90      	cmp	r3, #144	; 0x90
 800deac:	d107      	bne.n	800debe <CDC_Receive_HS+0x7a>
      	    Servo_status[Buf[2]-12] = ON;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	3302      	adds	r3, #2
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	3b0c      	subs	r3, #12
 800deb6:	4a0e      	ldr	r2, [pc, #56]	; (800def0 <CDC_Receive_HS+0xac>)
 800deb8:	21b4      	movs	r1, #180	; 0xb4
 800deba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      	}
      	if(0x80 == Buf[1]){
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	3301      	adds	r3, #1
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	2b80      	cmp	r3, #128	; 0x80
 800dec6:	d107      	bne.n	800ded8 <CDC_Receive_HS+0x94>
      	    Servo_status[Buf[2]-12] = OFF;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	3302      	adds	r3, #2
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	3b0c      	subs	r3, #12
 800ded0:	4a07      	ldr	r2, [pc, #28]	; (800def0 <CDC_Receive_HS+0xac>)
 800ded2:	2178      	movs	r1, #120	; 0x78
 800ded4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      	}
      }
  return (USBD_OK);
 800ded8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	240003bc 	.word	0x240003bc
 800dee8:	24000260 	.word	0x24000260
 800deec:	240002b0 	.word	0x240002b0
 800def0:	24000090 	.word	0x24000090

0800def4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800def4:	b480      	push	{r7}
 800def6:	b087      	sub	sp, #28
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	4613      	mov	r3, r2
 800df00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df02:	2300      	movs	r3, #0
 800df04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800df06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	371c      	adds	r7, #28
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
	...

0800df18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b0ba      	sub	sp, #232	; 0xe8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
 800df28:	605a      	str	r2, [r3, #4]
 800df2a:	609a      	str	r2, [r3, #8]
 800df2c:	60da      	str	r2, [r3, #12]
 800df2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800df30:	f107 0310 	add.w	r3, r7, #16
 800df34:	22c0      	movs	r2, #192	; 0xc0
 800df36:	2100      	movs	r1, #0
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 fb6f 	bl	800e61c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a3e      	ldr	r2, [pc, #248]	; (800e03c <HAL_PCD_MspInit+0x124>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d174      	bne.n	800e032 <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800df48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800df4c:	f04f 0300 	mov.w	r3, #0
 800df50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800df54:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800df58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800df5c:	f107 0310 	add.w	r3, r7, #16
 800df60:	4618      	mov	r0, r3
 800df62:	f7f6 fd41 	bl	80049e8 <HAL_RCCEx_PeriphCLKConfig>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800df6c:	f7f2 fe58 	bl	8000c20 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800df70:	f7f5 fd6c 	bl	8003a4c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df74:	4b32      	ldr	r3, [pc, #200]	; (800e040 <HAL_PCD_MspInit+0x128>)
 800df76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800df7a:	4a31      	ldr	r2, [pc, #196]	; (800e040 <HAL_PCD_MspInit+0x128>)
 800df7c:	f043 0301 	orr.w	r3, r3, #1
 800df80:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800df84:	4b2e      	ldr	r3, [pc, #184]	; (800e040 <HAL_PCD_MspInit+0x128>)
 800df86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	60fb      	str	r3, [r7, #12]
 800df90:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800df92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800df9a:	2300      	movs	r3, #0
 800df9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800dfa6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800dfaa:	4619      	mov	r1, r3
 800dfac:	4825      	ldr	r0, [pc, #148]	; (800e044 <HAL_PCD_MspInit+0x12c>)
 800dfae:	f7f4 f857 	bl	8002060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800dfb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfba:	2302      	movs	r3, #2
 800dfbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800dfcc:	230a      	movs	r3, #10
 800dfce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800dfd2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	481a      	ldr	r0, [pc, #104]	; (800e044 <HAL_PCD_MspInit+0x12c>)
 800dfda:	f7f4 f841 	bl	8002060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800dfde:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dfe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfec:	2300      	movs	r3, #0
 800dfee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dff2:	2300      	movs	r3, #0
 800dff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dff8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800dffc:	4619      	mov	r1, r3
 800dffe:	4811      	ldr	r0, [pc, #68]	; (800e044 <HAL_PCD_MspInit+0x12c>)
 800e000:	f7f4 f82e 	bl	8002060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e004:	4b0e      	ldr	r3, [pc, #56]	; (800e040 <HAL_PCD_MspInit+0x128>)
 800e006:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800e00a:	4a0d      	ldr	r2, [pc, #52]	; (800e040 <HAL_PCD_MspInit+0x128>)
 800e00c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e010:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800e014:	4b0a      	ldr	r3, [pc, #40]	; (800e040 <HAL_PCD_MspInit+0x128>)
 800e016:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800e01a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e01e:	60bb      	str	r3, [r7, #8]
 800e020:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800e022:	2200      	movs	r2, #0
 800e024:	2100      	movs	r1, #0
 800e026:	204d      	movs	r0, #77	; 0x4d
 800e028:	f7f3 fa81 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e02c:	204d      	movs	r0, #77	; 0x4d
 800e02e:	f7f3 fa98 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e032:	bf00      	nop
 800e034:	37e8      	adds	r7, #232	; 0xe8
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	40040000 	.word	0x40040000
 800e040:	58024400 	.word	0x58024400
 800e044:	58020000 	.word	0x58020000

0800e048 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e05c:	4619      	mov	r1, r3
 800e05e:	4610      	mov	r0, r2
 800e060:	f7fe fad1 	bl	800c606 <USBD_LL_SetupStage>
}
 800e064:	bf00      	nop
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	460b      	mov	r3, r1
 800e076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e07e:	78fa      	ldrb	r2, [r7, #3]
 800e080:	6879      	ldr	r1, [r7, #4]
 800e082:	4613      	mov	r3, r2
 800e084:	00db      	lsls	r3, r3, #3
 800e086:	4413      	add	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	440b      	add	r3, r1
 800e08c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	78fb      	ldrb	r3, [r7, #3]
 800e094:	4619      	mov	r1, r3
 800e096:	f7fe fb0b 	bl	800c6b0 <USBD_LL_DataOutStage>
}
 800e09a:	bf00      	nop
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b082      	sub	sp, #8
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e0b4:	78fa      	ldrb	r2, [r7, #3]
 800e0b6:	6879      	ldr	r1, [r7, #4]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	4413      	add	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	440b      	add	r3, r1
 800e0c2:	3348      	adds	r3, #72	; 0x48
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	78fb      	ldrb	r3, [r7, #3]
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	f7fe fba4 	bl	800c816 <USBD_LL_DataInStage>
}
 800e0ce:	bf00      	nop
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fe fcde 	bl	800caa6 <USBD_LL_SOF>
}
 800e0ea:	bf00      	nop
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	691b      	ldr	r3, [r3, #16]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d102      	bne.n	800e10c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e106:	2300      	movs	r3, #0
 800e108:	73fb      	strb	r3, [r7, #15]
 800e10a:	e008      	b.n	800e11e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	691b      	ldr	r3, [r3, #16]
 800e110:	2b02      	cmp	r3, #2
 800e112:	d102      	bne.n	800e11a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e114:	2301      	movs	r3, #1
 800e116:	73fb      	strb	r3, [r7, #15]
 800e118:	e001      	b.n	800e11e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e11a:	f7f2 fd81 	bl	8000c20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e124:	7bfa      	ldrb	r2, [r7, #15]
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fe fc78 	bl	800ca1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e134:	4618      	mov	r0, r3
 800e136:	f7fe fc20 	bl	800c97a <USBD_LL_Reset>
}
 800e13a:	bf00      	nop
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
	...

0800e144 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e152:	4618      	mov	r0, r3
 800e154:	f7fe fc73 	bl	800ca3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	6812      	ldr	r2, [r2, #0]
 800e166:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e16a:	f043 0301 	orr.w	r3, r3, #1
 800e16e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6a1b      	ldr	r3, [r3, #32]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d005      	beq.n	800e184 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e178:	4b04      	ldr	r3, [pc, #16]	; (800e18c <HAL_PCD_SuspendCallback+0x48>)
 800e17a:	691b      	ldr	r3, [r3, #16]
 800e17c:	4a03      	ldr	r2, [pc, #12]	; (800e18c <HAL_PCD_SuspendCallback+0x48>)
 800e17e:	f043 0306 	orr.w	r3, r3, #6
 800e182:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e184:	bf00      	nop
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	e000ed00 	.word	0xe000ed00

0800e190 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fe fc69 	bl	800ca76 <USBD_LL_Resume>
}
 800e1a4:	bf00      	nop
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1be:	78fa      	ldrb	r2, [r7, #3]
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fe fcc1 	bl	800cb4a <USBD_LL_IsoOUTIncomplete>
}
 800e1c8:	bf00      	nop
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	460b      	mov	r3, r1
 800e1da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1e2:	78fa      	ldrb	r2, [r7, #3]
 800e1e4:	4611      	mov	r1, r2
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7fe fc7d 	bl	800cae6 <USBD_LL_IsoINIncomplete>
}
 800e1ec:	bf00      	nop
 800e1ee:	3708      	adds	r7, #8
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e202:	4618      	mov	r0, r3
 800e204:	f7fe fcd3 	bl	800cbae <USBD_LL_DevConnected>
}
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe fcd0 	bl	800cbc4 <USBD_LL_DevDisconnected>
}
 800e224:	bf00      	nop
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d140      	bne.n	800e2be <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e23c:	4a22      	ldr	r2, [pc, #136]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a20      	ldr	r2, [pc, #128]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e248:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e24c:	4b1e      	ldr	r3, [pc, #120]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e24e:	4a1f      	ldr	r2, [pc, #124]	; (800e2cc <USBD_LL_Init+0xa0>)
 800e250:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800e252:	4b1d      	ldr	r3, [pc, #116]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e254:	2209      	movs	r2, #9
 800e256:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e258:	4b1b      	ldr	r3, [pc, #108]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e25a:	2202      	movs	r2, #2
 800e25c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e25e:	4b1a      	ldr	r3, [pc, #104]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e260:	2200      	movs	r2, #0
 800e262:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e264:	4b18      	ldr	r3, [pc, #96]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e266:	2202      	movs	r2, #2
 800e268:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e26a:	4b17      	ldr	r3, [pc, #92]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e270:	4b15      	ldr	r3, [pc, #84]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e272:	2200      	movs	r2, #0
 800e274:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e276:	4b14      	ldr	r3, [pc, #80]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e278:	2200      	movs	r2, #0
 800e27a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800e27c:	4b12      	ldr	r3, [pc, #72]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e27e:	2201      	movs	r2, #1
 800e280:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e282:	4b11      	ldr	r3, [pc, #68]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e284:	2200      	movs	r2, #0
 800e286:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e288:	4b0f      	ldr	r3, [pc, #60]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e28e:	480e      	ldr	r0, [pc, #56]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e290:	f7f4 f8c9 	bl	8002426 <HAL_PCD_Init>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d001      	beq.n	800e29e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e29a:	f7f2 fcc1 	bl	8000c20 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e29e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2a2:	4809      	ldr	r0, [pc, #36]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e2a4:	f7f5 fb37 	bl	8003916 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e2a8:	2280      	movs	r2, #128	; 0x80
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	4806      	ldr	r0, [pc, #24]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e2ae:	f7f5 faeb 	bl	8003888 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e2b2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	4803      	ldr	r0, [pc, #12]	; (800e2c8 <USBD_LL_Init+0x9c>)
 800e2ba:	f7f5 fae5 	bl	8003888 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	24001898 	.word	0x24001898
 800e2cc:	40040000 	.word	0x40040000

0800e2d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7f4 f9c1 	bl	800266e <HAL_PCD_Start>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f000 f942 	bl	800e57c <USBD_Get_USB_Status>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b084      	sub	sp, #16
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	4608      	mov	r0, r1
 800e310:	4611      	mov	r1, r2
 800e312:	461a      	mov	r2, r3
 800e314:	4603      	mov	r3, r0
 800e316:	70fb      	strb	r3, [r7, #3]
 800e318:	460b      	mov	r3, r1
 800e31a:	70bb      	strb	r3, [r7, #2]
 800e31c:	4613      	mov	r3, r2
 800e31e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e324:	2300      	movs	r3, #0
 800e326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e32e:	78bb      	ldrb	r3, [r7, #2]
 800e330:	883a      	ldrh	r2, [r7, #0]
 800e332:	78f9      	ldrb	r1, [r7, #3]
 800e334:	f7f4 fec1 	bl	80030ba <HAL_PCD_EP_Open>
 800e338:	4603      	mov	r3, r0
 800e33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e33c:	7bfb      	ldrb	r3, [r7, #15]
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 f91c 	bl	800e57c <USBD_Get_USB_Status>
 800e344:	4603      	mov	r3, r0
 800e346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e348:	7bbb      	ldrb	r3, [r7, #14]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
 800e35a:	460b      	mov	r3, r1
 800e35c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e35e:	2300      	movs	r3, #0
 800e360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e362:	2300      	movs	r3, #0
 800e364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e36c:	78fa      	ldrb	r2, [r7, #3]
 800e36e:	4611      	mov	r1, r2
 800e370:	4618      	mov	r0, r3
 800e372:	f7f4 ff0a 	bl	800318a <HAL_PCD_EP_Close>
 800e376:	4603      	mov	r3, r0
 800e378:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 f8fd 	bl	800e57c <USBD_Get_USB_Status>
 800e382:	4603      	mov	r3, r0
 800e384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e386:	7bbb      	ldrb	r3, [r7, #14]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	460b      	mov	r3, r1
 800e39a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e39c:	2300      	movs	r3, #0
 800e39e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3aa:	78fa      	ldrb	r2, [r7, #3]
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7f4 ffc4 	bl	800333c <HAL_PCD_EP_SetStall>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3b8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 f8de 	bl	800e57c <USBD_Get_USB_Status>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b084      	sub	sp, #16
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3e8:	78fa      	ldrb	r2, [r7, #3]
 800e3ea:	4611      	mov	r1, r2
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7f5 f809 	bl	8003404 <HAL_PCD_EP_ClrStall>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3f6:	7bfb      	ldrb	r3, [r7, #15]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f000 f8bf 	bl	800e57c <USBD_Get_USB_Status>
 800e3fe:	4603      	mov	r3, r0
 800e400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e402:	7bbb      	ldrb	r3, [r7, #14]
}
 800e404:	4618      	mov	r0, r3
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	460b      	mov	r3, r1
 800e416:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e41e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e424:	2b00      	cmp	r3, #0
 800e426:	da0b      	bge.n	800e440 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e428:	78fb      	ldrb	r3, [r7, #3]
 800e42a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e42e:	68f9      	ldr	r1, [r7, #12]
 800e430:	4613      	mov	r3, r2
 800e432:	00db      	lsls	r3, r3, #3
 800e434:	4413      	add	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	440b      	add	r3, r1
 800e43a:	333e      	adds	r3, #62	; 0x3e
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	e00b      	b.n	800e458 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e440:	78fb      	ldrb	r3, [r7, #3]
 800e442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e446:	68f9      	ldr	r1, [r7, #12]
 800e448:	4613      	mov	r3, r2
 800e44a:	00db      	lsls	r3, r3, #3
 800e44c:	4413      	add	r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	440b      	add	r3, r1
 800e452:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e456:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	460b      	mov	r3, r1
 800e46e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e470:	2300      	movs	r3, #0
 800e472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e474:	2300      	movs	r3, #0
 800e476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e47e:	78fa      	ldrb	r2, [r7, #3]
 800e480:	4611      	mov	r1, r2
 800e482:	4618      	mov	r0, r3
 800e484:	f7f4 fdf4 	bl	8003070 <HAL_PCD_SetAddress>
 800e488:	4603      	mov	r3, r0
 800e48a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
 800e48e:	4618      	mov	r0, r3
 800e490:	f000 f874 	bl	800e57c <USBD_Get_USB_Status>
 800e494:	4603      	mov	r3, r0
 800e496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e498:	7bbb      	ldrb	r3, [r7, #14]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b086      	sub	sp, #24
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	60f8      	str	r0, [r7, #12]
 800e4aa:	607a      	str	r2, [r7, #4]
 800e4ac:	603b      	str	r3, [r7, #0]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e4c0:	7af9      	ldrb	r1, [r7, #11]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	f7f4 fefe 	bl	80032c6 <HAL_PCD_EP_Transmit>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f000 f853 	bl	800e57c <USBD_Get_USB_Status>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4da:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3718      	adds	r7, #24
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b086      	sub	sp, #24
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	607a      	str	r2, [r7, #4]
 800e4ee:	603b      	str	r3, [r7, #0]
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e502:	7af9      	ldrb	r1, [r7, #11]
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	f7f4 fe89 	bl	800321e <HAL_PCD_EP_Receive>
 800e50c:	4603      	mov	r3, r0
 800e50e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e510:	7dfb      	ldrb	r3, [r7, #23]
 800e512:	4618      	mov	r0, r3
 800e514:	f000 f832 	bl	800e57c <USBD_Get_USB_Status>
 800e518:	4603      	mov	r3, r0
 800e51a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e51c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b082      	sub	sp, #8
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
 800e52e:	460b      	mov	r3, r1
 800e530:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e538:	78fa      	ldrb	r2, [r7, #3]
 800e53a:	4611      	mov	r1, r2
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7f4 feaa 	bl	8003296 <HAL_PCD_EP_GetRxCount>
 800e542:	4603      	mov	r3, r0
}
 800e544:	4618      	mov	r0, r3
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e554:	4b03      	ldr	r3, [pc, #12]	; (800e564 <USBD_static_malloc+0x18>)
}
 800e556:	4618      	mov	r0, r3
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	24001da4 	.word	0x24001da4

0800e568 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]

}
 800e570:	bf00      	nop
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e58a:	79fb      	ldrb	r3, [r7, #7]
 800e58c:	2b03      	cmp	r3, #3
 800e58e:	d817      	bhi.n	800e5c0 <USBD_Get_USB_Status+0x44>
 800e590:	a201      	add	r2, pc, #4	; (adr r2, 800e598 <USBD_Get_USB_Status+0x1c>)
 800e592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e596:	bf00      	nop
 800e598:	0800e5a9 	.word	0x0800e5a9
 800e59c:	0800e5af 	.word	0x0800e5af
 800e5a0:	0800e5b5 	.word	0x0800e5b5
 800e5a4:	0800e5bb 	.word	0x0800e5bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ac:	e00b      	b.n	800e5c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5ae:	2303      	movs	r3, #3
 800e5b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e5b2:	e008      	b.n	800e5c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5b8:	e005      	b.n	800e5c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5ba:	2303      	movs	r3, #3
 800e5bc:	73fb      	strb	r3, [r7, #15]
    break;
 800e5be:	e002      	b.n	800e5c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e5c0:	2303      	movs	r3, #3
 800e5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c4:	bf00      	nop
  }
  return usb_status;
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3714      	adds	r7, #20
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <__libc_init_array>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	4d0d      	ldr	r5, [pc, #52]	; (800e60c <__libc_init_array+0x38>)
 800e5d8:	4c0d      	ldr	r4, [pc, #52]	; (800e610 <__libc_init_array+0x3c>)
 800e5da:	1b64      	subs	r4, r4, r5
 800e5dc:	10a4      	asrs	r4, r4, #2
 800e5de:	2600      	movs	r6, #0
 800e5e0:	42a6      	cmp	r6, r4
 800e5e2:	d109      	bne.n	800e5f8 <__libc_init_array+0x24>
 800e5e4:	4d0b      	ldr	r5, [pc, #44]	; (800e614 <__libc_init_array+0x40>)
 800e5e6:	4c0c      	ldr	r4, [pc, #48]	; (800e618 <__libc_init_array+0x44>)
 800e5e8:	f000 f820 	bl	800e62c <_init>
 800e5ec:	1b64      	subs	r4, r4, r5
 800e5ee:	10a4      	asrs	r4, r4, #2
 800e5f0:	2600      	movs	r6, #0
 800e5f2:	42a6      	cmp	r6, r4
 800e5f4:	d105      	bne.n	800e602 <__libc_init_array+0x2e>
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}
 800e5f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5fc:	4798      	blx	r3
 800e5fe:	3601      	adds	r6, #1
 800e600:	e7ee      	b.n	800e5e0 <__libc_init_array+0xc>
 800e602:	f855 3b04 	ldr.w	r3, [r5], #4
 800e606:	4798      	blx	r3
 800e608:	3601      	adds	r6, #1
 800e60a:	e7f2      	b.n	800e5f2 <__libc_init_array+0x1e>
 800e60c:	0800e71c 	.word	0x0800e71c
 800e610:	0800e71c 	.word	0x0800e71c
 800e614:	0800e71c 	.word	0x0800e71c
 800e618:	0800e720 	.word	0x0800e720

0800e61c <memset>:
 800e61c:	4402      	add	r2, r0
 800e61e:	4603      	mov	r3, r0
 800e620:	4293      	cmp	r3, r2
 800e622:	d100      	bne.n	800e626 <memset+0xa>
 800e624:	4770      	bx	lr
 800e626:	f803 1b01 	strb.w	r1, [r3], #1
 800e62a:	e7f9      	b.n	800e620 <memset+0x4>

0800e62c <_init>:
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62e:	bf00      	nop
 800e630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e632:	bc08      	pop	{r3}
 800e634:	469e      	mov	lr, r3
 800e636:	4770      	bx	lr

0800e638 <_fini>:
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	bf00      	nop
 800e63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e63e:	bc08      	pop	{r3}
 800e640:	469e      	mov	lr, r3
 800e642:	4770      	bx	lr
