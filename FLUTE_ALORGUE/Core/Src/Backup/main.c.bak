/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "usb_device.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ON 180
#define OFF 120
#define PWM_MIN 1000
#define PWM_MAX 2000
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
static int pwm_counter = 0;

uint8_t cable, code, message, channel, messageByte1, messageByte2;

GPIO_TypeDef *Servo_GPIO_Addr[36] = {Servo1_GPIO_Port, Servo2_GPIO_Port, Servo3_GPIO_Port, Servo4_GPIO_Port, Servo5_GPIO_Port, Servo6_GPIO_Port, Servo7_GPIO_Port,
		Servo8_GPIO_Port, Servo9_GPIO_Port, Servo10_GPIO_Port, Servo11_GPIO_Port, Servo12_GPIO_Port, Servo13_GPIO_Port, Servo14_GPIO_Port, Servo15_GPIO_Port,
		Servo16_GPIO_Port, Servo17_GPIO_Port, Servo18_GPIO_Port, Servo19_GPIO_Port, Servo20_GPIO_Port, Servo21_GPIO_Port, Servo22_GPIO_Port, Servo23_GPIO_Port,
		Servo24_GPIO_Port, Servo25_GPIO_Port, Servo26_GPIO_Port, Servo27_GPIO_Port, Servo28_GPIO_Port, Servo29_GPIO_Port, Servo30_GPIO_Port, Servo31_GPIO_Port,
		Servo32_GPIO_Port, Servo33_GPIO_Port, Servo34_GPIO_Port, Servo35_GPIO_Port, Servo36_GPIO_Port};

const uint16_t Servo_GPIO_Pins[36] = {Servo1_Pin, Servo2_Pin, Servo3_Pin, Servo4_Pin, Servo5_Pin, Servo6_Pin, Servo7_Pin, Servo8_Pin, Servo9_Pin, Servo10_Pin,
		Servo11_Pin, Servo12_Pin, Servo13_Pin, Servo14_Pin, Servo15_Pin, Servo16_Pin, Servo17_Pin, Servo18_Pin, Servo19_Pin, Servo20_Pin, Servo21_Pin,
		Servo22_Pin, Servo23_Pin, Servo24_Pin, Servo25_Pin, Servo26_Pin, Servo27_Pin, Servo28_Pin, Servo29_Pin, Servo30_Pin, Servo31_Pin, Servo32_Pin,
		Servo33_Pin, Servo34_Pin, Servo35_Pin, Servo36_Pin};

int Servo_status[36] = {OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF,
		OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF, OFF};


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Servo_Handler(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, int status);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM1)
	{
		pwm_counter++;
		for(int i=0; i<36; i++){
			//			Servo_Handler(Servo_GPIO_Addr[i], Servo_GPIO_Pins[i], Servo_status[i]);
			if(pwm_counter == 1){
				HAL_GPIO_WritePin(Servo_GPIO_Addr[i], Servo_GPIO_Pins[i], GPIO_PIN_SET);
			}
			if(pwm_counter == Servo_status[i]){
				HAL_GPIO_WritePin(Servo_GPIO_Addr[i], Servo_GPIO_Pins[i], GPIO_PIN_RESET);
			}
		}
		if(pwm_counter > 2000){
			pwm_counter=0;
		}

		//		counter++;
		//		if (counter == 2000)
		//		{
		//			HAL_GPIO_WritePin(Servo13_GPIO_Port, Servo13_Pin, GPIO_PIN_SET);
		//			counter = 0;
		//		}
		//		if (counter == 1000)
		//		{
		//			HAL_GPIO_WritePin(Servo13_GPIO_Port, Servo13_Pin, GPIO_PIN_RESET);
		//		}
	}
}

void Servo_Handler(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, int status){
	if(pwm_counter == 1){
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
	}
	if(pwm_counter == status){
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	int pwm;
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_USB_DEVICE_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, "Hello\r\n", 7, 100);
	HAL_TIM_Base_Start_IT(&htim1);
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, 1);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM_MIN);
	pwm = PWM_MIN;
	while (uartRxBuffer[0]!='i')
	{
		if(uartFlag){
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			uartFlag = 0;
			switch (uartRxBuffer[0]) {
			case 's': //Stop
				pwm = PWM_MIN;
				break;
			case 't': //Throttle
				pwm = PWM_MAX;
				break;
			case '+':
				if(pwm<PWM_MAX) pwm+=5;
				break;
			case '-':
				if(pwm>PWM_MIN) pwm-=5;
				break;
			default:
				break;
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
		}
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 35;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uartTxBuffer[0]=uartRxBuffer[0];
	HAL_UART_Transmit(&huart3, uartTxBuffer, 1, 100);
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, 1);
	uartFlag = 1;

}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
